{"version":3,"file":"functions.test.js","sourceRoot":"","sources":["../../src/server/functions.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { describe, it, expect, vi, beforeEach, type Mock } from \"vitest\";\nimport { getUser } from \"./functions.js\";\nimport type { UserDetailsWithAuth } from \"../types.js\";\nimport type { User } from \"@civic/auth\";\nimport {\n  MetakeepServerWeb3Client,\n  type ServerWeb3Client,\n} from \"../lib/metakeep/MetakeepServerWeb3Client.js\";\n\nconst mockWeb3Client = { createWallets: vi.fn() };\n\n// Mock CivicAuth\nvi.mock(\"@civic/auth/server\", () => ({\n  CivicAuth: vi.fn().mockImplementation(() => ({\n    getUser: vi.fn(),\n    getTokens: vi.fn(),\n  })),\n}));\n\nvi.mock(\"metakeep\");\nvi.mock(\"../lib/metakeep/MetakeepServerWeb3Client.js\");\n\n// Mock getWallets function\nvi.mock(\"./functions.js\", async (importOriginal) => {\n  const actual = await importOriginal();\n  return {\n    ...(actual as Record<string, unknown>),\n    // We need to keep the actual functions we're testing\n    getUser: (actual as Record<string, unknown>).getUser,\n    getUserWithAuthDetails: (actual as Record<string, unknown>)\n      .getUserWithAuthDetails,\n  };\n});\n\ndescribe(\"getUser\", () => {\n  const mockAuthStorage = {} as any;\n  const mockAuthConfig = {} as any;\n  const mockConfig = {} as any;\n\n  beforeEach(async () => {\n    vi.mocked(MetakeepServerWeb3Client.build).mockResolvedValue({\n      ...mockWeb3Client,\n      ethereum: { address: \"mock-eth-address\" },\n      solana: { address: \"mock-sol-address\" },\n    } as unknown as ServerWeb3Client);\n    mockWeb3Client.createWallets.mockResolvedValue({\n      ethereum: \"mock-eth-address\",\n      solana: \"mock-sol-address\",\n    });\n  });\n\n  // Create a mock user with basic auth details\n  const mockUser: User<\n    UserDetailsWithAuth & {\n      solana?: { address: string } | undefined;\n      ethereum?: { address: string };\n    }\n  > = {\n    id: \"user-123\",\n    email: \"test@example.com\",\n    idToken: \"mock-id-token\",\n  };\n\n  // Import CivicAuth for mocking\n\n  let CivicAuth: any;\n  let mockCivicAuth: any;\n  beforeEach(async () => {\n    vi.clearAllMocks();\n    const { CivicAuth: CivicAuthImported } = await import(\"@civic/auth/server\");\n    CivicAuth = CivicAuthImported;\n    mockCivicAuth = {\n      getUser: vi.fn(),\n      getTokens: vi.fn(),\n    };\n\n    // Reset the mocks\n    (CivicAuth as unknown as Mock).mockImplementation(() => mockCivicAuth);\n    mockCivicAuth.getUser.mockResolvedValue({\n      id: mockUser.id,\n      email: mockUser.email,\n    });\n    mockCivicAuth.getTokens.mockResolvedValue({ idToken: mockUser.idToken });\n  });\n\n  it(\"should return null if user is not authenticated\", async () => {\n    // Simulate user not being authenticated\n    mockCivicAuth.getUser.mockResolvedValue(null);\n\n    const result = await getUser(mockConfig, mockAuthStorage, mockAuthConfig);\n\n    expect(result).toBeNull();\n    expect(CivicAuth).toHaveBeenCalledWith(mockAuthStorage, mockAuthConfig);\n    expect(mockCivicAuth.getUser).toHaveBeenCalled();\n  });\n\n  it(\"should correctly add only ethereum wallet address to user object\", async () => {\n    mockWeb3Client.createWallets.mockResolvedValue({\n      ethereum: \"mock-eth-address\",\n      solana: null,\n    });\n    vi.mocked(MetakeepServerWeb3Client.build).mockResolvedValue({\n      ...mockWeb3Client,\n      ethereum: { address: \"mock-eth-address\" },\n      solana: null,\n    } as unknown as ServerWeb3Client);\n    const result = await getUser(mockConfig, mockAuthStorage, mockAuthConfig);\n\n    expect(result).not.toBeNull();\n    expect(result).toEqual({\n      ...mockUser,\n      ethereum: {\n        address: \"mock-eth-address\",\n      },\n    });\n\n    expect(CivicAuth).toHaveBeenCalledWith(mockAuthStorage, mockAuthConfig);\n    expect(mockCivicAuth.getUser).toHaveBeenCalled();\n    expect(mockCivicAuth.getTokens).toHaveBeenCalled();\n  });\n\n  it(\"should correctly add only solana wallet address to user object\", async () => {\n    mockWeb3Client.createWallets.mockResolvedValue({\n      ethereum: null,\n      solana: \"mock-sol-address\",\n    });\n    vi.mocked(MetakeepServerWeb3Client.build).mockResolvedValue({\n      ...mockWeb3Client,\n      ethereum: null,\n      solana: { address: \"mock-sol-address\" },\n    } as unknown as ServerWeb3Client);\n\n    const result = await getUser(mockConfig, mockAuthStorage, mockAuthConfig);\n\n    expect(result).not.toBeNull();\n    expect(result).toEqual({\n      ...mockUser,\n      solana: {\n        address: \"mock-sol-address\",\n      },\n    });\n\n    expect(CivicAuth).toHaveBeenCalledWith(mockAuthStorage, mockAuthConfig);\n    expect(mockCivicAuth.getUser).toHaveBeenCalled();\n    expect(mockCivicAuth.getTokens).toHaveBeenCalled();\n  });\n\n  it(\"should correctly add both ethereum and solana wallet addresses to user object\", async () => {\n    // Mock the getWallets to return both ethereum and solana wallets\n\n    const result = await getUser(mockConfig, mockAuthStorage, mockAuthConfig);\n\n    expect(result).not.toBeNull();\n    expect(result).toEqual({\n      ...mockUser,\n      ethereum: {\n        address: \"mock-eth-address\",\n      },\n      solana: {\n        address: \"mock-sol-address\",\n      },\n    });\n\n    expect(CivicAuth).toHaveBeenCalledWith(mockAuthStorage, mockAuthConfig);\n    expect(mockCivicAuth.getUser).toHaveBeenCalled();\n    expect(mockCivicAuth.getTokens).toHaveBeenCalled();\n  });\n\n  it(\"should handle empty wallets list gracefully\", async () => {\n    mockWeb3Client.createWallets.mockResolvedValue({\n      ethereum: null,\n      solana: null,\n    });\n    vi.mocked(MetakeepServerWeb3Client.build).mockResolvedValue({\n      ...mockWeb3Client,\n      ethereum: null,\n      solana: null,\n    } as unknown as ServerWeb3Client);\n    const result = await getUser(mockConfig, mockAuthStorage, mockAuthConfig);\n\n    expect(result).not.toBeNull();\n    expect(result).toEqual({\n      ...mockUser,\n      solana: undefined,\n      ethereum: undefined,\n    });\n    expect(CivicAuth).toHaveBeenCalledWith(mockAuthStorage, mockAuthConfig);\n    expect(mockCivicAuth.getUser).toHaveBeenCalled();\n    expect(mockCivicAuth.getTokens).toHaveBeenCalled();\n  });\n});\n"]}
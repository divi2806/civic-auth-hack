{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../src/server/functions.ts"],"names":[],"mappings":"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","sourcesContent":["import { CivicAuth, type AuthConfig } from \"@civic/auth/server\";\nimport type {\n  CivicWeb3ClientConfig,\n  SparseWallet,\n  UserDetailsWithAuth,\n} from \"../types.js\";\nimport type { AuthStorage, User } from \"@civic/auth\";\nimport { MetakeepServerWeb3Client } from \"../lib/metakeep/MetakeepServerWeb3Client.js\";\n\nconst addressToWallet = (\n  address: string,\n  type: SparseWallet[\"type\"],\n): SparseWallet => ({\n  walletAddress: address,\n  type,\n});\n\n// Cache the wallets for the user, so that several server components calling getUser()\n// do not make several calls to the wallet API.\nexport const getWallets = async <T extends UserDetailsWithAuth>(\n  user: User<T>,\n  config?: CivicWeb3ClientConfig,\n): Promise<SparseWallet[]> => {\n  // Use the server-side Web3Client implementation instead of the browser-based one\n  const web3Client = await MetakeepServerWeb3Client.build(config || {}, user);\n\n  return [\n    !!web3Client.ethereum?.address &&\n      addressToWallet(web3Client.ethereum.address, \"ethereum\"),\n    !!web3Client.solana?.address &&\n      addressToWallet(web3Client.solana.address, \"solana\"),\n  ].filter((wallet) => !!wallet) as SparseWallet[];\n};\n\nexport const getUserWithAuthDetails = async (\n  authStorage: AuthStorage,\n  authConfig: AuthConfig,\n): Promise<User<UserDetailsWithAuth> | null> => {\n  const civicAuth = new CivicAuth(authStorage, authConfig);\n  const user = await civicAuth.getUser();\n  const tokens = await civicAuth.getTokens();\n  if (!user?.email || !tokens?.idToken) return null;\n  return {\n    ...user,\n    email: user.email, // this is implicit in the above line but amounts to a type assertion\n    idToken: tokens.idToken,\n  };\n};\n\nexport const getUser = async <T extends UserDetailsWithAuth>(\n  config: CivicWeb3ClientConfig,\n  authStorage: AuthStorage,\n  authConfig: AuthConfig,\n): Promise<User<T> | null> => {\n  const user = (await getUserWithAuthDetails(\n    authStorage,\n    authConfig,\n  )) as User<T>;\n  if (!user) return null;\n\n  const wallets = await getWallets(user, config);\n\n  return wallets.reduce((acc, wallet) => {\n    if (!wallet) {\n      return acc;\n    }\n    return {\n      ...acc,\n      [wallet.type]: {\n        address: wallet.walletAddress,\n      },\n    };\n  }, user);\n};\n\nexport const createWallets = async (\n  config: CivicWeb3ClientConfig,\n  authStorage: AuthStorage,\n  authConfig: AuthConfig,\n): Promise<SparseWallet[]> => {\n  const user = await getUserWithAuthDetails(authStorage, authConfig);\n  if (!user) {\n    throw new Error(\"create wallet requires a user and an idToken\");\n  }\n\n  const wallets = await getWallets(user, config);\n\n  // let the frontend know about the new wallet\n  // note - the frontend can also find out by simply reloading - it doesn't rely on this cookie\n  // for the wallet information\n  await authStorage.set(\"civic-embedded-wallet\", JSON.stringify(wallets));\n\n  return wallets;\n};\n"]}
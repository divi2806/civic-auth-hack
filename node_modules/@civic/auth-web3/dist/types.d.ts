import type { Address, Chain, WalletClient } from "viem";
import type { User } from "@civic/auth";
import type { CivicAuthProviderProps, UserContextType } from "@civic/auth/react";
import type { AuthProviderProps as NextCivicAuthProviderProps } from "@civic/auth/nextjs";
import type { WalletAdapterProps, MessageSignerWalletAdapterProps, SignerWalletAdapterProps, SignInMessageSignerWalletAdapterProps } from "@solana/wallet-adapter-base";
export type NextCivicAuthWeb3ProviderProps = Omit<NextCivicAuthProviderProps, "redirectUri" | "endpoints"> & Web3ProviderProps & {
    onSessionEnd?: () => void;
};
export type CivicAuthWeb3ProviderProps = Omit<CivicAuthProviderProps, "redirectUri" | "endpoints"> & Web3ProviderProps & {
    onSessionEnd?: () => void;
};
export type Web3ProviderProps = {
    autoCreateWallet?: boolean;
    autoConnectEmbeddedWallet?: boolean;
    endpoints?: {
        auth?: string;
        token?: string;
        wallet?: string;
        rpcs?: EVMChainRpcUrls;
    };
    chains?: Chain[];
    initialChain?: Chain;
};
export type CivicWeb3ClientConfig = {
    endpoints?: {
        wallet?: string;
        analytics?: string;
        rpcs?: EVMChainRpcUrls;
    };
    chains?: Chain[];
    initialChain?: Chain;
};
export type ChainType = "ethereum" | "solana";
export type SparseWallet = {
    walletAddress: string;
    type: ChainType;
};
export type GetWalletsResponse = SparseWallet[];
export type SolanaWallet = WalletAdapterProps<"Civic"> & MessageSignerWalletAdapterProps<"Civic"> & SignerWalletAdapterProps<"Civic"> & SignInMessageSignerWalletAdapterProps<"Civic">;
export type UnknownObject = Record<string, unknown>;
export type Wallets = {
    ethereum: {
        address: Address;
        wallet: WalletClient;
    };
    solana: {
        address: string;
        wallet: SolanaWallet;
    };
};
type BaseContext<T extends UnknownObject> = UserContextType & {
    walletCreationInProgress: boolean;
    user: User<T> | null;
};
export type ExistingWeb3UserContext<T extends UnknownObject = UnknownObject> = BaseContext<T> & Wallets;
export type NewWeb3UserContext<T extends UnknownObject = UnknownObject> = BaseContext<T> & {
    createWallet: () => Promise<void>;
    walletCreationInProgress: boolean;
    walletCreationAllowed?: boolean;
};
export type Web3UserContextType<T extends UnknownObject = UnknownObject> = NewWeb3UserContext<T> | ExistingWeb3UserContext<T>;
export type NonEmptyArray<T> = [T, ...T[]];
export type RpcUrls = {
    http: NonEmptyArray<string>;
    webSocket?: NonEmptyArray<string> | undefined;
};
export type EVMChainRpcUrls = Record<number, RpcUrls>;
export type GenericEthereumProvider = {
    request(...args: unknown[]): Promise<unknown>;
};
export type UserDetails = {
    email: string;
    ethWalletAddress?: string;
    solWalletAddress?: string;
};
export type UserDetailsWithAuth = UserDetails & {
    idToken: string;
};
export type PermissionsCheckResponse = {
    [key: string]: {
        allowed: boolean;
        reason?: string;
    };
};
export {};
//# sourceMappingURL=types.d.ts.map
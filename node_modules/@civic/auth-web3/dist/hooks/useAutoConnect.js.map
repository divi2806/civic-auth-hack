{"version":3,"file":"useAutoConnect.js","sourceRoot":"","sources":["../../src/hooks/useAutoConnect.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,OAAO,EAAkB,UAAU,EAAE,UAAU,EAAE,MAAM,OAAO,CAAC;AAC/D,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AACtD,OAAO,EAAE,OAAO,EAAE,MAAM,mCAAmC,CAAC;AAC5D,OAAO,EAAE,kBAAkB,EAAE,MAAM,oCAAoC,CAAC;AACxE,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB,CAAC;AAEhD,MAAM,uBAAuB,GAAG,CAC9B,SAAgC,EAChC,OAAqC,EACrC,EAAE;IACF,IAAI,SAAS,EAAE,CAAC;QACd,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QACzC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC1C,CAAC;AACH,CAAC,CAAC;AAEF,MAAM,cAAc,GAAG,CACrB,EAAE,yBAAyB,EAAE,gBAAgB,EAAE,GAAG;IAChD,yBAAyB,EAAE,IAAI;IAC/B,gBAAgB,EAAE,IAAI;CACvB,EACD,EAAE;IACF,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,UAAU,EAAE,CAAC;IACrD,MAAM,WAAW,GAAG,OAAO,EAAE,CAAC;IAC9B,MAAM,EAAE,WAAW,EAAE,GAAG,UAAU,EAAE,CAAC;IACrC,MAAM,CAAC,oBAAoB,EAAE,uBAAuB,CAAC,GACnD,QAAQ,CAAU,KAAK,CAAC,CAAC;IAE3B,MAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAC/B,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,EAAE,KAAK,kBAAkB,CAAC,IAAI,CACxD,CAAC;IAEF,MAAM,cAAc,GAClB,CAAC,CAAC,SAAS;QACX,yBAAyB;QACzB,CAAC,WAAW;QACZ,CAAC,oBAAoB,CAAC;IAExB,MAAM,cAAc,GAAG,GAAG,EAAE;QAC1B,IAAI,cAAc,IAAI,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC;YACzC,uBAAuB,CAAC,IAAI,CAAC,CAAC;YAC9B,OAAO,CACL,EAAE,SAAS,EAAE,EACb;gBACE,SAAS,EAAE,GAAG,EAAE;oBACd,uBAAuB,CAAC,KAAK,CAAC,CAAC;gBACjC,CAAC;aACF,CACF,CAAC;QACJ,CAAC;IACH,CAAC,CAAC;IAEF,SAAS,CACP,GAAG,EAAE,CAAC,uBAAuB,CAAC,SAAS,EAAE,cAAc,CAAC,EACxD,CAAC,SAAS,CAAC,CACZ,CAAC;IACF,SAAS,CAAC,cAAc,EAAE,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC;IAEvD,SAAS,CAAC,GAAG,EAAE;QACb,IACE,CAAC,yBAAyB;YAC1B,CAAC,gBAAgB;YACjB,WAAW,CAAC,wBAAwB,EACpC,CAAC;YACD,OAAO;QACT,CAAC;QACD,IAAI,WAAW,CAAC,IAAI,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE,CAAC;YACpD,WAAW,CAAC,YAAY,EAAE,CAAC;QAC7B,CAAC;IACH,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;IAE/B,OAAO,EAAE,cAAc,EAAE,SAAS,EAAE,CAAC;AACvC,CAAC,CAAC;AACF,OAAO,EAAE,cAAc,EAAE,CAAC","sourcesContent":["\"use client\";\nimport { type Connector, useAccount, useConnect } from \"wagmi\";\nimport { useEffect, useState } from \"react\";\nimport { userHasWallet } from \"../lib/walletUtils.js\";\nimport { useUser } from \"../components/Web3UserProvider.js\";\nimport { LazyWagmiConnector } from \"../lib/wagmi/LazyWagmiConnector.js\";\nimport { isReady } from \"../lib/wagmi/utils.js\";\n\nconst registerConnectorEvents = (\n  connector: Connector | undefined,\n  onEvent: (...args: unknown[]) => void,\n) => {\n  if (connector) {\n    connector.emitter.on(\"connect\", onEvent);\n    connector.emitter.on(\"change\", onEvent);\n  }\n};\n\nconst useAutoConnect = (\n  { autoConnectEmbeddedWallet, autoCreateWallet } = {\n    autoConnectEmbeddedWallet: true,\n    autoCreateWallet: true,\n  },\n) => {\n  const { status, connectors, connect } = useConnect();\n  const userContext = useUser();\n  const { isConnected } = useAccount();\n  const [connectionInProgress, setConnectionInProgress] =\n    useState<boolean>(false);\n\n  const connector = connectors.find(\n    (connector) => connector.id === LazyWagmiConnector.type,\n  );\n\n  const readyToConnect =\n    !!connector &&\n    autoConnectEmbeddedWallet &&\n    !isConnected &&\n    !connectionInProgress;\n\n  const attemptConnect = () => {\n    if (readyToConnect && isReady(connector)) {\n      setConnectionInProgress(true);\n      connect(\n        { connector },\n        {\n          onSettled: () => {\n            setConnectionInProgress(false);\n          },\n        },\n      );\n    }\n  };\n\n  useEffect(\n    () => registerConnectorEvents(connector, attemptConnect),\n    [connector],\n  );\n  useEffect(attemptConnect, [connector, readyToConnect]);\n\n  useEffect(() => {\n    if (\n      !autoConnectEmbeddedWallet ||\n      !autoCreateWallet ||\n      userContext.walletCreationInProgress\n    ) {\n      return;\n    }\n    if (userContext.user && !userHasWallet(userContext)) {\n      userContext.createWallet();\n    }\n  }, [userContext.user, status]);\n\n  return { civicConnector: connector };\n};\nexport { useAutoConnect };\n"]}
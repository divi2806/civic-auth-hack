{"version":3,"file":"useTriggerSigninOnWalletConnection.test.js","sourceRoot":"","sources":["../../src/hooks/useTriggerSigninOnWalletConnection.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { beforeEach, describe, expect, it, vi } from \"vitest\";\nimport { useTriggerSigninOnWalletConnection } from \"./useTriggerSigninOnWalletConnection.js\";\nimport { singletonSolanaWalletAdapter } from \"../lib/solana/index.js\";\nimport { renderHook } from \"@testing-library/react-hooks\";\nimport { type UserContextType, useUser } from \"@civic/auth/react\";\nimport { AuthStatus } from \"@civic/auth\";\n\n// Mock dependencies\nvi.mock(\"@civic/auth/react\", () => ({\n  useUser: vi.fn(),\n}));\n\nvi.mock(\"../lib/solana/index.js\", () => ({\n  singletonSolanaWalletAdapter: {\n    registerSignInCallback: vi.fn(),\n  },\n}));\n\ndescribe(\"useTriggerSigninOnWalletConnection\", () => {\n  // Test doubles\n  let stubSignIn: () => Promise<void>;\n\n  beforeEach(() => {\n    // Create stub for signIn function\n    stubSignIn = vi.fn().mockResolvedValue(undefined);\n\n    // Setup the useUser mock to return our stubSignIn\n    vi.mocked(useUser).mockReturnValue({\n      signIn: stubSignIn,\n      signOut: vi.fn(),\n      authStatus: AuthStatus.UNAUTHENTICATED,\n      displayMode: \"iframe\",\n      // Other properties the hook might need\n      isLoading: false,\n      user: null,\n      idToken: null,\n      error: null,\n    });\n  });\n\n  it(\"should register the signIn callback with the wallet adapter\", () => {\n    // Render the hook\n    renderHook(() => useTriggerSigninOnWalletConnection());\n\n    // Verify that registerSignInCallback was called\n    expect(\n      singletonSolanaWalletAdapter.registerSignInCallback,\n    ).toHaveBeenCalledOnce();\n  });\n\n  it(\"should register a callback that calls internalUserContext.signIn\", async () => {\n    // Render the hook\n    renderHook(() => useTriggerSigninOnWalletConnection());\n\n    // Capture the callback that was registered\n    const registeredCallback = vi.mocked(\n      singletonSolanaWalletAdapter.registerSignInCallback,\n    ).mock.calls[0]?.[0];\n\n    // Call the callback\n    await registeredCallback?.();\n\n    // Verify that signIn was called\n    expect(stubSignIn).toHaveBeenCalledOnce();\n  });\n\n  it(\"should re-register the callback when signIn function changes\", () => {\n    // Initial render with the first stubSignIn\n    const { rerender } = renderHook(() => useTriggerSigninOnWalletConnection());\n\n    // Create a new stubSignIn\n    const newStubSignIn = vi.fn().mockResolvedValue(undefined);\n\n    // Update the useUser mock to return the new stubSignIn\n    vi.mocked(useUser).mockReturnValue({\n      signIn: newStubSignIn,\n      isLoading: false,\n      user: null,\n      idToken: null,\n      error: null,\n    } as unknown as UserContextType);\n\n    // Re-render the hook\n    rerender();\n\n    // Verify that registerSignInCallback was called twice\n    expect(\n      singletonSolanaWalletAdapter.registerSignInCallback,\n    ).toHaveBeenCalledTimes(2);\n\n    // Verify the second call used the new signIn function\n    const secondCallback = vi.mocked(\n      singletonSolanaWalletAdapter.registerSignInCallback,\n    ).mock.calls[1]?.[0];\n    secondCallback?.();\n    expect(newStubSignIn).toHaveBeenCalledOnce();\n  });\n\n  it(\"should not re-register the callback if signIn function remains the same\", () => {\n    // Initial render\n    const { rerender } = renderHook(() => useTriggerSigninOnWalletConnection());\n\n    // Re-render the hook without changing the signIn function\n    rerender();\n\n    // Verify that registerSignInCallback was called only once\n    expect(\n      singletonSolanaWalletAdapter.registerSignInCallback,\n    ).toHaveBeenCalledTimes(1);\n  });\n});\n"]}
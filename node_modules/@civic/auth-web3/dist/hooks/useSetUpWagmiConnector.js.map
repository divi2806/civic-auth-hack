{"version":3,"file":"useSetUpWagmiConnector.js","sourceRoot":"","sources":["../../src/hooks/useSetUpWagmiConnector.ts"],"names":[],"mappings":"AAAA,OAAO,EAAkB,aAAa,EAAE,aAAa,EAAE,MAAM,OAAO,CAAC;AACrE,OAAO,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAGlC,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAE1C,MAAM,eAAe,GAAG,CACtB,SAAoB,EACoC,EAAE,CAC1D,aAAa,IAAI,SAAS,CAAC;AAE7B,+GAA+G;AAC/G,uGAAuG;AACvG,MAAM,CAAC,MAAM,sBAAsB,GAAG,CACpC,UAA6B,EAC7B,oBAA6B,EACN,EAAE;IACzB,MAAM,eAAe,GAAG,aAAa,EAAE,CAAC;IACxC,MAAM,EAAE,UAAU,EAAE,GAAG,aAAa,EAAE,CAAC;IAEvC,MAAM,SAAS,GAAG,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAExD,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,yBAAyB,EAAE;YACjD,SAAS;YACT,UAAU;SACX,CAAC,CAAC;QACH,IAAI,SAAS,IAAI,UAAU,EAAE,QAAQ,EAAE,CAAC;YACtC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,wCAAwC,CAAC,CAAC;YAClE,SAAS,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;YAE3C,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;gBACxC,UAAU,CAAC;oBACT,SAAS;iBACV,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACL,CAAC;IACH,CAAC,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAE,oBAAoB,CAAC,CAAC,CAAC;IAE5D,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC","sourcesContent":["import { type Connector, useConnectors, useDisconnect } from \"wagmi\";\nimport { useEffect } from \"react\";\nimport type { Web3Client } from \"../lib/Web3Client.js\";\nimport type { CreateLazyConnectorProperties } from \"../lib/wagmi/LazyWagmiConnector.js\";\nimport { logger } from \"../lib/logger.js\";\n\nconst isLazyConnector = (\n  connector: Connector,\n): connector is Connector & CreateLazyConnectorProperties =>\n  \"setProvider\" in connector;\n\n// find the embedded wallet connector, and, if it exists, pass the ethereum provider from the web3Client to it.\n// This allows us to register a wallet connector outside of the react context using wagmi createConfig.\nexport const useSetUpWagmiConnector = (\n  web3Client: Web3Client | null,\n  createWalletFinished: boolean,\n): Connector | undefined => {\n  const wagmiConnectors = useConnectors();\n  const { disconnect } = useDisconnect();\n\n  const connector = wagmiConnectors.find(isLazyConnector);\n\n  useEffect(() => {\n    logger.web3.wagmi.debug(\"useSetUpWagmiConnector \", {\n      connector,\n      web3Client,\n    });\n    if (connector && web3Client?.provider) {\n      logger.web3.wagmi.debug(\"Setting ethereum provider on connector\");\n      connector.setProvider(web3Client.provider);\n\n      web3Client.provider.on(\"disconnect\", () => {\n        disconnect({\n          connector,\n        });\n      });\n    }\n  }, [connector, web3Client?.provider, createWalletFinished]);\n\n  return connector;\n};\n"]}
{"version":3,"file":"useCookie.test.js","sourceRoot":"","sources":["../../src/hooks/useCookie.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect, vi, beforeEach, afterEach } from \"vitest\";\nimport { renderHook } from \"@testing-library/react\";\nimport { useCookie } from \"./useCookie.js\";\nimport { act } from \"react\";\nimport * as utils from \"../lib/utils.js\";\n\nvi.mock(\"../lib/utils.js\", () => ({\n  getCookie: vi.fn(),\n}));\n\ndescribe(\"useCookie\", () => {\n  beforeEach(() => {\n    vi.useFakeTimers();\n    vi.mocked(utils.getCookie).mockReturnValue(\"initialValue\");\n  });\n\n  afterEach(() => {\n    vi.useRealTimers();\n  });\n\n  it(\"should return initial cookie value\", () => {\n    const { result } = renderHook(() => useCookie(\"testCookie\"));\n    expect(result.current).toBe(\"initialValue\");\n    expect(utils.getCookie).toHaveBeenCalledWith(\"testCookie\");\n  });\n\n  it(\"should update when cookie value changes\", () => {\n    const { result } = renderHook(() => useCookie(\"testCookie\"));\n    expect(result.current).toBe(\"initialValue\");\n\n    // Mock a cookie value change\n    vi.mocked(utils.getCookie).mockReturnValue(\"newValue\");\n\n    act(() => {\n      vi.advanceTimersByTime(1000);\n    });\n\n    expect(result.current).toBe(\"newValue\");\n  });\n\n  it(\"should not update state if cookie value has not changed\", () => {\n    const { result } = renderHook(() => useCookie(\"testCookie\"));\n    const initialValue = result.current;\n\n    // Advance timer without changing mock return value\n    act(() => {\n      vi.advanceTimersByTime(1000);\n    });\n\n    expect(result.current).toBe(initialValue);\n    expect(utils.getCookie).toHaveBeenCalledTimes(2);\n  });\n\n  it(\"should clean up interval on unmount\", () => {\n    const clearIntervalSpy = vi.spyOn(global, \"clearInterval\");\n    const { unmount } = renderHook(() => useCookie(\"testCookie\"));\n\n    unmount();\n\n    expect(clearIntervalSpy).toHaveBeenCalled();\n  });\n\n  it(\"should handle transition from value to null\", () => {\n    const { result } = renderHook(() => useCookie(\"testCookie\"));\n    expect(result.current).toBe(\"initialValue\");\n\n    // Mock cookie being removed\n    vi.mocked(utils.getCookie).mockReturnValue(null);\n\n    act(() => {\n      vi.advanceTimersByTime(1000);\n    });\n\n    expect(result.current).toBe(null);\n  });\n\n  it(\"should handle transition from null to value\", () => {\n    vi.mocked(utils.getCookie).mockReturnValue(null);\n    const { result } = renderHook(() => useCookie(\"testCookie\"));\n    expect(result.current).toBe(null);\n\n    // Mock cookie being set\n    vi.mocked(utils.getCookie).mockReturnValue(\"newValue\");\n\n    act(() => {\n      vi.advanceTimersByTime(1000);\n    });\n\n    expect(result.current).toBe(\"newValue\");\n  });\n\n  it(\"should maintain polling interval over time\", () => {\n    renderHook(() => useCookie(\"testCookie\"));\n    const getCookieCalls = () => vi.mocked(utils.getCookie).mock.calls.length;\n\n    const initialCalls = getCookieCalls();\n\n    // Advance time and check that getCookie is called consistently\n    act(() => {\n      vi.advanceTimersByTime(3000);\n    });\n\n    expect(getCookieCalls()).toBe(initialCalls + 3);\n  });\n});\n"]}
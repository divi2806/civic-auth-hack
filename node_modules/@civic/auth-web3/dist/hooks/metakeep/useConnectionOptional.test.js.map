{"version":3,"file":"useConnectionOptional.test.js","sourceRoot":"","sources":["../../../src/hooks/metakeep/useConnectionOptional.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,QAAQ,CAAC;AAC7D,OAAO,EAAE,kBAAkB,EAAE,MAAM,oCAAoC,CAAC;AAExE,oEAAoE;AACpE,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;IAC1B,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IAC9C,OAAO;QACL,GAAG,MAAM;QACT,UAAU,EAAE,GAAG,EAAE,CAAC,kBAAkB;KACrC,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,gCAAgC,EAAE,GAAG,EAAE;IAC9C,SAAS,CAAC,GAAG,EAAE;QACb,EAAE,CAAC,YAAY,EAAE,CAAC;IACpB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QACnC,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,4BAA4B,CAAC,CAAC;QACvD,MAAM,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;QAChF,EAAE,CAAC,MAAM,CAAC,8BAA8B,EAAE,GAAG,EAAE,CAAC,CAAC;YAC/C,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC;gBACpB,UAAU,EAAE,gBAAgB;aAC7B,CAAC;SACH,CAAC,CAAC,CAAC;QAEJ,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,4BAA4B,CAAC,CAAC;QACvD,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,oBAAoB;QACjE,MAAM,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAC9D,qCAAqC;QACrC,EAAE,CAAC,MAAM,CAAC,8BAA8B,EAAE,GAAG,EAAE;YAC7C,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QACH,MAAM,GAAG,GAAG,MAAM,MAAM,CAAC,4BAA4B,CAAC,CAAC;QACvD,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;QAC5C,MAAM,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;IAClE,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, it, afterEach, expect, vi } from \"vitest\";\nimport { connectionFallback } from \"./useConnectionOptionalFallback.js\";\n\n// Mock React's useContext to return the connectionFallback directly\nvi.mock(\"react\", async () => {\n  const actual = await vi.importActual(\"react\");\n  return {\n    ...actual,\n    useContext: () => connectionFallback,\n  };\n});\n\ndescribe(\"useConnectionInternal behavior\", () => {\n  afterEach(() => {\n    vi.resetModules();\n  });\n\n  it(\"should use fallback on server-side (no window)\", async () => {\n    vi.stubGlobal(\"window\", undefined);\n    const mod = await import(\"./useConnectionOptional.js\");\n    expect(mod.useConnectionInternal()).toEqual(connectionFallback);\n  });\n\n  it(\"should update useConnectionInternal when dynamic import succeeds\", async () => {\n    vi.doMock(\"@solana/wallet-adapter-react\", () => ({\n      useConnection: () => ({\n        connection: \"testConnection\",\n      }),\n    }));\n\n    const mod = await import(\"./useConnectionOptional.js\");\n    await new Promise((r) => setTimeout(r, 10)); // allow async tasks\n    expect(mod.useConnectionInternal().connection).toEqual(\"testConnection\");\n  });\n\n  it(\"should keep fallback when dynamic import fails\", async () => {\n    // Force the dynamic import to throw.\n    vi.doMock(\"@solana/wallet-adapter-react\", () => {\n      throw new Error(\"Module not found\");\n    });\n    const mod = await import(\"./useConnectionOptional.js\");\n    await new Promise((r) => setTimeout(r, 10));\n    expect(mod.useConnectionInternal()).toEqual(connectionFallback);\n  });\n});\n"]}
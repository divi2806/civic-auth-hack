{"version":3,"file":"useConnectionOptional.js","sourceRoot":"","sources":["../../../src/hooks/metakeep/useConnectionOptional.ts"],"names":[],"mappings":"AAMA,OAAO,EAAE,qBAAqB,IAAI,QAAQ,EAAE,MAAM,oCAAoC,CAAC;AAEvF,MAAM,CAAC,IAAI,qBAAqB,GAAsC,QAAQ,CAAC;AAE/E,KAAK,UAAU,gBAAgB;IAC7B,sDAAsD;IACtD,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;QAClC,0DAA0D;QAC1D,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,CAAC;QACH,yDAAyD;QACzD,MAAM,kBAAkB,GAAG,MAAM,MAAM,CAAC,8BAA8B,CAAC,CAAC;QACxE,OAAO,kBAAkB,CAAC,aAAa,CAAC;IAC1C,CAAC;IAAC,MAAM,CAAC;QACP,uEAAuE;IACzE,CAAC;AACH,CAAC;AAED,gBAAgB,EAAE,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,EAAE;IACxC,IAAI,aAAa,EAAE,CAAC;QAClB,qBAAqB,GAAG,aAAa,CAAC;IACxC,CAAC;AACH,CAAC,CAAC,CAAC","sourcesContent":["// --------------------------------------------------------------\n// Optional hook import from @solana/wallet-adapter-react\n// We try to load it using a dynamic import so that if it's missing the app\n// still works (integrators can provide their own connection).\n// --------------------------------------------------------------\nimport type { Connection } from \"@solana/web3.js\";\nimport { useConnectionInternal as fallback } from \"./useConnectionOptionalFallback.js\";\n\nexport let useConnectionInternal: () => { connection?: Connection } = fallback;\n\nasync function getUseConnection() {\n  // Default implementation returns undefined connection\n  if (typeof window === \"undefined\") {\n    // Server-side rendering path - always return the fallback\n    return null;\n  }\n\n  try {\n    // Dynamically import the hook from the optional package.\n    const walletAdapterReact = await import(\"@solana/wallet-adapter-react\");\n    return walletAdapterReact.useConnection;\n  } catch {\n    // The package is not available, so useConnectionInternal remains null.\n  }\n}\n\ngetUseConnection().then((useConnection) => {\n  if (useConnection) {\n    useConnectionInternal = useConnection;\n  }\n});\n"]}
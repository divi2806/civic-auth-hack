import { useConnectionInternal as fallback } from "./useConnectionOptionalFallback.js";
export let useConnectionInternal = fallback;
async function getUseConnection() {
    // Default implementation returns undefined connection
    if (typeof window === "undefined") {
        // Server-side rendering path - always return the fallback
        return null;
    }
    try {
        // Dynamically import the hook from the optional package.
        const walletAdapterReact = await import("@solana/wallet-adapter-react");
        return walletAdapterReact.useConnection;
    }
    catch {
        // The package is not available, so useConnectionInternal remains null.
    }
}
getUseConnection().then((useConnection) => {
    if (useConnection) {
        useConnectionInternal = useConnection;
    }
});
//# sourceMappingURL=useConnectionOptional.js.map
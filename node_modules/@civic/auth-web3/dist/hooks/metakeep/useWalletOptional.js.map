{"version":3,"file":"useWalletOptional.js","sourceRoot":"","sources":["../../../src/hooks/metakeep/useWalletOptional.ts"],"names":[],"mappings":"AAAA,iEAAiE;AACjE,yDAAyD;AACzD,kEAAkE;AAClE,0DAA0D;AAC1D,iEAAiE;AAGjE,OAAO,EAAE,iBAAiB,IAAI,QAAQ,EAAE,MAAM,gCAAgC,CAAC;AAE/E,MAAM,CAAC,IAAI,iBAAiB,GAA6B,QAAQ,CAAC;AAElE,KAAK,UAAU,YAAY;IACzB,sDAAsD;IACtD,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;QAClC,0DAA0D;QAC1D,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,CAAC;QACH,0DAA0D;QAC1D,MAAM,kBAAkB,GAAG,MAAM,MAAM,CAAC,8BAA8B,CAAC,CAAC;QACxE,OAAO,kBAAkB,CAAC,SAAS,CAAC;IACtC,CAAC;IAAC,MAAM,CAAC;QACP,mEAAmE;IACrE,CAAC;AACH,CAAC;AAED,YAAY,EAAE,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE;IAChC,IAAI,SAAS,EAAE,CAAC;QACd,iBAAiB,GAAG,SAAS,CAAC;IAChC,CAAC;AACH,CAAC,CAAC,CAAC","sourcesContent":["// --------------------------------------------------------------\n// Optional hook import from @solana/wallet-adapter-react\n// We try to load it using require so that if it's missing the app\n// still works (integrators can provide their own wallet).\n// --------------------------------------------------------------\n\nimport type { WalletContextState } from \"@solana/wallet-adapter-react\";\nimport { useWalletInternal as fallback } from \"./useWalletOptionalFallback.js\";\n\nexport let useWalletInternal: () => WalletContextState = fallback;\n\nasync function getUseWallet() {\n  // Default implementation returns undefined connection\n  if (typeof window === \"undefined\") {\n    // Server-side rendering path - always return the fallback\n    return null;\n  }\n\n  try {\n    // Dynamically require the hook from the optional package.\n    const walletAdapterReact = await import(\"@solana/wallet-adapter-react\");\n    return walletAdapterReact.useWallet;\n  } catch {\n    // The package is not available, so useWalletInternal remains null.\n  }\n}\n\ngetUseWallet().then((useWallet) => {\n  if (useWallet) {\n    useWalletInternal = useWallet;\n  }\n});\n"]}
import * as topLevelApi from "@civic/auth";
import * as serverApi from "@civic/auth/server";
import * as nextJsApi from "@civic/auth/nextjs";
import * as reactApi from "@civic/auth/react";
import * as nextjsMiddlewareApi from "@civic/auth/nextjs/middleware";
import * as web3Api from "./index.js";
import * as web3ServerApi from "./server/index.js";
import * as web3NextJsApi from "./nextjs/index.js";
import * as web3ReactApi from "./reactjs/index.js";
import * as web3NextJsMiddlewareApi from "./nextjs/middleware/index.js";
import { describe, expect, it, vi } from "vitest";
vi.mock("react", async (importOriginal) => {
    const actual = await importOriginal();
    return {
        ...actual,
        cache: (fn) => vi.fn(fn),
    };
});
describe("civic/auth-web3 API test", () => {
    describe("top level namespace api", () => {
        it("should expose all the @civic/auth functions", async () => {
            const exceptions = ["createLogger"];
            for (const key in topLevelApi) {
                if (!exceptions.includes(key)) {
                    expect(web3Api).toHaveProperty(key);
                }
            }
        });
    });
    describe("server namespace api", () => {
        it("should expose all the @civic/auth/server functions", async () => {
            for (const key in serverApi) {
                expect(web3ServerApi).toHaveProperty(key);
            }
        });
    });
    describe("nextjs namespace api", () => {
        it("should expose all the @civic/auth/nextjs functions", async () => {
            for (const key in nextJsApi) {
                expect(web3NextJsApi).toHaveProperty(key);
            }
        });
    });
    describe("react namespace api", () => {
        it("should expose all the @civic/auth/react functions", async () => {
            for (const key in reactApi) {
                expect(web3ReactApi).toHaveProperty(key);
            }
        });
    });
    describe("nextjs middleware namespace api", () => {
        it("should expose all the @civic/auth/nextjs/middleware functions", async () => {
            for (const key in nextjsMiddlewareApi) {
                expect(web3NextJsMiddlewareApi).toHaveProperty(key);
            }
        });
    });
});
//# sourceMappingURL=api.test.js.map
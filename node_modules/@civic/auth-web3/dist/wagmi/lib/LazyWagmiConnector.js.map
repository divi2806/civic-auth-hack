{"version":3,"file":"LazyWagmiConnector.js","sourceRoot":"","sources":["../../../src/wagmi/lib/LazyWagmiConnector.ts"],"names":[],"mappings":"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","sourcesContent":["import { injected } from \"@wagmi/connectors\";\nimport type { GenericEthereumProvider } from \"../../types.js\";\nimport { createConnector, type CreateConnectorFn } from \"wagmi\";\nimport type { EIP1193Provider } from \"viem\";\nimport { singletonEthereumProvider } from \"../../lib/ethereum/index.js\";\nimport { logger } from \"../../lib/logger.js\";\nimport { web3Events } from \"../../lib/Web3Client.js\";\nimport type { TypedEthereumProvider } from \"../../lib/ethereum/EIP1193ProviderImpl.js\";\nimport { WALLET_LOGO } from \"../../lib/constants.js\";\n\nexport type CreateLazyConnectorProperties = {\n  provider: TypedEthereumProvider | null;\n  setProvider: (newProvider: TypedEthereumProvider) => Promise<void>;\n  ready: () => boolean;\n};\nexport type CreateLazyConnectorFn = CreateConnectorFn<\n  GenericEthereumProvider,\n  CreateLazyConnectorProperties\n> & { provider: EIP1193Provider | null };\n\ntype ConnectorConfig = {\n  debug?: boolean;\n};\nconst defaultConfig: Required<ConnectorConfig> = {\n  debug: false,\n};\n\n/**\n * Wagmi connector implementation, that takes a lazy EIP1193 provider, that can be instantiated later, and turns it into a wagmi connector\n */\nexport function LazyWagmiConnector(\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  _config: ConnectorConfig,\n): CreateConnectorFn {\n  logger.web3.wagmi.debug(\"LazyWagmiConnector: Creating connector\");\n\n  // use a lazy ethereum 1193 provider that will be passed into the connector.\n  // this provider will be populated later once the user has logged in, via the setProvider method\n  // that is added to the standard wagmi connector interface.\n  const provider = singletonEthereumProvider;\n\n  // create a wagmi connector function that wraps the 1193 provider,\n  // providing metadata, and linking wagmi functions to eip1193 functions\n  const connectorFn = injected({\n    shimDisconnect: true,\n    target: {\n      id: \"civic\",\n      name: \"Civic Wallet\",\n      icon: WALLET_LOGO,\n      provider,\n    },\n  }) as unknown as CreateLazyConnectorFn;\n\n  // augment the connector function with custom functions to allow injection of the provider later\n  return createConnector(\n    (createConnectorConfig: Parameters<CreateConnectorFn>[0]) => {\n      const connector = connectorFn(createConnectorConfig);\n      connector.setProvider = async (newProvider: TypedEthereumProvider) => {\n        logger.web3.wagmi.debug(\"LazyWagmiConnector: Setting provider\");\n        provider.setImplementation(newProvider);\n\n        // notify anything listening that it should update its accounts\n        const accounts = await newProvider.request({ method: \"eth_accounts\" });\n        logger.web3.wagmi.debug(\n          \"LazyWagmiConnector: Setting provider accounts\",\n          accounts,\n        );\n        createConnectorConfig.emitter.emit(\"change\", {\n          accounts,\n        });\n\n        // Wagmi events may continue to query the provider after it has disconnected\n        // Since the user has just logged out, but the provider may still be active\n        // this fools wagmi into thinking that the wallet is still active.\n        // Therefore, removing the underlying provider from the proxy simulates,\n        // in a not particularly elegant way, the wallet being closed.\n        // There may be a better way to do this.\n        provider.on(\"disconnect\", () => {\n          logger.web3.wagmi.debug(\n            \"LazyWagmiConnector: Provider disconnected - clearing the implementation\",\n          );\n          provider.clearImplementation();\n        });\n      };\n\n      // Listen for web3Client readiness\n      web3Events.on(\"web3ClientReady\", (web3Client) => {\n        if (\n          web3Client?.ethereum.provider &&\n          typeof connector.setProvider === \"function\"\n        ) {\n          connector.setProvider(web3Client.ethereum.provider);\n          web3Client.ethereum.provider.on(\"disconnect\", () => {\n            connector.disconnect();\n          });\n        }\n      });\n\n      connector.ready = () => provider.ready();\n\n      return connector;\n    },\n  );\n}\n\nLazyWagmiConnector.type = \"civic\" as const;\n\nexport const embeddedWallet = (config: ConnectorConfig = {}) =>\n  LazyWagmiConnector({\n    ...defaultConfig,\n    ...config,\n  });\n"]}
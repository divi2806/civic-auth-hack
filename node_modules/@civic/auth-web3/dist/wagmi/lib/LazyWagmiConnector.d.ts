import type { GenericEthereumProvider } from "../../types.js";
import { type CreateConnectorFn } from "wagmi";
import type { EIP1193Provider } from "viem";
import type { TypedEthereumProvider } from "../../lib/ethereum/EIP1193ProviderImpl.js";
export type CreateLazyConnectorProperties = {
    provider: TypedEthereumProvider | null;
    setProvider: (newProvider: TypedEthereumProvider) => Promise<void>;
    ready: () => boolean;
};
export type CreateLazyConnectorFn = CreateConnectorFn<GenericEthereumProvider, CreateLazyConnectorProperties> & {
    provider: EIP1193Provider | null;
};
type ConnectorConfig = {
    debug?: boolean;
};
/**
 * Wagmi connector implementation, that takes a lazy EIP1193 provider, that can be instantiated later, and turns it into a wagmi connector
 */
export declare function LazyWagmiConnector(_config: ConnectorConfig): CreateConnectorFn;
export declare namespace LazyWagmiConnector {
    var type: "civic";
}
export declare const embeddedWallet: (config?: ConnectorConfig) => CreateConnectorFn;
export {};
//# sourceMappingURL=LazyWagmiConnector.d.ts.map
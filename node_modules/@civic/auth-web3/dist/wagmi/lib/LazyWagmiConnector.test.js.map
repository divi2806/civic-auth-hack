{"version":3,"file":"LazyWagmiConnector.test.js","sourceRoot":"","sources":["../../../src/wagmi/lib/LazyWagmiConnector.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect, vi, beforeEach } from \"vitest\";\nimport { injected } from \"@wagmi/connectors\";\nimport { type CreateConnectorFn } from \"wagmi\";\nimport {\n  LazyWagmiConnector,\n  embeddedWallet,\n  type CreateLazyConnectorFn,\n} from \"./LazyWagmiConnector.js\";\nimport type { TypedEthereumProvider } from \"../../lib/ethereum/EIP1193ProviderImpl.js\";\nimport { type Web3Client, web3Events } from \"../../lib/Web3Client.js\";\nimport {\n  createTypedProvider,\n  singletonEthereumProvider,\n} from \"../../lib/ethereum/index.js\";\n\nconst dummyTypedProvider = {\n  on: vi.fn(),\n  removeListener: vi.fn(),\n  request: vi.fn(),\n  disconnect: vi.fn(),\n} as TypedEthereumProvider;\n\ntype CreateConnectorConfig = Parameters<CreateConnectorFn>[0];\n\nvi.mock(\"@wagmi/connectors\");\n\ndescribe(\"LazyWagmiConnector\", () => {\n  let connectorFn: CreateLazyConnectorFn;\n\n  beforeEach(() => {\n    vi.mocked(injected).mockReturnValue((() => ({\n      id: \"civic\",\n      name: \"Civic Wallet\",\n      disconnect: vi.fn(),\n    })) as unknown as ReturnType<typeof injected>);\n\n    connectorFn = LazyWagmiConnector({ debug: true }) as CreateLazyConnectorFn;\n\n    singletonEthereumProvider.clearImplementation();\n  });\n\n  it(\"should create a Wagmi connector\", () => {\n    expect(injected).toHaveBeenCalledWith(\n      expect.objectContaining({\n        target: expect.objectContaining({\n          id: \"civic\",\n          name: \"Civic Wallet\",\n        }),\n      }),\n    );\n  });\n\n  it(\"should listen to web3 events indicating when the provider is ready\", () => {\n    const lazyProvider = singletonEthereumProvider;\n\n    const connector = connectorFn({\n      emitter: { emit: vi.fn() },\n    } as unknown as CreateConnectorConfig);\n\n    expect(lazyProvider.ready()).toBe(false);\n\n    web3Events.emit(\"web3ClientReady\", {\n      ethereum: {\n        provider: dummyTypedProvider,\n      },\n    } as unknown as Web3Client);\n\n    expect(lazyProvider.ready()).toBe(true);\n    expect(connector.ready()).toBe(true);\n  });\n\n  it(\"should disconnect the connector when the provider disconnects\", () => {\n    const providerImpl = createTypedProvider({\n      request: vi.fn().mockResolvedValue(undefined),\n    });\n\n    // create a connector with a disconnect function\n    const connector = connectorFn({\n      emitter: { emit: vi.fn() },\n    } as unknown as CreateConnectorConfig);\n\n    // register the provider in the connector\n    web3Events.emit(\"web3ClientReady\", {\n      ethereum: {\n        provider: providerImpl,\n      },\n    } as unknown as Web3Client);\n\n    // disconnect the provider\n    providerImpl.disconnect();\n\n    // ensure the connector disconnect function was called\n    expect(connector.disconnect).toHaveBeenCalled();\n  });\n\n  it(\"should allow setting the provider later\", async () => {\n    const connector = connectorFn({\n      emitter: { emit: vi.fn() },\n    } as unknown as CreateConnectorConfig);\n\n    expect(connector.ready()).toBe(false);\n\n    await connector.setProvider(dummyTypedProvider);\n\n    expect(connector.ready()).toBe(true);\n  });\n\n  // this is needed so that wagmi does not think the wallet is still active\n  it(\"should clear the provider when it disconnects\", async () => {\n    const connector = connectorFn({\n      emitter: { emit: vi.fn() },\n    } as unknown as CreateConnectorConfig);\n\n    const provider = createTypedProvider({\n      request: vi.fn().mockResolvedValue(undefined),\n    });\n\n    await connector.setProvider(provider);\n\n    // disconnect the provider\n    provider.disconnect();\n\n    expect(connector.ready()).toBe(false);\n  });\n\n  describe(\"embeddedWallet()\", () => {\n    it(\"should create a connector with default config\", () => {\n      const embedded = embeddedWallet();\n      expect(embedded).toBeInstanceOf(Function);\n    });\n\n    it(\"should allow overriding config options\", () => {\n      const embedded = embeddedWallet({ debug: true });\n      expect(embedded).toBeInstanceOf(Function);\n    });\n  });\n});\n"]}
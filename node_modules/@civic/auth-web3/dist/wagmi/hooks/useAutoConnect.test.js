import { describe, it, expect, vi, beforeEach } from "vitest";
import { renderHook } from "@testing-library/react";
import { useAutoConnect } from "./useAutoConnect.js";
import { useConnect, useAccount, } from "wagmi";
import { useUser } from "../../components/Web3UserProvider.js";
import { userHasWallet } from "../../lib/walletUtils.js";
import { LazyWagmiConnector } from "../lib/LazyWagmiConnector.js";
import { isReady } from "../lib/utils.js";
// Mock dependencies
vi.mock("wagmi", () => ({
    useConnect: vi.fn(),
    useAccount: vi.fn(),
}));
vi.mock("../../components/Web3UserProvider", () => ({
    useUser: vi.fn(),
}));
vi.mock("../../lib/walletUtils", async (importOriginal) => ({
    ...(await importOriginal()),
    userHasWallet: vi.fn(),
}));
vi.mock("../lib/utils", () => ({
    isReady: vi.fn(),
}));
describe("useAutoConnect", () => {
    const stubConnector = {
        id: LazyWagmiConnector.type,
        emitter: {
            on: vi.fn(),
        },
    };
    const stubConnect = vi.fn();
    beforeEach(() => {
        vi.clearAllMocks();
        // Default stub implementations
        vi.mocked(useConnect).mockReturnValue({
            status: "idle",
            connectors: [stubConnector],
            connect: stubConnect,
        });
        vi.mocked(useAccount).mockReturnValue({
            isConnected: false,
        });
        vi.mocked(useUser).mockReturnValue({
            user: null,
            walletCreationInProgress: false,
            createWallet: vi.fn(),
        });
        vi.mocked(userHasWallet).mockReturnValue(false);
        vi.mocked(isReady).mockReturnValue(true);
    });
    it("should attempt to connect when conditions are met", () => {
        renderHook(() => useAutoConnect());
        expect(stubConnect).toHaveBeenCalledWith({ connector: stubConnector }, { onSettled: expect.any(Function) });
    });
    it("should not connect when autoConnectEmbeddedWallet is false", () => {
        renderHook(() => useAutoConnect({
            autoConnectEmbeddedWallet: false,
            autoCreateWallet: true,
        }));
        expect(stubConnect).not.toHaveBeenCalled();
    });
    it("should not connect when already connected", () => {
        vi.mocked(useAccount).mockReturnValue({
            isConnected: true,
        });
        renderHook(() => useAutoConnect());
        expect(stubConnect).not.toHaveBeenCalled();
    });
    it("should register connector events", () => {
        renderHook(() => useAutoConnect());
        expect(stubConnector.emitter.on).toHaveBeenCalledWith("connect", expect.any(Function));
        expect(stubConnector.emitter.on).toHaveBeenCalledWith("change", expect.any(Function));
    });
    it("should create wallet when conditions are met", () => {
        const stubCreateWallet = vi.fn();
        vi.mocked(useUser).mockReturnValue({
            user: { id: "123" },
            walletCreationInProgress: false,
            createWallet: stubCreateWallet,
        });
        renderHook(() => useAutoConnect());
        expect(stubCreateWallet).toHaveBeenCalled();
    });
    it("should not create wallet when autoCreateWallet is false", () => {
        const stubCreateWallet = vi.fn();
        vi.mocked(useUser).mockReturnValue({
            user: { id: "123" },
            walletCreationInProgress: false,
            createWallet: stubCreateWallet,
        });
        renderHook(() => useAutoConnect({
            autoConnectEmbeddedWallet: true,
            autoCreateWallet: false,
        }));
        expect(stubCreateWallet).not.toHaveBeenCalled();
    });
    it("should not create wallet when wallet creation is in progress", () => {
        const stubCreateWallet = vi.fn();
        vi.mocked(useUser).mockReturnValue({
            user: { id: "123" },
            walletCreationInProgress: true,
            createWallet: stubCreateWallet,
        });
        renderHook(() => useAutoConnect());
        expect(stubCreateWallet).not.toHaveBeenCalled();
    });
    it("should not create wallet when user already has one", () => {
        const stubCreateWallet = vi.fn();
        vi.mocked(useUser).mockReturnValue({
            user: { id: "123" },
            walletCreationInProgress: false,
            createWallet: stubCreateWallet,
        });
        vi.mocked(userHasWallet).mockReturnValue(true);
        renderHook(() => useAutoConnect());
        expect(stubCreateWallet).not.toHaveBeenCalled();
    });
    it("should return the civic connector", () => {
        const { result } = renderHook(() => useAutoConnect());
        expect(result.current.civicConnector).toBe(stubConnector);
    });
});
//# sourceMappingURL=useAutoConnect.test.js.map
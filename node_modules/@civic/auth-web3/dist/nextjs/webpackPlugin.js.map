{"version":3,"file":"webpackPlugin.js","sourceRoot":"","sources":["../../src/nextjs/webpackPlugin.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAgB1C,MAAM,CAAC,MAAM,8BAA8B,GAAG,CAC5C,aAAyB,EAAE,EAC3B,MAEC,EACD,EAAE;IACF,IAAI,MAAM,CAAC,yBAAyB,EAAE,CAAC;QACrC,uGAAuG;QACvG,iBAAiB;QACjB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,qCAAqC,CAAC,CAAC;QAChE,OAAO,UAAU,CAAC;IACpB,CAAC;SAAM,CAAC;QACN,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CACtB,wHAAwH,CACzH,CAAC;IACJ,CAAC;IAED,OAAO;QACL,GAAG,UAAU;QACb,OAAO,CAAC,MAAyB,EAAE,OAA6B;YAC9D,+DAA+D;YAC/D,IAAI,OAAO,UAAU,CAAC,OAAO,KAAK,UAAU,EAAE,CAAC;gBAC7C,MAAM,GAAG,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YAC/C,CAAC;YAED,0EAA0E;YAC1E,gFAAgF;YAChF,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,wBAAwB,CAAC;gBAC5C,gCAAgC,CAAC;YACnC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,4BAA4B,CAAC;gBAChD,oCAAoC,CAAC;YAEvC,OAAO,MAAM,CAAC;QAChB,CAAC;KACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import type { NextConfig } from \"next\";\nimport { logger } from \"../lib/logger.js\";\n\n/**\n * This is a nextjs webpack plugin which, if enableSolanaWalletAdapter is *not set*, will\n * replace the useWallet and useConnection hooks with fallback hooks that do not attempt to\n * import the solana wallet adapter.\n *\n * It is required in order to resolve an issue with webpack attempting to statically import\n * dynamic imports during build.\n */\n\ntype NextWebpackConfig = Parameters<NonNullable<NextConfig[\"webpack\"]>>[0];\nexport type WebpackConfigContext = Parameters<\n  NonNullable<NextConfig[\"webpack\"]>\n>[1];\n\nexport const withOptionalSolanaDependencies = (\n  nextConfig: NextConfig = {},\n  config: {\n    enableSolanaWalletAdapter?: boolean;\n  },\n) => {\n  if (config.enableSolanaWalletAdapter) {\n    // If the user has enabled Solana Wallet Adapter, we don't need to modify the webpack config to use the\n    // fallback hooks\n    logger.web3.config.debug(\"Enabling Solana Wallet Adapter mode\");\n    return nextConfig;\n  } else {\n    logger.web3.config.debug(\n      \"Disabling Solana Wallet Adapter mode - use fallback hooks in webpack-built projects to avoid dependency import errors.\",\n    );\n  }\n\n  return {\n    ...nextConfig,\n    webpack(config: NextWebpackConfig, options: WebpackConfigContext) {\n      // First call the original webpack config function if it exists\n      if (typeof nextConfig.webpack === \"function\") {\n        config = nextConfig.webpack(config, options);\n      }\n\n      // switch the useWallet and useConnection imports to the fallback versions\n      // to avoid webpack attempting (and failing) to import the solana wallet-adapter\n      config.resolve.alias[\"./useWalletOptional.js\"] =\n        \"./useWalletOptionalFallback.js\";\n      config.resolve.alias[\"./useConnectionOptional.js\"] =\n        \"./useConnectionOptionalFallback.js\";\n\n      return config;\n    },\n  };\n};\n"]}
import { printVersion } from "../shared/index.js";
printVersion();
import { createCivicAuthPlugin as internalCivicAuthPlugin, NextjsCookieStorage, resolveAuthConfig, } from "@civic/auth/nextjs";
export { NextjsCookieStorage, handler, defaultAuthConfig, } from "@civic/auth/nextjs";
export { CivicAuthProvider } from "./CivicAuthProvider.js";
import { isLoggedIn } from "@civic/auth/nextjs";
import { createWallets as createWalletsInternal, getWallets as getWalletsInternal, getUser as getUserShared, } from "../server/functions.js";
export { getTokens, isLoggedIn, resolveAuthConfig } from "@civic/auth/nextjs";
import { withOptionalSolanaDependencies } from "./webpackPlugin.js";
const getAuthConfig = () => {
    const authConfig = resolveAuthConfig();
    return {
        ...authConfig,
        redirectUrl: authConfig.callbackUrl,
    };
};
export const getUser = async (config = {}) => {
    const hasValidSession = await isLoggedIn();
    if (!hasValidSession)
        return null;
    return getUserShared(config, new NextjsCookieStorage(), getAuthConfig());
};
export const createWallets = async (config = {}) => {
    const hasValidSession = await isLoggedIn();
    if (!hasValidSession)
        return null;
    return createWalletsInternal(config, new NextjsCookieStorage(), getAuthConfig());
};
export const getWallets = async (config = {}) => {
    const user = await getUser(config);
    if (!user)
        return null;
    return getWalletsInternal(user, config);
};
export const createCivicAuthPlugin = (authConfig) => {
    const authPlugin = internalCivicAuthPlugin({
        cookies: {
            tokens: {
                id_token: {
                    httpOnly: false,
                },
            },
        },
        ...authConfig,
    });
    return (nextConfig = {}) => {
        // Apply the civic auth plugin
        const withAuth = authPlugin(nextConfig);
        // Apply the Solana dependency plugin
        return withOptionalSolanaDependencies(withAuth, authConfig);
    };
};
//# sourceMappingURL=index.js.map
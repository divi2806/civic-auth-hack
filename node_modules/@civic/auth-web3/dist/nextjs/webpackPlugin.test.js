import { describe, it, expect, vi, beforeEach } from "vitest";
import { withOptionalSolanaDependencies, } from "./webpackPlugin.js";
import { logger } from "../lib/logger.js";
describe("webpackPlugin", () => {
    beforeEach(() => {
        vi.clearAllMocks();
    });
    describe("when enableSolanaWalletAdapter is true", () => {
        it("should return the original nextConfig and log enabling message", () => {
            const nextConfig = { someKey: "someValue" };
            const result = withOptionalSolanaDependencies(nextConfig, {
                enableSolanaWalletAdapter: true,
            });
            expect(result).toEqual(nextConfig);
        });
    });
    describe("when enableSolanaWalletAdapter is false (or omitted)", () => {
        it("should modify webpack config alias when no original webpack function exists", () => {
            const nextConfig = {};
            const resultConfig = withOptionalSolanaDependencies(nextConfig, {
                enableSolanaWalletAdapter: false,
            });
            // Create a dummy webpack config with a resolve.alias object.
            const webpackConfig = {
                resolve: { alias: {} },
            };
            const webpackContext = {};
            const modifiedConfig = resultConfig.webpack?.(webpackConfig, webpackContext);
            expect(modifiedConfig.resolve.alias["./useWalletOptional.js"]).toBe("./useWalletOptionalFallback.js");
            expect(modifiedConfig.resolve.alias["./useConnectionOptional.js"]).toBe("./useConnectionOptionalFallback.js");
        });
        it("should call the original webpack function if provided and then modify aliases", () => {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const originalWebpack = vi.fn((config) => {
                return { ...config, originalCalled: true };
            });
            const nextConfig = { webpack: originalWebpack };
            const resultConfig = withOptionalSolanaDependencies(nextConfig, {
                enableSolanaWalletAdapter: false,
            });
            const webpackConfig = {
                resolve: { alias: {} },
            };
            const webpackContext = {};
            const modifiedConfig = resultConfig.webpack?.(webpackConfig, webpackContext);
            expect(originalWebpack).toHaveBeenCalled();
            expect(modifiedConfig.originalCalled).toBe(true);
            expect(modifiedConfig.resolve.alias["./useWalletOptional.js"]).toBe("./useWalletOptionalFallback.js");
            expect(modifiedConfig.resolve.alias["./useConnectionOptional.js"]).toBe("./useConnectionOptionalFallback.js");
        });
        it("should log disabling message", () => {
            const nextConfig = {};
            const debugSpy = vi.spyOn(logger.web3.config, "debug");
            withOptionalSolanaDependencies(nextConfig, {
                enableSolanaWalletAdapter: false,
            });
            expect(debugSpy).toHaveBeenCalledWith("Disabling Solana Wallet Adapter mode - use fallback hooks in webpack-built projects to avoid dependency import errors.");
        });
    });
});
//# sourceMappingURL=webpackPlugin.test.js.map
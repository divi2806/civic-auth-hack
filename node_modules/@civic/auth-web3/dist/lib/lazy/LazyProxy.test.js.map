{"version":3,"file":"LazyProxy.test.js","sourceRoot":"","sources":["../../../src/lib/lazy/LazyProxy.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect, vi } from \"vitest\";\nimport { createLazyProxy, type EventRegistrar } from \"./LazyProxy.js\";\n\n// dummy event types that the proxy should support\ntype TestEventMap = {\n  dataReceived: (data: string) => void;\n  errorOccurred: (error: Error) => void;\n};\n\n// A stub implementation of an EIP1193 provider. Emits events of type TestEventMap\nclass StubProvider implements EventRegistrar<TestEventMap> {\n  on =\n    vi.fn<\n      (\n        event: keyof TestEventMap,\n        listener: TestEventMap[keyof TestEventMap],\n      ) => void\n    >();\n  removeListener =\n    vi.fn<\n      (\n        event: keyof TestEventMap,\n        listener: TestEventMap[keyof TestEventMap],\n      ) => void\n    >();\n  request =\n    vi.fn<(args: { method: string; params?: unknown[] }) => Promise<string>>();\n}\n\ndescribe(\"LazyProxy\", () => {\n  it(\"should create a lazy proxy with the correct methods\", () => {\n    const proxy = createLazyProxy<StubProvider, TestEventMap>([\"request\"]);\n\n    expect(typeof proxy.setImplementation).toBe(\"function\");\n    expect(typeof proxy.ready).toBe(\"function\");\n    expect(typeof proxy.on).toBe(\"function\");\n    expect(typeof proxy.removeListener).toBe(\"function\");\n  });\n\n  it(\"should return false for ready() before implementation is set\", () => {\n    const proxy = createLazyProxy<StubProvider, TestEventMap>([\"request\"]);\n    expect(proxy.ready()).toBe(false);\n  });\n\n  it(\"should return true for ready() after implementation is set\", () => {\n    const proxy = createLazyProxy<StubProvider, TestEventMap>([\"request\"]);\n    const mockImpl = new StubProvider();\n\n    proxy.setImplementation(mockImpl);\n    expect(proxy.ready()).toBe(true);\n  });\n\n  it(\"should forward calls to setImplementation\", () => {\n    const proxy = createLazyProxy<StubProvider, TestEventMap>([\"request\"]);\n    const mockImpl = new StubProvider();\n\n    proxy.setImplementation(mockImpl);\n    expect(proxy.ready()).toBe(true);\n    expect(proxy.request).toBe(mockImpl.request);\n  });\n\n  it(\"should throw an error when accessing unknown methods before implementation is set\", () => {\n    const proxy = createLazyProxy<StubProvider, TestEventMap>([\"request\"]);\n    expect(() => proxy.request({ method: \"testMethod\" })).toThrowError(\n      'Lazy proxy: Method \"request\" cannot be called because the implementation is not set yet.',\n    );\n  });\n\n  it(\"should store event listeners before the implementation is set\", () => {\n    const proxy = createLazyProxy<StubProvider, TestEventMap>([\"request\"]);\n    const listener = vi.fn<(data: string) => void>();\n\n    proxy.on(\"dataReceived\", listener);\n    expect(proxy.ready()).toBe(false); // Still lazy, not set yet\n  });\n\n  it(\"should forward stored listeners to the real implementation once set\", () => {\n    const proxy = createLazyProxy<StubProvider, TestEventMap>([\"request\"]);\n    const mockImpl = new StubProvider();\n    const listener = vi.fn<(data: string) => void>();\n\n    proxy.on(\"dataReceived\", listener);\n    proxy.setImplementation(mockImpl);\n\n    expect(mockImpl.on).toHaveBeenCalledWith(\"dataReceived\", listener);\n  });\n\n  it(\"should store and remove listeners correctly before implementation is set\", () => {\n    const proxy = createLazyProxy<StubProvider, TestEventMap>([\"request\"]);\n    const listener = vi.fn<(data: string) => void>();\n\n    proxy.on(\"dataReceived\", listener);\n    proxy.removeListener(\"dataReceived\", listener);\n    expect(() => proxy.setImplementation(new StubProvider())).not.toThrow();\n  });\n\n  it(\"should forward removeListener calls to the real implementation once set\", () => {\n    const proxy = createLazyProxy<StubProvider, TestEventMap>([\"request\"]);\n    const mockImpl = new StubProvider();\n    const listener = vi.fn<(data: string) => void>();\n\n    proxy.setImplementation(mockImpl);\n    proxy.on(\"dataReceived\", listener);\n    proxy.removeListener(\"dataReceived\", listener);\n\n    expect(mockImpl.removeListener).toHaveBeenCalledWith(\n      \"dataReceived\",\n      listener,\n    );\n  });\n\n  it(\"should return undefined for unknown properties before implementation is set\", () => {\n    const proxy = createLazyProxy<StubProvider, TestEventMap>([\n      \"request\",\n    ]) as unknown as {\n      someUndefinedMethod: () => void;\n    };\n    expect(proxy.someUndefinedMethod).toBeUndefined();\n  });\n\n  it(\"should allow unsetting the implementation\", () => {\n    const proxy = createLazyProxy<StubProvider, TestEventMap>([\"request\"]);\n    const mockImpl = new StubProvider();\n\n    proxy.setImplementation(mockImpl);\n    expect(proxy.ready()).toBe(true);\n\n    proxy.clearImplementation();\n    expect(proxy.ready()).toBe(false);\n  });\n});\n"]}
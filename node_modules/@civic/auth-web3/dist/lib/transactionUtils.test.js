import { describe, it, expect } from "vitest";
import { normaliseEthRequestParams } from "./transactionUtils.js";
describe("normaliseEthRequestParams", () => {
    it("converts valid hex string fields to bigint, checking actual value", () => {
        // Hex values that should parse to:
        // gas: 440000, gasPrice: 1000000000, maxFeePerGas: 2000000000,
        // maxPriorityFeePerGas: 250000000
        const raw = {
            gas: "0x6b6c0", // 440000
            gasPrice: "0x3b9aca00", // 1000000000
            maxFeePerGas: "0x77359400", // 2000000000
            maxPriorityFeePerGas: "0xee6b280", // 250000000
            nonce: "1",
            value: "1000000000000000000",
            chainId: "5",
            from: "0x1234567890abcdef1234567890abcdef12345678",
            to: "0xabcd567890abcdef1234567890abcdef123456ef",
        };
        const result = normaliseEthRequestParams(raw);
        expect(result.gas).toBe(440000n);
        expect(result.gasPrice).toBe(1000000000n);
        expect(result.maxFeePerGas).toBe(2000000000n);
        expect(result.maxPriorityFeePerGas).toBe(250000000n);
        expect(result.nonce).toBe(1n);
        expect(result.value).toBe(1000000000000000000n);
        expect(result.chainId).toBe(5n);
        expect(result.from).toBe(raw.from);
        expect(result.to).toBe(raw.to);
    });
    it("skips conversion if field is already a bigint", () => {
        const raw = {
            gas: 21000n,
            from: "0x1234567890abcdef1234567890abcdef12345678",
        };
        const result = normaliseEthRequestParams(raw);
        expect(result.gas).toBe(21000n);
    });
    it("throws if not an object", () => {
        expect(() => normaliseEthRequestParams(null)).toThrow();
        expect(() => normaliseEthRequestParams("not an object")).toThrow();
    });
    it("throws if invalid from address", () => {
        const raw = {
            from: "0xNotGood",
            to: "0x1234567890abcdef1234567890abcdef12345678",
        };
        expect(() => normaliseEthRequestParams(raw)).toThrow("Invalid from address");
    });
    it("throws if invalid to address", () => {
        const raw = {
            to: "0xAlsoBad",
            from: "0x1234567890abcdef1234567890abcdef12345678",
        };
        expect(() => normaliseEthRequestParams(raw)).toThrow("Invalid to address");
    });
    it('allows null or undefined for "to"', () => {
        const raw = {
            from: "0x1234567890abcdef1234567890abcdef12345678",
            to: null,
        };
        expect(() => normaliseEthRequestParams(raw)).not.toThrow();
    });
});
//# sourceMappingURL=transactionUtils.test.js.map
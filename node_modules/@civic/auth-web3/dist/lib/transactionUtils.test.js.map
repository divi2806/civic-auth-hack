{"version":3,"file":"transactionUtils.test.js","sourceRoot":"","sources":["../../src/lib/transactionUtils.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAC9C,OAAO,EAAE,yBAAyB,EAAE,MAAM,uBAAuB,CAAC;AAElE,QAAQ,CAAC,2BAA2B,EAAE,GAAG,EAAE;IACzC,EAAE,CAAC,mEAAmE,EAAE,GAAG,EAAE;QAC3E,mCAAmC;QACnC,+DAA+D;QAC/D,kCAAkC;QAClC,MAAM,GAAG,GAAG;YACV,GAAG,EAAE,SAAS,EAAE,SAAS;YACzB,QAAQ,EAAE,YAAY,EAAE,aAAa;YACrC,YAAY,EAAE,YAAY,EAAE,aAAa;YACzC,oBAAoB,EAAE,WAAW,EAAE,YAAY;YAC/C,KAAK,EAAE,GAAG;YACV,KAAK,EAAE,qBAAqB;YAC5B,OAAO,EAAE,GAAG;YACZ,IAAI,EAAE,4CAA4C;YAClD,EAAE,EAAE,4CAA4C;SACjD,CAAC;QACF,MAAM,MAAM,GAAG,yBAAyB,CAAC,GAAG,CAA4B,CAAC;QAEzE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACjC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC1C,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC9C,MAAM,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACrD,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAC9B,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAChD,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAChC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACnC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;QACvD,MAAM,GAAG,GAAG;YACV,GAAG,EAAE,MAAM;YACX,IAAI,EAAE,4CAA4C;SACnD,CAAC;QACF,MAAM,MAAM,GAAG,yBAAyB,CAAC,GAAG,CAA4B,CAAC;QACzE,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACjC,MAAM,CAAC,GAAG,EAAE,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QACxD,MAAM,CAAC,GAAG,EAAE,CAAC,yBAAyB,CAAC,eAAe,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;IACrE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gCAAgC,EAAE,GAAG,EAAE;QACxC,MAAM,GAAG,GAAG;YACV,IAAI,EAAE,WAAW;YACjB,EAAE,EAAE,4CAA4C;SACjD,CAAC;QACF,MAAM,CAAC,GAAG,EAAE,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAClD,sBAAsB,CACvB,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;QACtC,MAAM,GAAG,GAAG;YACV,EAAE,EAAE,WAAW;YACf,IAAI,EAAE,4CAA4C;SACnD,CAAC;QACF,MAAM,CAAC,GAAG,EAAE,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;IAC7E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,GAAG,EAAE;QAC3C,MAAM,GAAG,GAAG;YACV,IAAI,EAAE,4CAA4C;YAClD,EAAE,EAAE,IAAI;SACT,CAAC;QACF,MAAM,CAAC,GAAG,EAAE,CAAC,yBAAyB,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;IAC7D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, it, expect } from \"vitest\";\nimport { normaliseEthRequestParams } from \"./transactionUtils.js\";\n\ndescribe(\"normaliseEthRequestParams\", () => {\n  it(\"converts valid hex string fields to bigint, checking actual value\", () => {\n    // Hex values that should parse to:\n    // gas: 440000, gasPrice: 1000000000, maxFeePerGas: 2000000000,\n    // maxPriorityFeePerGas: 250000000\n    const raw = {\n      gas: \"0x6b6c0\", // 440000\n      gasPrice: \"0x3b9aca00\", // 1000000000\n      maxFeePerGas: \"0x77359400\", // 2000000000\n      maxPriorityFeePerGas: \"0xee6b280\", // 250000000\n      nonce: \"1\",\n      value: \"1000000000000000000\",\n      chainId: \"5\",\n      from: \"0x1234567890abcdef1234567890abcdef12345678\",\n      to: \"0xabcd567890abcdef1234567890abcdef123456ef\",\n    };\n    const result = normaliseEthRequestParams(raw) as Record<string, unknown>;\n\n    expect(result.gas).toBe(440000n);\n    expect(result.gasPrice).toBe(1000000000n);\n    expect(result.maxFeePerGas).toBe(2000000000n);\n    expect(result.maxPriorityFeePerGas).toBe(250000000n);\n    expect(result.nonce).toBe(1n);\n    expect(result.value).toBe(1000000000000000000n);\n    expect(result.chainId).toBe(5n);\n    expect(result.from).toBe(raw.from);\n    expect(result.to).toBe(raw.to);\n  });\n\n  it(\"skips conversion if field is already a bigint\", () => {\n    const raw = {\n      gas: 21000n,\n      from: \"0x1234567890abcdef1234567890abcdef12345678\",\n    };\n    const result = normaliseEthRequestParams(raw) as Record<string, unknown>;\n    expect(result.gas).toBe(21000n);\n  });\n\n  it(\"throws if not an object\", () => {\n    expect(() => normaliseEthRequestParams(null)).toThrow();\n    expect(() => normaliseEthRequestParams(\"not an object\")).toThrow();\n  });\n\n  it(\"throws if invalid from address\", () => {\n    const raw = {\n      from: \"0xNotGood\",\n      to: \"0x1234567890abcdef1234567890abcdef12345678\",\n    };\n    expect(() => normaliseEthRequestParams(raw)).toThrow(\n      \"Invalid from address\",\n    );\n  });\n\n  it(\"throws if invalid to address\", () => {\n    const raw = {\n      to: \"0xAlsoBad\",\n      from: \"0x1234567890abcdef1234567890abcdef12345678\",\n    };\n    expect(() => normaliseEthRequestParams(raw)).toThrow(\"Invalid to address\");\n  });\n\n  it('allows null or undefined for \"to\"', () => {\n    const raw = {\n      from: \"0x1234567890abcdef1234567890abcdef12345678\",\n      to: null,\n    };\n    expect(() => normaliseEthRequestParams(raw)).not.toThrow();\n  });\n});\n"]}
{"version":3,"file":"middleware.test.js","sourceRoot":"","sources":["../../../src/lib/analytics/middleware.test.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Tests for analytics middleware\n */\n\nimport { describe, it, expect, vi, beforeEach, afterEach } from \"vitest\";\nimport { analyticsEmitter } from \"./index.js\";\nimport { withAnalytics } from \"./middleware.js\";\n\ndescribe(\"analytics middleware\", () => {\n  beforeEach(() => {\n    vi.spyOn(analyticsEmitter, \"emitEvent\").mockResolvedValue();\n  });\n\n  afterEach(() => {\n    vi.restoreAllMocks();\n  });\n\n  it(\"should call the wrapped function and emit success event\", async () => {\n    // Create a mock function\n    const mockFn = vi.fn().mockResolvedValue(\"result\");\n\n    // Wrap it with analytics\n    const wrappedFn = withAnalytics(mockFn, \"signMessage\", \"test\");\n\n    // Call the wrapped function\n    const result = await wrappedFn(\"arg1\", \"arg2\");\n\n    // Verify the original function was called with the correct arguments\n    expect(mockFn).toHaveBeenCalledWith(\"arg1\", \"arg2\");\n\n    // Verify the result is correct\n    expect(result).toBe(\"result\");\n\n    // Verify the analytics event was emitted\n    expect(analyticsEmitter.emitEvent).toHaveBeenCalledWith({\n      eventType: \"signMessage\",\n      parameters: [\"arg1\", \"arg2\"],\n      target: \"test\",\n    });\n  });\n\n  it(\"should handle errors and emit error events\", async () => {\n    // Create a mock function that throws an error\n    const error = new Error(\"Test error\");\n    const mockFn = vi.fn().mockRejectedValue(error);\n\n    // Wrap it with analytics\n    const wrappedFn = withAnalytics(mockFn, \"signTransaction\", \"test\");\n\n    // Call the wrapped function and expect it to throw\n    await expect(wrappedFn(\"arg1\")).rejects.toThrow(\"Test error\");\n\n    // Verify the analytics error event was emitted\n    expect(analyticsEmitter.emitEvent).toHaveBeenCalledWith({\n      eventType: \"signTransactionError\",\n      error: \"Test error\",\n      parameters: [\"arg1\"],\n      target: \"test\",\n    });\n  });\n\n  it(\"should work without a target\", async () => {\n    // Create a mock function\n    const mockFn = vi.fn().mockResolvedValue(\"result\");\n\n    // Wrap it with analytics without a target\n    const wrappedFn = withAnalytics(mockFn, \"signTypedData\");\n\n    // Call the wrapped function\n    await wrappedFn(\"arg1\");\n\n    // Verify the analytics event was emitted without a target\n    expect(analyticsEmitter.emitEvent).toHaveBeenCalledWith({\n      eventType: \"signTypedData\",\n      parameters: [\"arg1\"],\n    });\n  });\n});\n"]}
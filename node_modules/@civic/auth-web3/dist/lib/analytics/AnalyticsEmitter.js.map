{"version":3,"file":"AnalyticsEmitter.js","sourceRoot":"","sources":["../../../src/lib/analytics/AnalyticsEmitter.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,yBAAyB,CAAC;AAOlD;;GAEG;AAEH,OAAO,EAAE,GAAG,EAAE,MAAM,aAAa,CAAC;AAElC,sCAAsC;AACtC,MAAM,WAAW,GAAG,CAClB,SAAY,EACC,EAAE,CAAC,GAAG,SAAS,OAAO,CAAC;AAEtC,MAAM,cAAc,GAAG,CAAC,KAAc,EAAU,EAAE;IAChD,IAAI,KAAK,YAAY,KAAK,EAAE,CAAC;QAC3B,OAAO,KAAK,CAAC,OAAO,CAAC;IACvB,CAAC;IACD,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;AAC/B,CAAC,CAAC;AAEF,MAAM,YAAY,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AACnE,kCAAkC;AAClC,sDAAsD;AACtD,MAAM,+BAA+B,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;IACnD,OAAO,OAAO,GAAG,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,iBAAiB,CAAC;AAC1E,CAAC,CAAC,CAAC,GAAG,CAAC,+BAA+B,IAAI,gCAAgC,CAAC,CAAC;AAE5E,SAAS,cAAc,CAAI,IAAY,EAAE,KAAQ;IAC/C,IAAI,OAAO,KAAK,KAAK,QAAQ;QAAE,OAAO,KAAK,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC;IAC7D,OAAO,KAAK,CAAC;AACf,CAAC;AAED,+CAA+C;AAC/C,MAAM,uBAAuB,GAAG,KAAK,EACnC,KAAyB,EACzB,MAAuB,EACJ,EAAE;IACrB,gFAAgF;IAChF,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,IAAI,+BAA+B,CAAC;IACpE,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,YAAY,EAAE,CAAC;IAE/C,MAAM,OAAO,GAAG;QACd,MAAM,EAAE,sBAAsB,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE;QACnF,MAAM,EAAE,KAAK,CAAC,MAAM,IAAI,KAAK;QAC7B,UAAU,EAAE,OAAO;QACnB,GAAG,KAAK;KACT,CAAC;IAEF,uBAAuB;IACvB,MAAM,OAAO,GAA2B;QACtC,cAAc,EAAE,kBAAkB;QAClC,iBAAiB,EAAE,MAAM;QACzB,cAAc,EAAE,gBAAgB;KACjC,CAAC;IAEF,6BAA6B;IAC7B,IAAI,MAAM,CAAC,GAAG,EAAE,CAAC;QACf,OAAO,CAAC,eAAe,CAAC,GAAG,UAAU,MAAM,CAAC,GAAG,EAAE,CAAC;IACpD,CAAC;IAED,kFAAkF;IAClF,mDAAmD;IACnD,OAAO,KAAK,CAAC,QAAQ,EAAE;QACrB,MAAM,EAAE,MAAM;QACd,OAAO;QACP,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,cAAc,CAAC;KAC9C,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,uIAAuI;AACvI,MAAM,mBAAmB,GACvB,CACE,EAAiC,EACjC,OAAyB,EACzB,SAAiC,EACA,EAAE,CACrC,KAAK,EAAE,GAAG,IAAU,EAAc,EAAE;IAClC,IAAI,KAAK,GAAmC,SAAS,CAAC;IACtD,IAAI,CAAC;QACH,MAAM,MAAM,GAAG,MAAM,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;QACjC,KAAK,GAAG;YACN,SAAS;YACT,UAAU,EAAE,IAAI;SACjB,CAAC;QAEF,OAAO,MAAM,CAAC;IAChB,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC;QAEnE,KAAK,GAAG;YACN,SAAS,EAAE,WAAW,CAAC,SAAS,CAAC;YACjC,KAAK,EAAE,cAAc,CAAC,KAAK,CAAC;YAC5B,UAAU,EAAE,IAAI;SACjB,CAAC;QACF,MAAM,KAAK,CAAC;IACd,CAAC;YAAS,CAAC;QACT,MAAM,OAAO,CAAC,SAAS,CAAC,KAA2B,CAAC,CAAC;IACvD,CAAC;AACH,CAAC,CAAC;AAEJ,MAAM,OAAO,gBAAgB;IAGP;IAFZ,WAAW,CAA4B;IAE/C,YAAoB,MAAuB;QAAvB,WAAM,GAAN,MAAM,CAAiB;IAAG,CAAC;IAE/C,4DAA4D;IAC5D,cAAc,CAAC,QAAkC;QAC/C,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;IAC9B,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,KAAyB;QACvC,IAAI,CAAC;YACH,mCAAmC;YACnC,IAAI,GAAuB,CAAC;YAC5B,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;gBACrB,GAAG,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;gBACzB,oDAAoD;gBACpD,IAAI,CAAC,GAAG,EAAE,CAAC;oBACT,2CAA2C;oBAC3C,OAAO,CAAC,GAAG,CAAC,uDAAuD,CAAC,CAAC;oBACrE,OAAO;gBACT,CAAC;YACH,CAAC;YAED,0DAA0D;YAC1D,MAAM,aAAa,GAAG;gBACpB,GAAG,IAAI,CAAC,MAAM;gBACd,GAAG,CAAC,GAAG,IAAI,EAAE,GAAG,EAAE,CAAC;aACpB,CAAC;YAEF,MAAM,uBAAuB,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;QACtD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACf,OAAO,CAAC,KAAK,CAAC,4CAA4C,EAAE,KAAK,CAAC,CAAC;QACrE,CAAC;IACH,CAAC;IAED,MAAM,CACJ,EAAiC,EACjC,SAAiC;QAEjC,OAAO,mBAAmB,CAAC,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;IAClD,CAAC;CACF","sourcesContent":["import { VERSION } from \"../../shared/version.js\";\nimport type {\n  CivicAuthWeb3Event,\n  CivicAuthWeb3EventType,\n  AnalyticsConfig,\n} from \"./types.js\";\n\n/**\n * Frontend analytics event emitter for the civic auth wallet SDK\n */\n\nimport { env } from \"../utils.js\";\n\n// Helper functions for error handling\nconst toErrorType = <T extends CivicAuthWeb3EventType>(\n  eventType: T,\n): `${T}Error` => `${eventType}Error`;\n\nconst errorToMessage = (error: unknown): string => {\n  if (error instanceof Error) {\n    return error.message;\n  }\n  return JSON.stringify(error);\n};\n\nconst randomFlowId = () => Math.random().toString(36).substring(7);\n// Default endpoints for analytics\n// Use the same base URL that's used for wallet access\nconst DEFAULT_METAKEEP_PROXY_ENDPOINT = ((baseUrl) => {\n  return baseUrl + (baseUrl.endsWith(\"/\") ? \"\" : \"/\") + \"analytics/proxy\";\n})(env.NEXT_PUBLIC_WALLET_API_BASE_URL || \"https://api.civic.com/metakeep\");\n\nfunction bigIntReplacer<T>(_key: string, value: T): T | string {\n  if (typeof value === \"bigint\") return value.toString() + \"n\";\n  return value;\n}\n\n// POST to the analytics SNS via metakeep-proxy\nconst emitToAnalyticsEndpoint = async (\n  event: CivicAuthWeb3Event,\n  config: AnalyticsConfig,\n): Promise<Response> => {\n  // Use proxy endpoint to bypass firewall restrictions (Civic origin requirement)\n  const endpoint = config.endpoint ?? DEFAULT_METAKEEP_PROXY_ENDPOINT;\n  const flowId = config.flowId ?? randomFlowId();\n\n  const payload = {\n    source: `civic-auth-metakeep${process.env.NODE_ENV !== \"production\" ? \"-dev\" : \"\"}`,\n    target: event.target ?? \"N/A\",\n    sdkVersion: VERSION,\n    ...event,\n  };\n\n  // Build headers object\n  const headers: Record<string, string> = {\n    \"content-type\": \"application/json\",\n    \"x-civic-flow-id\": flowId,\n    \"x-set-origin\": \"auth.civic.com\",\n  };\n\n  // Add JWT token if available\n  if (config.jwt) {\n    headers[\"Authorization\"] = `Bearer ${config.jwt}`;\n  }\n\n  // Add a custom header that the proxy service can use to set Origin:auth.civic.com\n  // when forwarding to the actual analytics endpoint\n  return fetch(endpoint, {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(payload, bigIntReplacer),\n  });\n};\n\n// Given a function, return the same function wrapped with an analytics event that is emitted after the function is called successfully\nconst wrapFnWithAnalytics =\n  <Args extends unknown[], R>(\n    fn: (...args: Args) => Promise<R>,\n    emitter: AnalyticsEmitter,\n    eventType: CivicAuthWeb3EventType,\n  ): ((...args: Args) => Promise<R>) =>\n  async (...args: Args): Promise<R> => {\n    let event: CivicAuthWeb3Event | undefined = undefined;\n    try {\n      const result = await fn(...args);\n      event = {\n        eventType,\n        parameters: args,\n      };\n\n      return result;\n    } catch (error) {\n      console.error(\"Failed to emit event to analytics endpoint\", error);\n\n      event = {\n        eventType: toErrorType(eventType),\n        error: errorToMessage(error),\n        parameters: args,\n      };\n      throw error;\n    } finally {\n      await emitter.emitEvent(event as CivicAuthWeb3Event);\n    }\n  };\n\nexport class AnalyticsEmitter {\n  private jwtProvider?: () => string | undefined;\n\n  constructor(private config: AnalyticsConfig) {}\n\n  // Set a function that will provide the JWT token at runtime\n  setJwtProvider(provider: () => string | undefined): void {\n    this.jwtProvider = provider;\n  }\n\n  async emitEvent(event: CivicAuthWeb3Event): Promise<void> {\n    try {\n      // Get the JWT if a provider is set\n      let jwt: string | undefined;\n      if (this.jwtProvider) {\n        jwt = this.jwtProvider();\n        // Skip sending analytics if JWT isn't available yet\n        if (!jwt) {\n          // Using console.log for test compatibility\n          console.log(\"Analytics: No JWT available, skipping analytics event\");\n          return;\n        }\n      }\n\n      // Get the latest config with the current JWT if available\n      const currentConfig = {\n        ...this.config,\n        ...(jwt && { jwt }),\n      };\n\n      await emitToAnalyticsEndpoint(event, currentConfig);\n    } catch (error) {\n      console.error(\"Failed to emit event to analytics endpoint\", error);\n    }\n  }\n\n  wrapFn<Args extends unknown[], R>(\n    fn: (...args: Args) => Promise<R>,\n    eventType: CivicAuthWeb3EventType,\n  ): (...args: Args) => Promise<R> {\n    return wrapFnWithAnalytics(fn, this, eventType);\n  }\n}\n"]}
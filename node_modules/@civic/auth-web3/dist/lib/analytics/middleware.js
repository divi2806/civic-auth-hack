/**
 * Analytics middleware to provide a unified approach to analytics across different chains
 */
import { analyticsEmitter } from "./index.js";
/**
 * Wraps a function with analytics tracking, handling both success and error cases
 * This can be used by any chain implementation
 *
 * @param fn The function to wrap
 * @param eventType The type of event to track
 * @param target Optional target identifier (e.g., "ethereum", "solana")
 * @param analyticsParams Optional parameters to include in the analytics event
 * @returns The wrapped function
 */
export function withAnalytics(fn, eventType, target, analyticsParams) {
    return async (...args) => {
        // Use custom analytics params if provided, otherwise use function args
        const parameters = analyticsParams || args;
        try {
            // Execute the original function
            const result = await fn(...args);
            // Emit success event
            await analyticsEmitter.emitEvent({
                eventType,
                parameters,
                ...(target && { target }),
            });
            return result;
        }
        catch (error) {
            // Emit error event
            await analyticsEmitter.emitEvent({
                eventType: `${eventType}Error`,
                error: error instanceof Error ? error.message : String(error),
                parameters,
                ...(target && { target }),
            });
            // Re-throw the original error
            throw error;
        }
    };
}
//# sourceMappingURL=middleware.js.map
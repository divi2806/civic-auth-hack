{"version":3,"file":"AnalyticsEmitter.test.js","sourceRoot":"","sources":["../../../src/lib/analytics/AnalyticsEmitter.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { expect, vi, describe, it, beforeEach, afterEach } from \"vitest\";\nimport type { MockedFunction } from \"vitest\";\nimport { AnalyticsEmitter } from \"./AnalyticsEmitter.js\";\nimport { VERSION } from \"../../shared/version.js\";\n\ndescribe(\"AnalyticsEmitter\", () => {\n  let analyticsEmitter: AnalyticsEmitter;\n  let globalFetch: typeof fetch;\n\n  beforeEach(() => {\n    // Store the original fetch\n    globalFetch = global.fetch;\n\n    // Mock fetch for testing\n    global.fetch = vi.fn().mockResolvedValue({\n      ok: true,\n      status: 200,\n    });\n\n    // Create a new analytics emitter for each test\n    analyticsEmitter = new AnalyticsEmitter({\n      endpoint: \"https://test.example.com/analytics\",\n      flowId: \"test-flow-id\",\n    });\n  });\n\n  afterEach(() => {\n    // Restore the original fetch\n    global.fetch = globalFetch;\n    vi.resetAllMocks();\n  });\n\n  describe(\"emitEvent\", () => {\n    it(\"should call fetch with the correct parameters\", async () => {\n      const event = {\n        eventType: \"signMessage\" as const,\n        parameters: [\"test message\"],\n      };\n\n      await analyticsEmitter.emitEvent(event);\n\n      expect(global.fetch).toHaveBeenCalledTimes(1);\n      expect(global.fetch).toHaveBeenCalledWith(\n        \"https://test.example.com/analytics\",\n        expect.objectContaining({\n          method: \"POST\",\n          headers: expect.objectContaining({\n            \"content-type\": \"application/json\",\n            \"x-civic-flow-id\": \"test-flow-id\",\n            \"x-set-origin\": \"auth.civic.com\",\n          }),\n        }),\n      );\n\n      // Check the body\n      const mockCalls = (global.fetch as MockedFunction<typeof fetch>).mock\n        .calls;\n      expect(mockCalls.length).toBeGreaterThan(0);\n      const callArgs = mockCalls[0] ? mockCalls[0][1] : undefined;\n      expect(callArgs).toBeDefined();\n      const parsedBody = callArgs ? JSON.parse(callArgs.body as string) : {};\n\n      expect(parsedBody).toEqual(\n        expect.objectContaining({\n          source: expect.stringMatching(/^civic-auth-metakeep(-dev)?$/),\n          target: \"N/A\", // Default value\n          eventType: \"signMessage\",\n          parameters: [\"test message\"],\n          sdkVersion: VERSION,\n        }),\n      );\n    });\n\n    it(\"should handle errors gracefully\", async () => {\n      // Mock console.error\n      const consoleErrorMock = vi\n        .spyOn(console, \"error\")\n        .mockImplementation(() => {});\n\n      // Make fetch throw an error\n      global.fetch = vi.fn().mockRejectedValue(new Error(\"Network error\"));\n\n      const event = {\n        eventType: \"signMessage\" as const,\n        parameters: [\"test message\"],\n      };\n\n      // This should not throw\n      await analyticsEmitter.emitEvent(event);\n\n      expect(consoleErrorMock).toHaveBeenCalledWith(\n        \"Failed to emit event to analytics endpoint\",\n        expect.any(Error),\n      );\n\n      consoleErrorMock.mockRestore();\n    });\n\n    it(\"should use default values when not provided\", async () => {\n      // Create a new emitter without config\n      const defaultEmitter = new AnalyticsEmitter({});\n\n      const event = {\n        eventType: \"signMessage\" as const,\n        parameters: [\"test message\"],\n      };\n\n      await defaultEmitter.emitEvent(event);\n\n      expect(global.fetch).toHaveBeenCalledTimes(1);\n\n      // Check the endpoint\n      const mockCalls = (global.fetch as MockedFunction<typeof fetch>).mock\n        .calls;\n      expect(mockCalls.length).toBeGreaterThan(0);\n      const callUrl = mockCalls[0] ? mockCalls[0][0] : undefined;\n      expect(callUrl).toContain(\"/analytics/proxy\");\n\n      // Check the flowId was generated\n      const callArgs = mockCalls[0] ? mockCalls[0][1] : undefined;\n      expect(callArgs).toBeDefined();\n      const headers = callArgs?.headers as Record<string, string>;\n      expect(headers[\"x-civic-flow-id\"]).toBeTruthy();\n    });\n\n    it(\"should handle bigint values in parameters\", async () => {\n      const event = {\n        eventType: \"signTransaction\" as const,\n        parameters: [{ value: BigInt(123456789) }],\n      };\n\n      await analyticsEmitter.emitEvent(event);\n\n      // Check the body\n      const mockCalls = (global.fetch as MockedFunction<typeof fetch>).mock\n        .calls;\n      expect(mockCalls.length).toBeGreaterThan(0);\n      const callArgs = mockCalls[0] ? mockCalls[0][1] : undefined;\n      expect(callArgs).toBeDefined();\n      const parsedBody = callArgs ? JSON.parse(callArgs.body as string) : {};\n\n      expect(parsedBody.parameters[0].value).toBe(\"123456789n\");\n    });\n\n    it(\"should include JWT token in headers when provided in config\", async () => {\n      // Create a new emitter with JWT token\n      const jwtEmitter = new AnalyticsEmitter({\n        endpoint: \"https://test.example.com/analytics\",\n        flowId: \"test-flow-id\",\n        jwt: \"test-jwt-token\",\n      });\n\n      const event = {\n        eventType: \"signMessage\" as const,\n        parameters: [\"test message\"],\n      };\n\n      await jwtEmitter.emitEvent(event);\n\n      expect(global.fetch).toHaveBeenCalledTimes(1);\n      expect(global.fetch).toHaveBeenCalledWith(\n        \"https://test.example.com/analytics\",\n        expect.objectContaining({\n          method: \"POST\",\n          headers: expect.objectContaining({\n            \"content-type\": \"application/json\",\n            \"x-civic-flow-id\": \"test-flow-id\",\n            \"x-set-origin\": \"auth.civic.com\",\n            Authorization: \"Bearer test-jwt-token\",\n          }),\n        }),\n      );\n    });\n\n    it(\"should include JWT token from the jwtProvider when set\", async () => {\n      // Create a new emitter without JWT token\n      const jwtEmitter = new AnalyticsEmitter({\n        endpoint: \"https://test.example.com/analytics\",\n        flowId: \"test-flow-id\",\n      });\n\n      // Set a JWT provider function\n      jwtEmitter.setJwtProvider(() => \"provider-jwt-token\");\n\n      const event = {\n        eventType: \"signMessage\" as const,\n        parameters: [\"test message\"],\n      };\n\n      await jwtEmitter.emitEvent(event);\n\n      expect(global.fetch).toHaveBeenCalledTimes(1);\n      expect(global.fetch).toHaveBeenCalledWith(\n        \"https://test.example.com/analytics\",\n        expect.objectContaining({\n          method: \"POST\",\n          headers: expect.objectContaining({\n            \"content-type\": \"application/json\",\n            \"x-civic-flow-id\": \"test-flow-id\",\n            \"x-set-origin\": \"auth.civic.com\",\n            Authorization: \"Bearer provider-jwt-token\",\n          }),\n        }),\n      );\n    });\n\n    it(\"should skip sending event when JWT provider returns undefined\", async () => {\n      // Create a new emitter without JWT token\n      const jwtEmitter = new AnalyticsEmitter({\n        endpoint: \"https://test.example.com/analytics\",\n        flowId: \"test-flow-id\",\n      });\n\n      // Mock console.log to check for the message\n      const consoleLogMock = vi\n        .spyOn(console, \"log\")\n        .mockImplementation(() => {});\n\n      // Set a JWT provider function that returns undefined\n      jwtEmitter.setJwtProvider(() => undefined);\n\n      const event = {\n        eventType: \"signMessage\" as const,\n        parameters: [\"test message\"],\n      };\n\n      await jwtEmitter.emitEvent(event);\n\n      // Verify that fetch was NOT called\n      expect(global.fetch).not.toHaveBeenCalled();\n\n      // Verify that console.log was called with the expected message\n      expect(consoleLogMock).toHaveBeenCalledWith(\n        \"Analytics: No JWT available, skipping analytics event\",\n      );\n\n      consoleLogMock.mockRestore();\n    });\n  });\n\n  describe(\"wrapFn\", () => {\n    it(\"should call the wrapped function and emit success event\", async () => {\n      const mockFn = vi.fn().mockResolvedValue(\"success result\");\n      const wrappedFn = analyticsEmitter.wrapFn(mockFn, \"signMessage\");\n\n      const result = await wrappedFn(\"test arg\");\n\n      // Function should be called with the original arguments\n      expect(mockFn).toHaveBeenCalledWith(\"test arg\");\n\n      // Result should be passed through\n      expect(result).toBe(\"success result\");\n\n      // Event should be emitted\n      expect(global.fetch).toHaveBeenCalledTimes(1);\n\n      // Check the body for success event\n      const mockCalls = (global.fetch as MockedFunction<typeof fetch>).mock\n        .calls;\n      expect(mockCalls.length).toBeGreaterThan(0);\n      const callArgs = mockCalls[0] ? mockCalls[0][1] : undefined;\n      expect(callArgs).toBeDefined();\n      const parsedBody = callArgs ? JSON.parse(callArgs.body as string) : {};\n\n      expect(parsedBody).toEqual(\n        expect.objectContaining({\n          eventType: \"signMessage\",\n          parameters: [\"test arg\"],\n          sdkVersion: VERSION,\n        }),\n      );\n      expect(parsedBody.error).toBeUndefined();\n    });\n\n    it(\"should emit error event when the wrapped function throws\", async () => {\n      const testError = new Error(\"test error\");\n      const mockFn = vi.fn().mockRejectedValue(testError);\n\n      // Mock console.error\n      const consoleErrorMock = vi\n        .spyOn(console, \"error\")\n        .mockImplementation(() => {});\n\n      const wrappedFn = analyticsEmitter.wrapFn(mockFn, \"signTransaction\");\n\n      // The wrapped function should throw the original error\n      await expect(wrappedFn(\"test arg\")).rejects.toThrow(testError);\n\n      // Event should be emitted\n      expect(global.fetch).toHaveBeenCalledTimes(1);\n\n      // Check the body for error event\n      const mockCalls = (global.fetch as MockedFunction<typeof fetch>).mock\n        .calls;\n      expect(mockCalls.length).toBeGreaterThan(0);\n      const callArgs = mockCalls[0] ? mockCalls[0][1] : undefined;\n      expect(callArgs).toBeDefined();\n      const parsedBody = callArgs ? JSON.parse(callArgs.body as string) : {};\n\n      expect(parsedBody).toEqual(\n        expect.objectContaining({\n          eventType: \"signTransactionError\",\n          parameters: [\"test arg\"],\n          error: \"test error\",\n        }),\n      );\n\n      consoleErrorMock.mockRestore();\n    });\n\n    it(\"should handle non-Error objects when formatting error messages\", async () => {\n      // Use a plain object or string as the error value\n      const nonErrorObject = { reason: \"operation failed\", code: 123 };\n      const mockFn = vi.fn().mockRejectedValue(nonErrorObject);\n\n      // Mock console.error\n      const consoleErrorMock = vi\n        .spyOn(console, \"error\")\n        .mockImplementation(() => {});\n\n      const wrappedFn = analyticsEmitter.wrapFn(mockFn, \"signMessage\");\n\n      // The wrapped function should throw the original error\n      await expect(wrappedFn(\"test arg\")).rejects.toEqual(nonErrorObject);\n\n      // Event should be emitted\n      expect(global.fetch).toHaveBeenCalledTimes(1);\n\n      // Check the body for error event\n      const mockCalls = (global.fetch as MockedFunction<typeof fetch>).mock\n        .calls;\n      expect(mockCalls.length).toBeGreaterThan(0);\n      const callArgs = mockCalls[0] ? mockCalls[0][1] : undefined;\n      expect(callArgs).toBeDefined();\n      const parsedBody = callArgs ? JSON.parse(callArgs.body as string) : {};\n\n      // The error should be JSON stringified\n      expect(parsedBody).toEqual(\n        expect.objectContaining({\n          eventType: \"signMessageError\",\n          parameters: [\"test arg\"],\n          error: JSON.stringify(nonErrorObject),\n        }),\n      );\n\n      consoleErrorMock.mockRestore();\n    });\n  });\n});\n"]}
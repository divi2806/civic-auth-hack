/**
 * Tests for analytics middleware
 */
import { describe, it, expect, vi, beforeEach, afterEach } from "vitest";
import { analyticsEmitter } from "./index.js";
import { withAnalytics } from "./middleware.js";
describe("analytics middleware", () => {
    beforeEach(() => {
        vi.spyOn(analyticsEmitter, "emitEvent").mockResolvedValue();
    });
    afterEach(() => {
        vi.restoreAllMocks();
    });
    it("should call the wrapped function and emit success event", async () => {
        // Create a mock function
        const mockFn = vi.fn().mockResolvedValue("result");
        // Wrap it with analytics
        const wrappedFn = withAnalytics(mockFn, "signMessage", "test");
        // Call the wrapped function
        const result = await wrappedFn("arg1", "arg2");
        // Verify the original function was called with the correct arguments
        expect(mockFn).toHaveBeenCalledWith("arg1", "arg2");
        // Verify the result is correct
        expect(result).toBe("result");
        // Verify the analytics event was emitted
        expect(analyticsEmitter.emitEvent).toHaveBeenCalledWith({
            eventType: "signMessage",
            parameters: ["arg1", "arg2"],
            target: "test",
        });
    });
    it("should handle errors and emit error events", async () => {
        // Create a mock function that throws an error
        const error = new Error("Test error");
        const mockFn = vi.fn().mockRejectedValue(error);
        // Wrap it with analytics
        const wrappedFn = withAnalytics(mockFn, "signTransaction", "test");
        // Call the wrapped function and expect it to throw
        await expect(wrappedFn("arg1")).rejects.toThrow("Test error");
        // Verify the analytics error event was emitted
        expect(analyticsEmitter.emitEvent).toHaveBeenCalledWith({
            eventType: "signTransactionError",
            error: "Test error",
            parameters: ["arg1"],
            target: "test",
        });
    });
    it("should work without a target", async () => {
        // Create a mock function
        const mockFn = vi.fn().mockResolvedValue("result");
        // Wrap it with analytics without a target
        const wrappedFn = withAnalytics(mockFn, "signTypedData");
        // Call the wrapped function
        await wrappedFn("arg1");
        // Verify the analytics event was emitted without a target
        expect(analyticsEmitter.emitEvent).toHaveBeenCalledWith({
            eventType: "signTypedData",
            parameters: ["arg1"],
        });
    });
});
//# sourceMappingURL=middleware.test.js.map
{"version":3,"file":"transactionUtils.js","sourceRoot":"","sources":["../../src/lib/transactionUtils.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AACH,MAAM,CAAC,MAAM,yBAAyB,GAAG,CAAC,GAAY,EAAW,EAAE;IACjE,IAAI,OAAO,GAAG,KAAK,QAAQ,IAAI,CAAC,GAAG,EAAE,CAAC;QACpC,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;IACzC,CAAC;IAED,0DAA0D;IAC1D,MAAM,YAAY,GAAG;QACnB,KAAK;QACL,UAAU;QACV,cAAc;QACd,sBAAsB;QACtB,OAAO;QACP,OAAO;QACP,SAAS;KACV,CAAC;IAEF,cAAc;IACd,MAAM,SAAS,GAAG,EAAE,GAAI,GAA+B,EAAE,CAAC;IAE1D,iDAAiD;IACjD,KAAK,MAAM,KAAK,IAAI,YAAY,EAAE,CAAC;QACjC,IAAI,SAAS,CAAC,KAAK,CAAC,IAAI,OAAO,SAAS,CAAC,KAAK,CAAC,KAAK,QAAQ,EAAE,CAAC;YAC7D,SAAS,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,KAAK,CAAW,CAAC,CAAC;QACxD,CAAC;IACH,CAAC;IAED,kBAAkB;IAClB,IAAI,SAAS,CAAC,IAAI,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,IAAc,CAAC,EAAE,CAAC;QAC5E,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;IAC1C,CAAC;IACD,IAAI,SAAS,CAAC,EAAE,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAY,CAAC,EAAE,CAAC;QACxE,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;IACxC,CAAC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC","sourcesContent":["/**\n * Convert any ethereum 1193 parameter fields where necessary.\n * Note - this does not provide type-safety: the output is still unknown,\n * so a cast will still be necessary.\n * Type-safety would require more complicated logic depending on the transaction type (1559, 7702 etc)\n * @param raw An object containing ethereum EIP-1193 request parameters\n */\nexport const normaliseEthRequestParams = (raw: unknown): unknown => {\n  if (typeof raw !== \"object\" || !raw) {\n    throw new Error(\"Expected an object.\");\n  }\n\n  // Fields we want to convert to BigInt if they are strings\n  const bigintFields = [\n    \"gas\",\n    \"gasPrice\",\n    \"maxFeePerGas\",\n    \"maxPriorityFeePerGas\",\n    \"nonce\",\n    \"value\",\n    \"chainId\",\n  ];\n\n  // Make a copy\n  const processed = { ...(raw as Record<string, unknown>) };\n\n  // Convert specified fields from string to BigInt\n  for (const field of bigintFields) {\n    if (processed[field] && typeof processed[field] === \"string\") {\n      processed[field] = BigInt(processed[field] as string);\n    }\n  }\n\n  // Check addresses\n  if (processed.from && !/^0x[a-fA-F0-9]{40}$/.test(processed.from as string)) {\n    throw new Error(\"Invalid from address\");\n  }\n  if (processed.to && !/^0x[a-fA-F0-9]{40}$/.test(processed.to as string)) {\n    throw new Error(\"Invalid to address\");\n  }\n\n  return processed;\n};\n"]}
{"version":3,"file":"LazyWagmiConnector.test.js","sourceRoot":"","sources":["../../../src/lib/wagmi/LazyWagmiConnector.test.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAC;AAC9D,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAC7C,OAAO,EAA0B,MAAM,OAAO,CAAC;AAC/C,OAAO,EACL,kBAAkB,EAClB,cAAc,GAEf,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAA8B,MAAM,sBAAsB,CAAC;AAIlE,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;AAE7B,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,WAAkC,CAAC;IAEvC,UAAU,CAAC,GAAG,EAAE;QACd,EAAE,CAAC,aAAa,EAAE,CAAC;QACnB,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;YAC1C,EAAE,EAAE,OAAO;YACX,IAAI,EAAE,cAAc;SACrB,CAAC,CAA2C,CAAC,CAAC;QAE/C,WAAW,GAAG,kBAAkB,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAA0B,CAAC;IAC7E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;QACzC,MAAM,CAAC,QAAQ,CAAC,CAAC,oBAAoB,CACnC,MAAM,CAAC,gBAAgB,CAAC;YACtB,MAAM,EAAE,MAAM,CAAC,gBAAgB,CAAC;gBAC9B,EAAE,EAAE,OAAO;gBACX,IAAI,EAAE,cAAc;aACrB,CAAC;SACH,CAAC,CACH,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yCAAyC,EAAE,GAAG,EAAE;QACjD,MAAM,iBAAiB,GAAG;YACxB,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE;YACX,cAAc,EAAE,EAAE,CAAC,EAAE,EAAE;YACvB,OAAO,EAAE,EAAE,CAAC,EAAE,EAAE;YAChB,UAAU,EAAE,EAAE,CAAC,EAAE,EAAE;SACK,CAAC;QAC3B,MAAM,SAAS,GAAG,WAAW,CAAC;YAC5B,OAAO,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE;SACS,CAAC,CAAC;QAEvC,SAAS,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;QAEzC,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAChC,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,QAAQ,GAAG,cAAc,EAAE,CAAC;YAClC,MAAM,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;YAChD,MAAM,QAAQ,GAAG,cAAc,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;YACjD,MAAM,CAAC,QAAQ,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { describe, it, expect, vi, beforeEach } from \"vitest\";\nimport { injected } from \"@wagmi/connectors\";\nimport { type CreateConnectorFn } from \"wagmi\";\nimport {\n  LazyWagmiConnector,\n  embeddedWallet,\n  type CreateLazyConnectorFn,\n} from \"./LazyWagmiConnector.js\";\nimport { type TypedEthereumProvider } from \"../ethereum/index.js\";\n\ntype CreateConnectorConfig = Parameters<CreateConnectorFn>[0];\n\nvi.mock(\"@wagmi/connectors\");\n\ndescribe(\"LazyWagmiConnector\", () => {\n  let connectorFn: CreateLazyConnectorFn;\n\n  beforeEach(() => {\n    vi.resetAllMocks();\n    vi.mocked(injected).mockReturnValue((() => ({\n      id: \"civic\",\n      name: \"Civic Wallet\",\n    })) as unknown as ReturnType<typeof injected>);\n\n    connectorFn = LazyWagmiConnector({ debug: true }) as CreateLazyConnectorFn;\n  });\n\n  it(\"should create a Wagmi connector\", () => {\n    expect(injected).toHaveBeenCalledWith(\n      expect.objectContaining({\n        target: expect.objectContaining({\n          id: \"civic\",\n          name: \"Civic Wallet\",\n        }),\n      }),\n    );\n  });\n\n  it(\"should allow setting the provider later\", () => {\n    const mockTypedProvider = {\n      on: vi.fn(),\n      removeListener: vi.fn(),\n      request: vi.fn(),\n      disconnect: vi.fn(),\n    } as TypedEthereumProvider;\n    const connector = connectorFn({\n      emitter: { emit: vi.fn() },\n    } as unknown as CreateConnectorConfig);\n\n    connector.setProvider(mockTypedProvider);\n\n    expect(connector.ready()).toBe(true);\n  });\n\n  describe(\"embeddedWallet()\", () => {\n    it(\"should create a connector with default config\", () => {\n      const embedded = embeddedWallet();\n      expect(embedded).toBeInstanceOf(Function);\n    });\n\n    it(\"should allow overriding config options\", () => {\n      const embedded = embeddedWallet({ debug: true });\n      expect(embedded).toBeInstanceOf(Function);\n    });\n  });\n});\n"]}
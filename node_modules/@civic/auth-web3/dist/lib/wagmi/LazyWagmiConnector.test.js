import { describe, it, expect, vi, beforeEach } from "vitest";
import { injected } from "@wagmi/connectors";
import {} from "wagmi";
import { LazyWagmiConnector, embeddedWallet, } from "./LazyWagmiConnector.js";
import {} from "../ethereum/index.js";
vi.mock("@wagmi/connectors");
describe("LazyWagmiConnector", () => {
    let connectorFn;
    beforeEach(() => {
        vi.resetAllMocks();
        vi.mocked(injected).mockReturnValue((() => ({
            id: "civic",
            name: "Civic Wallet",
        })));
        connectorFn = LazyWagmiConnector({ debug: true });
    });
    it("should create a Wagmi connector", () => {
        expect(injected).toHaveBeenCalledWith(expect.objectContaining({
            target: expect.objectContaining({
                id: "civic",
                name: "Civic Wallet",
            }),
        }));
    });
    it("should allow setting the provider later", () => {
        const mockTypedProvider = {
            on: vi.fn(),
            removeListener: vi.fn(),
            request: vi.fn(),
            disconnect: vi.fn(),
        };
        const connector = connectorFn({
            emitter: { emit: vi.fn() },
        });
        connector.setProvider(mockTypedProvider);
        expect(connector.ready()).toBe(true);
    });
    describe("embeddedWallet()", () => {
        it("should create a connector with default config", () => {
            const embedded = embeddedWallet();
            expect(embedded).toBeInstanceOf(Function);
        });
        it("should allow overriding config options", () => {
            const embedded = embeddedWallet({ debug: true });
            expect(embedded).toBeInstanceOf(Function);
        });
    });
});
//# sourceMappingURL=LazyWagmiConnector.test.js.map
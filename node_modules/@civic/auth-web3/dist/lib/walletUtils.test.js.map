{"version":3,"file":"walletUtils.test.js","sourceRoot":"","sources":["../../src/lib/walletUtils.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, expect, it, vi } from \"vitest\";\nimport type {\n  CivicWeb3ClientConfig,\n  EVMChainRpcUrls,\n  NonEmptyArray,\n  Web3UserContextType,\n} from \"../types.js\";\nimport {\n  getEthereumProviderRPCsFromConfig,\n  userHasWallet,\n} from \"./walletUtils.js\";\nimport type { Chain } from \"viem\";\n\nvi.mock<{\n  mainnet: Chain;\n  polygon: Chain;\n}>(import(\"viem/chains\"), async (importOriginal) => {\n  const actual = await importOriginal();\n  return {\n    mainnet: actual.mainnet,\n    polygon: actual.polygon,\n  };\n});\n\ndescribe(\"walletUtils\", () => {\n  describe(\"userHasWallet\", () => {\n    it(\"should return false if the user does not have a wallet address\", () => {\n      // Arrange\n      const userContext = {\n        walletAddress: undefined,\n      } as unknown as Web3UserContextType;\n      // Act\n      const result = userHasWallet(userContext);\n      // Assert\n      expect(result).toBe(false);\n    });\n    it(\"should return true if the user has a wallet address\", () => {\n      // Arrange\n      const userContext = {\n        ethereum: {\n          address: \"walletAddress\",\n        },\n        user: {},\n      } as unknown as Web3UserContextType;\n      // Act\n      const result = userHasWallet(userContext);\n      // Assert\n      expect(result).toBe(true);\n    });\n  });\n\n  describe(\"getEthereumProviderRPCsFromConfig\", () => {\n    const dummyHttpRpc = \"https://dummy-http-url.com\";\n    const dummyWsRpc = \"wss://dummy-ws-url.com\";\n\n    const dummyChain: Chain = {\n      id: 1,\n      name: \"dummy\",\n      nativeCurrency: {\n        name: \"dummy\",\n        symbol: \"DUM\",\n        decimals: 18,\n      },\n      rpcUrls: {\n        default: {\n          http: [dummyHttpRpc],\n          webSocket: [dummyWsRpc],\n        },\n      },\n    };\n\n    it(\"should return explicit RPCs from config if provided\", () => {\n      const explicitRPCs: EVMChainRpcUrls = {\n        1: {\n          http: [\"https://explicit-http.com\"],\n          webSocket: [\"wss://explicit-ws.com\"],\n        },\n      };\n\n      const config: CivicWeb3ClientConfig = {\n        endpoints: { rpcs: explicitRPCs },\n        initialChain: dummyChain,\n      };\n\n      const result = getEthereumProviderRPCsFromConfig(config);\n      expect(result).toEqual(explicitRPCs);\n    });\n\n    it(\"should throw an error on empty ws rpc arrays (should be undefined in that case)\", () => {\n      const chainWithMissingWsRpcs: Chain = {\n        id: 2,\n        name: \"another\",\n        nativeCurrency: {\n          name: \"another\",\n          symbol: \"ANO\",\n          decimals: 18,\n        },\n        rpcUrls: {\n          default: {\n            http: [\"https://explicit-http.com\"],\n            // cast here - we want a test for this as it is typically out of our control (options are passed at runtime)\n            webSocket: [] as unknown as NonEmptyArray<string>,\n          },\n        },\n      };\n\n      const config: CivicWeb3ClientConfig = {\n        initialChain: chainWithMissingWsRpcs,\n      };\n\n      const shouldThrow = () => getEthereumProviderRPCsFromConfig(config);\n      expect(shouldThrow).toThrowError();\n    });\n\n    it(\"should return default RPCs when no explicit RPCs are provided in config\", () => {\n      const config: CivicWeb3ClientConfig = {\n        endpoints: {},\n        chains: [dummyChain],\n      };\n\n      const result = getEthereumProviderRPCsFromConfig(config);\n      expect(result).toEqual({\n        1: {\n          http: [dummyHttpRpc],\n          webSocket: [dummyWsRpc],\n        },\n      });\n    });\n\n    it(\"should merge initialChain and config.chains, ensuring unique chains\", () => {\n      const anotherHttpRpc = \"https://another-http-url.com\";\n      const anotherWsRpc = \"wss://another-ws-url.com\";\n      const anotherChain: Chain = {\n        id: 2,\n        name: \"another\",\n        nativeCurrency: {\n          name: \"another\",\n          symbol: \"ANO\",\n          decimals: 18,\n        },\n        rpcUrls: {\n          default: {\n            http: [anotherHttpRpc],\n            webSocket: [anotherWsRpc],\n          },\n        },\n      };\n\n      const config: CivicWeb3ClientConfig = {\n        endpoints: {},\n        chains: [dummyChain, anotherChain],\n        initialChain: dummyChain,\n      };\n\n      const result = getEthereumProviderRPCsFromConfig(config);\n      expect(result).toEqual({\n        1: {\n          http: [dummyHttpRpc],\n          webSocket: [dummyWsRpc],\n        },\n        2: {\n          http: [anotherHttpRpc],\n          webSocket: [anotherWsRpc],\n        },\n      });\n    });\n\n    it(\"should only return the initial chain RPCs if config.chains is empty\", () => {\n      const config: CivicWeb3ClientConfig = {\n        endpoints: {},\n        chains: [],\n        initialChain: dummyChain,\n      };\n\n      const result = getEthereumProviderRPCsFromConfig(config);\n      expect(result).toEqual({\n        1: {\n          http: [dummyHttpRpc],\n          webSocket: [dummyWsRpc],\n        },\n      });\n    });\n\n    it(\"should return all viem chains if no config is provided\", () => {\n      const config: CivicWeb3ClientConfig = {\n        endpoints: {},\n      };\n\n      const result = getEthereumProviderRPCsFromConfig(config);\n      expect(result).toEqual({\n        1: {\n          // the default viem http rpc for mainnet\n          http: [expect.any(String)],\n          // viem does not provide a default ws rpc for mainnet\n          webSocket: undefined,\n        },\n        137: {\n          // the default viem http rpc for polygon\n          http: [expect.any(String)],\n          // viem does not provide a default ws rpc for polygon\n          webSocket: undefined,\n        },\n      });\n    });\n  });\n});\n"]}
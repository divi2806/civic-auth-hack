{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/lib/ethereum/index.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AACvD,OAAO,EACL,mBAAmB,GAEpB,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AACvD,OAAO,EAAE,gBAAgB,EAAE,MAAM,gBAAgB,CAAC;AAElD;;;;;;;GAOG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,QAAiC,EACV,EAAE;IACzB,MAAM,eAAe,GAAG,IAAI,mBAAmB,CAAC,QAAQ,CAAC,CAAC;IAC1D,OAAO,eAAe,CAAC,eAAe,CAAC,CAAC;AAC1C,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,0BAA0B,GAAG,GAAG,EAAE,CAC7C,eAAe,CAGb,CAAC,SAAS,CAAC,CAAC,CAAC;AAEjB,oCAAoC;AACpC,MAAM,CAAC,MAAM,yBAAyB,GAAG,0BAA0B,EAAE,CAAC;AACtE,gBAAgB,CAAC,yBAAyB,CAAC,CAAC","sourcesContent":["import type { GenericEthereumProvider } from \"../../types.js\";\nimport type { EIP1193EventMap } from \"viem\";\nimport { wrapWithEIP2255 } from \"./EIP2255Provider.js\";\nimport {\n  EIP1193ProviderImpl,\n  type TypedEthereumProvider,\n} from \"./EIP1193ProviderImpl.js\";\nimport { createLazyProxy } from \"../lazy/LazyProxy.js\";\nimport { registerProvider } from \"./discovery.js\";\n\n/**\n * Given an untyped ethereum provider, expose a provider with\n *  - EIP1193 methods (wallet connection and events)\n *  - EIP2255 methods (wallet permissions)\n *  - EIP1474 methods (standard ethereum RPC)\n * @param provider an untyped ethereum provider offering only a generic \"request\" method\n * @returns a typed provider implementing EIP1193, EIP2255, and EIP1474\n */\nexport const createTypedProvider = (\n  provider: GenericEthereumProvider,\n): TypedEthereumProvider => {\n  const eip1193Provider = new EIP1193ProviderImpl(provider);\n  return wrapWithEIP2255(eip1193Provider);\n};\n\n/**\n * Create a lazy ethereum provider that can be populated later with a provider implementing EIP1474, EIP1193, and EIP2255\n */\nexport const createLazyEthereumProvider = () =>\n  createLazyProxy<\n    TypedEthereumProvider & GenericEthereumProvider,\n    EIP1193EventMap\n  >([\"request\"]);\n\n// created for discovery via eip6963\nexport const singletonEthereumProvider = createLazyEthereumProvider();\nregisterProvider(singletonEthereumProvider);\n"]}
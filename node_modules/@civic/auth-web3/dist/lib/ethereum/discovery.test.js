import { describe, it, expect, vi, beforeEach, afterEach, } from "vitest";
import { registerProvider } from "./discovery.js";
describe("registerProvider", () => {
    let mockDispatchEvent;
    beforeEach(() => {
        vi.useFakeTimers();
        mockDispatchEvent = vi.fn();
        vi.stubGlobal("window", {
            dispatchEvent: mockDispatchEvent,
            setInterval: global.setInterval,
        });
    });
    afterEach(() => {
        vi.useRealTimers();
    });
    it("should register the provider and dispatch EIP-6963 events", () => {
        const mockProvider = {};
        registerProvider(mockProvider);
        // Fast-forward time by 1000ms (1 second)
        vi.advanceTimersByTime(1000);
        expect(mockDispatchEvent).toHaveBeenCalled();
        expect(mockDispatchEvent).toHaveBeenCalledWith(expect.objectContaining({
            type: "eip6963:announceProvider",
            detail: expect.objectContaining({
                info: expect.objectContaining({
                    name: "Civic Wallet",
                }),
                provider: mockProvider,
            }),
        }));
    });
    it("should not register if window is undefined", () => {
        vi.stubGlobal("window", undefined);
        const mockProvider = {};
        registerProvider(mockProvider);
        // Ensure no event was dispatched
        expect(mockDispatchEvent).not.toHaveBeenCalled();
    });
    it("should register the provider at regular intervals", () => {
        const mockProvider = {};
        registerProvider(mockProvider);
        // Simulate multiple interval ticks
        vi.advanceTimersByTime(3000);
        expect(mockDispatchEvent).toHaveBeenCalledTimes(3);
    });
});
//# sourceMappingURL=discovery.test.js.map
import type { GenericEthereumProvider } from "../../types.js";
import type { EIP1193RequestFn, Prettify } from "viem";
/**
 * Caveat type for EIP-2255
 */
type Caveat = {
    type: string;
    value: unknown;
};
/**
 * Requested permissions object shape for EIP-2255
 * e.g. { eth_accounts: {}, foo_bar: { someField: 'someValue' } }
 */
export type RequestedPermissions = {
    [permissionName: string]: Record<string, unknown>;
};
/**
 * Permission type for EIP-2255
 */
export type Permission = {
    parentCapability: string;
    invoker?: string;
    caveats: Caveat[];
};
/**
 * Define the EIP2255 request interface
 */
type EIP2255Schema = [
    /**
     * @description Returns the current set of permissions granted by the wallet.
     * @example
     * provider.request({ method: 'wallet_getPermissions' })
     * // => [{ parentCapability: 'eth_accounts', ... }, ...]
     */
    {
        Method: "wallet_getPermissions";
        Parameters: undefined;
        ReturnType: [];
    },
    /**
     * @description Requests new permissions from the wallet.
     * @example
     * provider.request({
     *   method: 'wallet_requestPermissions',
     *   params: [{ eth_accounts: {} }],
     * })
     * // => [{ parentCapability: 'eth_accounts', caveats: { ... } }, ...]
     */
    {
        Method: "wallet_requestPermissions";
        Parameters: RequestedPermissions;
        ReturnType: Permission[];
    },
    {
        Method: "wallet_grantPermissions";
        Parameters: RequestedPermissions;
        ReturnType: Permission[];
    },
    {
        Method: "wallet_revokePermissions";
        Parameters: RequestedPermissions;
        ReturnType: Permission[];
    }
];
export type EIP2255Provider = Prettify<{
    request: EIP1193RequestFn<EIP2255Schema>;
}>;
export declare class EIP2255ProviderImpl implements GenericEthereumProvider, EIP2255Provider {
    private permissionsStore;
    request(args: {
        method: "wallet_getPermissions";
        params?: [];
    }): Promise<Permission[]>;
    request(args: {
        method: "wallet_requestPermissions";
        params: [RequestedPermissions];
    }): Promise<Permission[]>;
    request(args: {
        method: "wallet_grantPermissions";
        params: [RequestedPermissions];
    }): Promise<Permission[]>;
    request(args: {
        method: "wallet_revokePermissions";
        params: [RequestedPermissions];
    }): Promise<Permission[]>;
}
/**
 * Given an eip1193 provider, augment it to support EIP-2255 methods
 * @param underlying - an EIP-1193 provider that has a `request` method
 * @returns a provider that supports EIP-2255 methods alongside EIP-1193 methods
 */
export declare const wrapWithEIP2255: <T extends GenericEthereumProvider>(underlying: T) => T & EIP2255Provider;
export {};
//# sourceMappingURL=EIP2255Provider.d.ts.map
import { describe, it, expect, vi } from "vitest";
import { createTypedProvider, createLazyEthereumProvider } from "./index.js";
// Stub an underlying provider, recording all calls
class StubRecordingProvider {
    request = vi.fn().mockResolvedValue(undefined);
}
describe("createTypedProvider", () => {
    it("should create a provider with EIP-1193, EIP-1474, EIP-2255, and event handling", () => {
        const stubeip1474Provider = new StubRecordingProvider();
        const typedProvider = createTypedProvider(stubeip1474Provider);
        expect(typeof typedProvider.request).toBe("function");
        expect(typeof typedProvider.on).toBe("function");
        expect(typeof typedProvider.removeListener).toBe("function");
        // sends EIP-2255 methods to the 2255 mixin
        typedProvider.request({ method: "wallet_getPermissions" });
        expect(stubeip1474Provider.request).not.toHaveBeenCalledWith({
            method: "wallet_getPermissions",
        });
        // sends EIP-1474 methods to the underlying provider
        typedProvider.request({ method: "eth_chainId" });
        expect(stubeip1474Provider.request).toHaveBeenCalledWith({
            method: "eth_chainId",
        });
    });
});
describe("createLazyProvider", () => {
    it("should create a lazy provider with known methods", () => {
        const lazyProvider = createLazyEthereumProvider();
        // proxy methods
        expect(typeof lazyProvider.setImplementation).toBe("function");
        expect(typeof lazyProvider.ready).toBe("function");
        // event registrar methods (
        expect(typeof lazyProvider.on).toBe("function");
        expect(typeof lazyProvider.removeListener).toBe("function");
        // other EIP1193 methods
        expect(typeof lazyProvider.request).toBe("function");
    });
    it("should defer implementation until setImplementation is called", () => {
        const lazyProvider = createLazyEthereumProvider();
        const mockProvider = createTypedProvider(new StubRecordingProvider());
        expect(lazyProvider.ready()).toBe(false);
        lazyProvider.setImplementation(mockProvider);
        expect(lazyProvider.ready()).toBe(true);
    });
    it("should forward calls after implementation is set", async () => {
        const lazyProvider = createLazyEthereumProvider();
        const underlyingProvider = new StubRecordingProvider();
        const typedProvider = createTypedProvider(underlyingProvider);
        lazyProvider.setImplementation(typedProvider);
        vi.mocked(underlyingProvider.request).mockResolvedValueOnce("mockResponse");
        const result = await lazyProvider.request({ method: "eth_chainId" });
        expect(result).toBe("mockResponse");
        expect(underlyingProvider.request).toHaveBeenCalledWith({
            method: "eth_chainId",
        });
    });
});
//# sourceMappingURL=index.test.js.map
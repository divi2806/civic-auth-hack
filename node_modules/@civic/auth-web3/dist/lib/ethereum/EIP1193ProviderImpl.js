import { ProviderRpcError, } from "viem";
import EventEmitter from "events";
import { logger } from "../logger.js";
import { withAnalytics } from "../analytics/index.js";
const isEventHandler = (underlying) => {
    return Object.prototype.hasOwnProperty.call(underlying, "on");
};
export class EIP1193ProviderImpl {
    underlying; // a request() function
    localEventEmitter;
    constructor(provider) {
        this.underlying = provider;
        this.localEventEmitter = new EventEmitter();
    }
    /** Single implementation */
    async request(args) {
        // Determine the event type for analytics tracking
        let eventType;
        if (args.method === "eth_sign" || args.method === "personal_sign") {
            eventType = "signMessage";
            logger.web3.provider.debug("EIP1193ProviderImpl: signMessage", args);
        }
        else if (args.method === "eth_sendTransaction") {
            eventType = "signTransaction";
            logger.web3.provider.debug("EIP1193ProviderImpl: sendTransaction", args);
        }
        else if (args.method === "eth_signTypedData" ||
            args.method === "eth_signTypedData_v4") {
            eventType = "signTypedData";
            logger.web3.provider.debug("EIP1193ProviderImpl: signTypedData", args);
        }
        // Special handling for signTypedData methods needs to be preserved
        if (args.method === "eth_signTypedData" ||
            args.method === "eth_signTypedData_v4") {
            // Create a wrapped handler for signTypedData
            const handleSignTypedData = async () => {
                const structuredResponse = (await this.underlying.request(args));
                logger.web3.provider.debug("structuredResponse", structuredResponse);
                if (structuredResponse.status !== "SUCCESS") {
                    throw new Error("Metakeep Error: " + structuredResponse.status);
                }
                return structuredResponse.signature;
            };
            // Use the analytics middleware if this is a tracked method
            if (eventType) {
                return withAnalytics(handleSignTypedData, eventType, "ethereum", [
                    args,
                ])();
            }
            return handleSignTypedData();
        }
        // Handle other methods
        const handleOtherMethods = async () => {
            logger.web3.provider.debug("EIP1193ProviderImpl: request", args);
            const result = await this.underlying.request(args);
            logger.web3.provider.debug("EIP1193ProviderImpl: request result", result);
            return result;
        };
        // Use the analytics middleware if this is a tracked method
        if (eventType) {
            return withAnalytics(handleOtherMethods, eventType, "ethereum", [
                args,
            ])();
        }
        return handleOtherMethods();
    }
    disconnect() {
        this.localEventEmitter.emit("disconnect", new ProviderRpcError(new Error("Disconnected by user"), {
            shortMessage: "Disconnected by user",
            code: 4900,
        }));
    }
    // EIP-1193 style event handling
    on(event, listener) {
        // If the `underlying` supports events. Otherwise rely on localEventEmitter.
        if (isEventHandler(this.underlying)) {
            // cast to a typed event handler here - even if the underlying is untyped.
            this.underlying.on(event, listener);
        }
        else {
            this.localEventEmitter.on(event, 
            // the hard cast is needed here to avoid a type error between two ostensibly identical types
            listener);
        }
    }
    removeListener(event, listener) {
        // If the `underlying` supports events. Otherwise rely on localEventEmitter.
        if (isEventHandler(this.underlying)) {
            this.underlying.removeListener(event, listener);
        }
        else {
            // the hard cast is needed here to avoid a type error between two ostensibly identical types
            this.localEventEmitter.removeListener(event, listener);
        }
    }
}
//# sourceMappingURL=EIP1193ProviderImpl.js.map
{"version":3,"file":"discovery.test.js","sourceRoot":"","sources":["../../../src/lib/ethereum/discovery.test.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,QAAQ,EACR,EAAE,EACF,MAAM,EACN,EAAE,EACF,UAAU,EACV,SAAS,GAEV,MAAM,QAAQ,CAAC;AAChB,OAAO,EAAE,gBAAgB,EAAE,MAAM,gBAAgB,CAAC;AAGlD,QAAQ,CAAC,kBAAkB,EAAE,GAAG,EAAE;IAChC,IAAI,iBAAuB,CAAC;IAE5B,UAAU,CAAC,GAAG,EAAE;QACd,EAAE,CAAC,aAAa,EAAE,CAAC;QACnB,iBAAiB,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;QAC5B,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE;YACtB,aAAa,EAAE,iBAAiB;YAChC,WAAW,EAAE,MAAM,CAAC,WAAW;SAChC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,EAAE,CAAC,aAAa,EAAE,CAAC;IACrB,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE,GAAG,EAAE;QACnE,MAAM,YAAY,GAAG,EAAqB,CAAC;QAE3C,gBAAgB,CAAC,YAAY,CAAC,CAAC;QAE/B,yCAAyC;QACzC,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAE7B,MAAM,CAAC,iBAAiB,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC7C,MAAM,CAAC,iBAAiB,CAAC,CAAC,oBAAoB,CAC5C,MAAM,CAAC,gBAAgB,CAAC;YACtB,IAAI,EAAE,0BAA0B;YAChC,MAAM,EAAE,MAAM,CAAC,gBAAgB,CAAC;gBAC9B,IAAI,EAAE,MAAM,CAAC,gBAAgB,CAAC;oBAC5B,IAAI,EAAE,cAAc;iBACrB,CAAC;gBACF,QAAQ,EAAE,YAAY;aACvB,CAAC;SACH,CAAC,CACH,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,GAAG,EAAE;QACpD,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;QAEnC,MAAM,YAAY,GAAG,EAAqB,CAAC;QAE3C,gBAAgB,CAAC,YAAY,CAAC,CAAC;QAE/B,iCAAiC;QACjC,MAAM,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;IACnD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;QAC3D,MAAM,YAAY,GAAG,EAAqB,CAAC;QAE3C,gBAAgB,CAAC,YAAY,CAAC,CAAC;QAE/B,mCAAmC;QACnC,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAE7B,MAAM,CAAC,iBAAiB,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {\n  describe,\n  it,\n  expect,\n  vi,\n  beforeEach,\n  afterEach,\n  type Mock,\n} from \"vitest\";\nimport { registerProvider } from \"./discovery.js\";\nimport type { EIP1193Provider } from \"viem\";\n\ndescribe(\"registerProvider\", () => {\n  let mockDispatchEvent: Mock;\n\n  beforeEach(() => {\n    vi.useFakeTimers();\n    mockDispatchEvent = vi.fn();\n    vi.stubGlobal(\"window\", {\n      dispatchEvent: mockDispatchEvent,\n      setInterval: global.setInterval,\n    });\n  });\n\n  afterEach(() => {\n    vi.useRealTimers();\n  });\n\n  it(\"should register the provider and dispatch EIP-6963 events\", () => {\n    const mockProvider = {} as EIP1193Provider;\n\n    registerProvider(mockProvider);\n\n    // Fast-forward time by 1000ms (1 second)\n    vi.advanceTimersByTime(1000);\n\n    expect(mockDispatchEvent).toHaveBeenCalled();\n    expect(mockDispatchEvent).toHaveBeenCalledWith(\n      expect.objectContaining({\n        type: \"eip6963:announceProvider\",\n        detail: expect.objectContaining({\n          info: expect.objectContaining({\n            name: \"Civic Wallet\",\n          }),\n          provider: mockProvider,\n        }),\n      }),\n    );\n  });\n\n  it(\"should not register if window is undefined\", () => {\n    vi.stubGlobal(\"window\", undefined);\n\n    const mockProvider = {} as EIP1193Provider;\n\n    registerProvider(mockProvider);\n\n    // Ensure no event was dispatched\n    expect(mockDispatchEvent).not.toHaveBeenCalled();\n  });\n\n  it(\"should register the provider at regular intervals\", () => {\n    const mockProvider = {} as EIP1193Provider;\n\n    registerProvider(mockProvider);\n\n    // Simulate multiple interval ticks\n    vi.advanceTimersByTime(3000);\n\n    expect(mockDispatchEvent).toHaveBeenCalledTimes(3);\n  });\n});\n"]}
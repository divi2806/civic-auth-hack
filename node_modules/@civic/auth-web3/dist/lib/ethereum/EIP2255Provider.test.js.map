{"version":3,"file":"EIP2255Provider.test.js","sourceRoot":"","sources":["../../../src/lib/ethereum/EIP2255Provider.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect, vi } from \"vitest\";\nimport { wrapWithEIP2255, EIP2255ProviderImpl } from \"./EIP2255Provider.js\";\nimport type { GenericEthereumProvider } from \"../../types.js\";\nimport type { EIP1193RequestFn, Prettify } from \"viem\";\n\ndescribe(\"EIP2255ProviderImpl\", () => {\n  let provider: EIP2255ProviderImpl;\n\n  beforeEach(() => {\n    provider = new EIP2255ProviderImpl();\n  });\n\n  describe(\"unrecognised requests\", () => {\n    it(\"should throw an error\", async () => {\n      const shouldFail = provider.request({\n        // hack typescript to be able to test this - note - we can't rely on the integrator being typesafe here\n        method: \"unrecognised\" as \"wallet_getPermissions\",\n        params: [],\n      });\n      await expect(shouldFail).rejects.toThrowError(\"unrecognised\");\n    });\n  });\n\n  describe(\"wallet_getPermissions\", () => {\n    it(\"should return empty array when no permissions are set\", async () => {\n      const result = await provider.request({\n        method: \"wallet_getPermissions\",\n        params: [],\n      });\n      expect(result).toEqual([]);\n    });\n  });\n\n  describe(\"wallet_requestPermissions\", () => {\n    it(\"should add new permission\", async () => {\n      const requested = { eth_sign: {} };\n      const result = await provider.request({\n        method: \"wallet_requestPermissions\",\n        params: [requested],\n      });\n      expect(result).toHaveLength(1);\n      expect(result?.[0]?.parentCapability).toBe(\"eth_sign\");\n    });\n\n    it(\"should update existing permission with new caveats\", async () => {\n      // First request\n      const initialRequest = { eth_sign: {} };\n      await provider.request({\n        method: \"wallet_requestPermissions\",\n        params: [initialRequest],\n      });\n\n      // Second request with additional caveat\n      const updatedRequest = { eth_sign: { test: true } };\n      const result = await provider.request({\n        method: \"wallet_requestPermissions\",\n        params: [updatedRequest],\n      });\n\n      expect(result?.[0]?.caveats).toHaveLength(1);\n      expect(result?.[0]?.caveats[0]).toEqual({ type: \"test\", value: true });\n    });\n  });\n\n  describe(\"wallet_revokePermissions\", () => {\n    it(\"should remove a permission\", async () => {\n      const requested = { eth_sign: {} };\n      const result = await provider.request({\n        method: \"wallet_grantPermissions\",\n        params: [requested],\n      });\n      expect(result).toHaveLength(1);\n      expect(result?.[0]?.parentCapability).toBe(\"eth_sign\");\n\n      await provider.request({\n        method: \"wallet_revokePermissions\",\n        params: [requested],\n      });\n\n      const getResult = await provider.request({\n        method: \"wallet_getPermissions\",\n        params: [],\n      });\n      expect(getResult).toEqual([]);\n    });\n  });\n});\n\n// an example set of dummy methods that a wallet could support\ntype DummySchema = [\n  {\n    Method: \"some_method\";\n    Parameters: string;\n    ReturnType: string[];\n  },\n];\ntype DummyProvider = Prettify<{\n  request: EIP1193RequestFn<DummySchema>;\n}>;\n\ndescribe(\"wrapWithEIP2255\", () => {\n  let underlyingProvider: GenericEthereumProvider & DummyProvider;\n  // the wrapped provider implements both the dummy methods and EIP-2255\n  let wrappedProvider: ReturnType<typeof wrapWithEIP2255<DummyProvider>>;\n\n  beforeEach(() => {\n    underlyingProvider = {\n      request: vi.fn(),\n    };\n\n    wrappedProvider = wrapWithEIP2255(underlyingProvider);\n  });\n\n  describe(\"request method\", () => {\n    it(\"should handle EIP-2255 methods through wrapper\", async () => {\n      const result = await wrappedProvider.request({\n        method: \"wallet_getPermissions\",\n      });\n      expect(result).toEqual([]);\n    });\n\n    it(\"should forward non-EIP-2255 methods to underlying provider\", async () => {\n      const mockMethod = vi.fn();\n      vi.mocked(underlyingProvider.request).mockImplementation(mockMethod);\n\n      const request = {\n        method: \"some_method\",\n        params: \"dummy param\",\n      } as const;\n      await wrappedProvider.request(request);\n\n      expect(mockMethod).toHaveBeenCalledWith(request);\n    });\n  });\n\n  describe(\"setting properties\", () => {\n    it(\"is not allowed\", () => {\n      expect(() => {\n        (wrappedProvider as unknown as { abc: boolean }).abc = true;\n      }).toThrowError();\n    });\n  });\n});\n"]}
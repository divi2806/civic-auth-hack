import type { GenericEthereumProvider } from "../../types.js";
import type { EIP1193EventMap } from "viem";
import { type TypedEthereumProvider } from "./EIP1193ProviderImpl.js";
/**
 * Given an untyped ethereum provider, expose a provider with
 *  - EIP1193 methods (wallet connection and events)
 *  - EIP2255 methods (wallet permissions)
 *  - EIP1474 methods (standard ethereum RPC)
 * @param provider an untyped ethereum provider offering only a generic "request" method
 * @returns a typed provider implementing EIP1193, EIP2255, and EIP1474
 */
export declare const createTypedProvider: (provider: GenericEthereumProvider) => TypedEthereumProvider;
/**
 * Create a lazy ethereum provider that can be populated later with a provider implementing EIP1474, EIP1193, and EIP2255
 */
export declare const createLazyEthereumProvider: () => import("../lazy/LazyProxy.js").LazyProxy<{
    on: <event extends keyof EIP1193EventMap>(event: event, listener: EIP1193EventMap[event]) => void;
    removeListener: <event extends keyof EIP1193EventMap>(event: event, listener: EIP1193EventMap[event]) => void;
    request: import("viem").EIP1193RequestFn<import("viem").EIP1474Methods>;
} & import("./EIP1193ProviderImpl.js").DisconnectableProvider & {
    request: import("viem").EIP1193RequestFn<[{
        Method: "wallet_getPermissions";
        Parameters: undefined;
        ReturnType: [];
    }, {
        Method: "wallet_requestPermissions";
        Parameters: import("./EIP2255Provider.js").RequestedPermissions;
        ReturnType: import("./EIP2255Provider.js").Permission[];
    }, {
        Method: "wallet_grantPermissions";
        Parameters: import("./EIP2255Provider.js").RequestedPermissions;
        ReturnType: import("./EIP2255Provider.js").Permission[];
    }, {
        Method: "wallet_revokePermissions";
        Parameters: import("./EIP2255Provider.js").RequestedPermissions;
        ReturnType: import("./EIP2255Provider.js").Permission[];
    }]>;
} & import("../lazy/LazyProxy.js").EventRegistrar<EIP1193EventMap> & GenericEthereumProvider>;
export declare const singletonEthereumProvider: import("../lazy/LazyProxy.js").LazyProxy<{
    on: <event extends keyof EIP1193EventMap>(event: event, listener: EIP1193EventMap[event]) => void;
    removeListener: <event extends keyof EIP1193EventMap>(event: event, listener: EIP1193EventMap[event]) => void;
    request: import("viem").EIP1193RequestFn<import("viem").EIP1474Methods>;
} & import("./EIP1193ProviderImpl.js").DisconnectableProvider & {
    request: import("viem").EIP1193RequestFn<[{
        Method: "wallet_getPermissions";
        Parameters: undefined;
        ReturnType: [];
    }, {
        Method: "wallet_requestPermissions";
        Parameters: import("./EIP2255Provider.js").RequestedPermissions;
        ReturnType: import("./EIP2255Provider.js").Permission[];
    }, {
        Method: "wallet_grantPermissions";
        Parameters: import("./EIP2255Provider.js").RequestedPermissions;
        ReturnType: import("./EIP2255Provider.js").Permission[];
    }, {
        Method: "wallet_revokePermissions";
        Parameters: import("./EIP2255Provider.js").RequestedPermissions;
        ReturnType: import("./EIP2255Provider.js").Permission[];
    }]>;
} & import("../lazy/LazyProxy.js").EventRegistrar<EIP1193EventMap> & GenericEthereumProvider>;
//# sourceMappingURL=index.d.ts.map
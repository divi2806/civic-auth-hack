{"version":3,"file":"EIP1193ProviderImpl.test.js","sourceRoot":"","sources":["../../../src/lib/ethereum/EIP1193ProviderImpl.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect, vi, beforeEach, afterEach } from \"vitest\";\nimport { EIP1193ProviderImpl } from \"./EIP1193ProviderImpl.js\";\nimport type { SignTypedDataParameters } from \"viem\";\nimport type { GenericEthereumProvider } from \"../../types.js\";\nimport * as analyticsModule from \"../analytics/index.js\";\n\n// Mock GenericEthereumProvider\nclass MockProvider implements GenericEthereumProvider {\n  request =\n    vi.fn<(args: { method: string; params?: unknown[] }) => Promise<unknown>>();\n  on = vi.fn<(event: string, listener: (...args: unknown[]) => void) => void>();\n  removeListener =\n    vi.fn<(event: string, listener: (...args: unknown[]) => void) => void>();\n}\n\ntype SimpleEventRegistrar = {\n  on: (event: string, listener: (...args: unknown[]) => void) => void;\n  removeListener: (\n    event: string,\n    listener: (...args: unknown[]) => void,\n  ) => void;\n};\n\n// Create a mock provider with event support\nconst createMockProvider = (\n  supportsEvents: boolean = true,\n): GenericEthereumProvider => {\n  const mock = new MockProvider();\n  if (!supportsEvents) {\n    delete (mock as Partial<MockProvider>).on;\n    delete (mock as Partial<MockProvider>).removeListener;\n  }\n  return mock;\n};\n\ndescribe(\"EIP1193ProviderImpl\", () => {\n  it(\"should wrap a GenericEthereumProvider and expose the EIP-1193 interface\", () => {\n    const mockProvider = createMockProvider();\n    const provider = new EIP1193ProviderImpl(mockProvider);\n\n    expect(typeof provider.request).toBe(\"function\");\n    expect(typeof provider.on).toBe(\"function\");\n    expect(typeof provider.removeListener).toBe(\"function\");\n  });\n\n  describe(\"request method\", () => {\n    // Store the original implementation\n    const originalEmitEvent = analyticsModule.analyticsEmitter.emitEvent;\n    const mockEmitEvent = vi.fn().mockResolvedValue(undefined);\n\n    beforeEach(() => {\n      // Reset the mock for each test\n      mockEmitEvent.mockClear();\n      // Replace the real method with our mock\n      analyticsModule.analyticsEmitter.emitEvent = mockEmitEvent;\n    });\n\n    afterEach(() => {\n      // Restore the original implementation after each test\n      analyticsModule.analyticsEmitter.emitEvent = originalEmitEvent;\n    });\n\n    it(\"should forward request calls to the underlying provider\", async () => {\n      const mockProvider = createMockProvider();\n      const provider = new EIP1193ProviderImpl(mockProvider);\n\n      vi.mocked(mockProvider.request).mockResolvedValueOnce(\"mockResponse\");\n\n      const result = await provider.request({ method: \"eth_chainId\" });\n\n      expect(result).toBe(\"mockResponse\");\n      expect(mockProvider.request).toHaveBeenCalledWith({\n        method: \"eth_chainId\",\n      });\n\n      // Non-tracked methods should not emit analytics\n      expect(mockEmitEvent).not.toHaveBeenCalled();\n    });\n\n    it(\"should unwrap structured response for eth_signTypedData methods\", async () => {\n      const mockProvider = createMockProvider();\n      const provider = new EIP1193ProviderImpl(mockProvider);\n\n      vi.mocked(mockProvider.request).mockResolvedValueOnce({\n        signature: \"mockSignature\",\n        r: \"r-value\",\n        s: \"s-value\",\n        v: \"v-value\",\n        status: \"SUCCESS\",\n      });\n\n      const request = {\n        method: \"eth_signTypedData_v4\",\n        params: [{ domain: {}, types: {}, message: {} }] as [\n          SignTypedDataParameters,\n        ],\n      };\n\n      const result = await provider.request(request);\n\n      expect(result).toBe(\"mockSignature\");\n\n      // Should emit analytics for signTypedData\n      expect(mockEmitEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          eventType: \"signTypedData\",\n          parameters: [request],\n        }),\n      );\n    });\n\n    it(\"should throw an error if eth_signTypedData method fails\", async () => {\n      const mockProvider = createMockProvider();\n      const provider = new EIP1193ProviderImpl(mockProvider);\n\n      vi.mocked(mockProvider.request).mockResolvedValueOnce({\n        status: \"USER_REQUEST_DENIED\",\n      });\n\n      const request = {\n        method: \"eth_signTypedData\",\n        params: [{ domain: {}, types: {}, message: {} }] as [\n          SignTypedDataParameters,\n        ],\n      };\n\n      await expect(provider.request(request)).rejects.toThrow(\n        \"Metakeep Error: USER_REQUEST_DENIED\",\n      );\n\n      // Should emit error analytics\n      expect(mockEmitEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          eventType: \"signTypedDataError\",\n          error: expect.any(String),\n          parameters: [request],\n        }),\n      );\n    });\n\n    it(\"should emit analytics for personal_sign requests\", async () => {\n      const mockProvider = createMockProvider();\n      const provider = new EIP1193ProviderImpl(mockProvider);\n\n      vi.mocked(mockProvider.request).mockResolvedValueOnce(\"0xsignature\");\n\n      const request = {\n        method: \"personal_sign\",\n        params: [\"0xmessage\"],\n      };\n\n      await provider.request(request);\n\n      // Should emit analytics for signMessage\n      expect(mockEmitEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          eventType: \"signMessage\",\n          parameters: [request],\n        }),\n      );\n    });\n\n    it(\"should emit analytics for eth_sendTransaction requests\", async () => {\n      const mockProvider = createMockProvider();\n      const provider = new EIP1193ProviderImpl(mockProvider);\n\n      vi.mocked(mockProvider.request).mockResolvedValueOnce(\"0xtxhash\");\n\n      const request = {\n        method: \"eth_sendTransaction\",\n        params: [{ to: \"0xabc\", value: \"0x123\" }],\n      };\n\n      await provider.request(request);\n\n      // Should emit analytics for signTransaction\n      expect(mockEmitEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          eventType: \"signTransaction\",\n          parameters: [request],\n        }),\n      );\n    });\n\n    it(\"should emit error analytics when a tracked method fails\", async () => {\n      const mockProvider = createMockProvider();\n      const provider = new EIP1193ProviderImpl(mockProvider);\n\n      const testError = new Error(\"User rejected\");\n      vi.mocked(mockProvider.request).mockRejectedValueOnce(testError);\n\n      const request = {\n        method: \"eth_sendTransaction\",\n        params: [{ to: \"0xabc\", value: \"0x123\" }],\n      };\n\n      await expect(provider.request(request)).rejects.toThrow(testError);\n\n      // Should emit error analytics\n      expect(mockEmitEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          eventType: \"signTransactionError\",\n          error: \"User rejected\",\n          parameters: [request],\n        }),\n      );\n    });\n\n    it(\"should emit error analytics for eth_sign method failures\", async () => {\n      const mockProvider = createMockProvider();\n      const provider = new EIP1193ProviderImpl(mockProvider);\n\n      const testError = new Error(\"Signing failed\");\n      vi.mocked(mockProvider.request).mockRejectedValueOnce(testError);\n\n      const request = {\n        method: \"eth_sign\",\n        params: [\"0xaddress\", \"0xmessage\"],\n      };\n\n      await expect(provider.request(request)).rejects.toThrow(testError);\n\n      // Should emit error analytics with correct event type\n      expect(mockEmitEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          eventType: \"signMessageError\", // This specifically tests line 176\n          error: \"Signing failed\",\n          parameters: [request],\n        }),\n      );\n    });\n\n    it(\"should emit error analytics for eth_signTypedData_v4 method failures\", async () => {\n      const mockProvider = createMockProvider();\n      const provider = new EIP1193ProviderImpl(mockProvider);\n\n      const testError = new Error(\"Typed data signing failed\");\n      vi.mocked(mockProvider.request).mockRejectedValueOnce(testError);\n\n      const request = {\n        method: \"eth_signTypedData_v4\",\n        params: [{ domain: {}, types: {}, message: {} }],\n      };\n\n      await expect(provider.request(request)).rejects.toThrow(testError);\n\n      // Should emit error analytics with correct event type\n      expect(mockEmitEvent).toHaveBeenCalledWith(\n        expect.objectContaining({\n          eventType: \"signTypedDataError\", // This specifically tests line 170 & 177\n          error: \"Typed data signing failed\",\n          parameters: [request],\n        }),\n      );\n    });\n  });\n\n  describe(\"event handling\", () => {\n    it(\"should forward on() calls to the underlying provider if it supports events\", () => {\n      const mockProvider = createMockProvider() as SimpleEventRegistrar &\n        GenericEthereumProvider;\n      const provider = new EIP1193ProviderImpl(mockProvider);\n\n      const listener = vi.fn();\n      provider.on(\"accountsChanged\", listener);\n\n      expect(mockProvider.on).toHaveBeenCalledWith(\"accountsChanged\", listener);\n    });\n\n    it(\"should capture events handlers locally if the provider lacks event support\", () => {\n      const mockProvider = createMockProvider(false);\n      const provider = new EIP1193ProviderImpl(mockProvider);\n\n      // this passes because the wrapper has its own event emitter\n      provider.on(\"accountsChanged\", vi.fn());\n    });\n\n    it(\"should forward removeListener() calls to the underlying provider if it supports events\", () => {\n      const mockProvider = createMockProvider() as SimpleEventRegistrar &\n        GenericEthereumProvider;\n      const provider = new EIP1193ProviderImpl(mockProvider);\n\n      const listener = vi.fn();\n      provider.removeListener(\"chainChanged\", listener);\n\n      expect(mockProvider.removeListener).toHaveBeenCalledWith(\n        \"chainChanged\",\n        listener,\n      );\n    });\n\n    it(\"should remove listeners from the local EventEmitter if the provider lacks event support\", () => {\n      const mockProvider = createMockProvider(false);\n      const provider = new EIP1193ProviderImpl(mockProvider);\n\n      // this passes because the wrapper has its own event emitter\n      provider.removeListener(\"accountsChanged\", vi.fn());\n    });\n\n    it(\"should emit an event on disconnect\", () => {\n      const mockProvider = createMockProvider(false);\n      const provider = new EIP1193ProviderImpl(mockProvider);\n\n      const listener = vi.fn();\n      provider.on(\"disconnect\", listener);\n\n      provider.disconnect();\n\n      expect(listener).toHaveBeenCalled();\n    });\n  });\n});\n"]}
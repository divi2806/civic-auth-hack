{"version":3,"file":"EIP2255Provider.js","sourceRoot":"","sources":["../../../src/lib/ethereum/EIP2255Provider.ts"],"names":[],"mappings":"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","sourcesContent":["import type { GenericEthereumProvider } from \"../../types.js\";\nimport type { EIP1193RequestFn, Prettify } from \"viem\";\nimport { mergeObjectArrayWithoutDuplicates } from \"../utils.js\";\nimport { logger } from \"../logger.js\";\n\n/**\n * Caveat type for EIP-2255\n */\ntype Caveat = {\n  type: string;\n  value: unknown;\n};\n\n/**\n * Requested permissions object shape for EIP-2255\n * e.g. { eth_accounts: {}, foo_bar: { someField: 'someValue' } }\n */\nexport type RequestedPermissions = {\n  [permissionName: string]: Record<string, unknown>;\n};\n\n/**\n * Permission type for EIP-2255\n */\nexport type Permission = {\n  parentCapability: string; // e.g. \"eth_accounts\"\n  invoker?: string;\n  caveats: Caveat[];\n};\n\n/**\n * Define the EIP2255 request interface\n */\ntype EIP2255Schema = [\n  /**\n   * @description Returns the current set of permissions granted by the wallet.\n   * @example\n   * provider.request({ method: 'wallet_getPermissions' })\n   * // => [{ parentCapability: 'eth_accounts', ... }, ...]\n   */\n  {\n    Method: \"wallet_getPermissions\";\n    // no parameters\n    Parameters: undefined;\n    ReturnType: [];\n  },\n  /**\n   * @description Requests new permissions from the wallet.\n   * @example\n   * provider.request({\n   *   method: 'wallet_requestPermissions',\n   *   params: [{ eth_accounts: {} }],\n   * })\n   * // => [{ parentCapability: 'eth_accounts', caveats: { ... } }, ...]\n   */\n  {\n    Method: \"wallet_requestPermissions\";\n    Parameters: RequestedPermissions;\n    ReturnType: Permission[];\n  },\n\n  // These two are actually ERC-7715, but are used by metamask and therefore expected by viem/wagmi\n  {\n    Method: \"wallet_grantPermissions\";\n    Parameters: RequestedPermissions;\n    ReturnType: Permission[];\n  },\n  {\n    Method: \"wallet_revokePermissions\";\n    Parameters: RequestedPermissions;\n    ReturnType: Permission[];\n  },\n];\n// all possible Method values\ntype EIP2255Method = EIP2255Schema[number][\"Method\"];\n\nconst eip2255Methods: EIP2255Method[] = [\n  \"wallet_getPermissions\" as const,\n  \"wallet_requestPermissions\" as const,\n  // ERC-7715\n  \"wallet_grantPermissions\" as const,\n  \"wallet_revokePermissions\" as const,\n];\n\nexport type EIP2255Provider = Prettify<{\n  request: EIP1193RequestFn<EIP2255Schema>;\n}>;\n\nexport class EIP2255ProviderImpl\n  implements GenericEthereumProvider, EIP2255Provider\n{\n  private permissionsStore: Record<string, Permission> = {};\n\n  // Overloads for EIP-2255 methods\n  public async request(args: {\n    method: \"wallet_getPermissions\";\n    params?: [];\n  }): Promise<Permission[]>;\n  public async request(args: {\n    method: \"wallet_requestPermissions\";\n    params: [RequestedPermissions];\n  }): Promise<Permission[]>;\n  // Overloads for ERC-7715 methods\n  public async request(args: {\n    method: \"wallet_grantPermissions\";\n    params: [RequestedPermissions];\n  }): Promise<Permission[]>;\n  public async request(args: {\n    method: \"wallet_revokePermissions\";\n    params: [RequestedPermissions];\n  }): Promise<Permission[]>;\n\n  // Single implementation\n  // We define the implementation this way so that the class can implement\n  // the EIP2255Provider interface, which\n  // requires a generic request method\n  public async request(args: {\n    method: string;\n    params?: unknown[];\n  }): Promise<unknown> {\n    logger.web3.provider.debug(\"EIP2255ProviderImpl request args\", args);\n    const { method, params = [] } = args;\n\n    switch (method) {\n      case \"wallet_getPermissions\": {\n        return Object.values(this.permissionsStore);\n      }\n\n      case \"wallet_requestPermissions\":\n      case \"wallet_grantPermissions\": {\n        const requested = params[0] as RequestedPermissions;\n        for (const key of Object.keys(requested)) {\n          // construct the caveats array\n          const requestedElement = requested[key];\n          const requestedCaveatsArray: Caveat[] = Object.entries(\n            requestedElement ?? {},\n          ).map(([type, value]) => ({ type, value }));\n\n          // is there already a permission for this key?\n          const existingPermission = this.permissionsStore[key];\n          if (existingPermission) {\n            // if so, update it\n            this.permissionsStore[key] = {\n              ...existingPermission,\n              caveats: mergeObjectArrayWithoutDuplicates(\n                existingPermission.caveats,\n                requestedCaveatsArray,\n                (a, b) => a.type === b.type && a.value === b.value,\n              ),\n            };\n          } else {\n            // otherwise, create a new permission\n            this.permissionsStore[key] = {\n              parentCapability: key,\n              caveats: requestedCaveatsArray,\n            };\n          }\n        }\n        return Object.values(this.permissionsStore);\n      }\n      case \"wallet_revokePermissions\": {\n        const requested = params[0] as RequestedPermissions;\n        for (const key of Object.keys(requested)) {\n          // is there already a permission for this key?\n          const existingPermission = this.permissionsStore[key];\n          if (existingPermission) {\n            // if so, remove it\n            delete this.permissionsStore[key];\n          }\n        }\n        return Object.values(this.permissionsStore);\n      }\n    }\n\n    // If the method is not recognized, throw an error\n    throw new Error(`Method not supported: ${method}`);\n  }\n}\n\n/**\n * Given an eip1193 provider, augment it to support EIP-2255 methods\n * @param underlying - an EIP-1193 provider that has a `request` method\n * @returns a provider that supports EIP-2255 methods alongside EIP-1193 methods\n */\nexport const wrapWithEIP2255 = <T extends GenericEthereumProvider>(\n  underlying: T,\n): T & EIP2255Provider => {\n  const eip2255Impl = new EIP2255ProviderImpl();\n\n  return new Proxy(underlying as T & EIP2255Provider, {\n    get(target, prop, receiver) {\n      // If the property is one of the EIP-2255 methods, call eip2255Impl, otherwise call the underlying provider\n      if (prop === \"request\") {\n        return function (args: { method: string; params?: unknown[] }) {\n          logger.web3.provider.debug(\"wrapWithEIP2255 proxy args\", args);\n          const { method, params } = args;\n\n          if (eip2255Methods.includes(method as EIP2255Method)) {\n            return eip2255Impl.request({\n              method: method as EIP2255Method,\n              params,\n            } as Parameters<EIP1193RequestFn<EIP2255Schema>>);\n          } else {\n            // Otherwise pass to underlying\n            return target.request(args);\n          }\n        };\n      }\n\n      // Fallback for everything else\n      return Reflect.get(target, prop, receiver);\n    },\n\n    set() {\n      // Setting properties is not allowed\n      throw new Error(\"Unauthorized operation\");\n    },\n  });\n};\n"]}
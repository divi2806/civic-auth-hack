import { type EIP1193EventMap, type EIP1193Provider, type SendTransactionParameters, type SignableMessage, type SignTypedDataParameters } from "viem";
import type { GenericEthereumProvider } from "../../types.js";
import type { EIP2255Provider } from "./EIP2255Provider.js";
import type { EventRegistrar } from "../lazy/LazyProxy.js";
export type TypedEthereumProvider = EIP1193Provider & DisconnectableProvider & EIP2255Provider & EventRegistrar<EIP1193EventMap>;
export interface DisconnectableProvider {
    disconnect(): void;
}
export declare class EIP1193ProviderImpl implements EIP1193Provider, DisconnectableProvider {
    private underlying;
    private localEventEmitter;
    constructor(provider: GenericEthereumProvider);
    /** Overloads for typed methods */
    request(args: {
        method: "eth_accounts";
        params?: unknown[];
    }): Promise<string[]>;
    request(args: {
        method: "eth_chainId";
        params?: unknown[];
    }): Promise<string>;
    request(args: {
        method: "eth_sendTransaction";
        params: [SendTransactionParameters];
    }): Promise<string>;
    request(args: {
        method: "eth_sign" | "personal_sign";
        params: [SignableMessage];
    }): Promise<string>;
    request(args: {
        method: "eth_signTypedData" | "eth_signTypedData_v4";
        params: [SignTypedDataParameters];
    }): Promise<string>;
    /** Fallback for any other method */
    request(args: {
        method: string;
        params?: unknown[];
    }): Promise<unknown>;
    disconnect(): void;
    on<Event extends keyof EIP1193EventMap>(event: Event, listener: EIP1193EventMap[Event]): void;
    removeListener<Event extends keyof EIP1193EventMap>(event: Event, listener: EIP1193EventMap[Event]): void;
}
//# sourceMappingURL=EIP1193ProviderImpl.d.ts.map
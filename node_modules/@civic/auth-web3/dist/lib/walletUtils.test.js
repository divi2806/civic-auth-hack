import { describe, expect, it, vi } from "vitest";
import { getEthereumProviderRPCsFromConfig, userHasWallet, } from "./walletUtils.js";
vi.mock(import("viem/chains"), async (importOriginal) => {
    const actual = await importOriginal();
    return {
        mainnet: actual.mainnet,
        polygon: actual.polygon,
    };
});
describe("walletUtils", () => {
    describe("userHasWallet", () => {
        it("should return false if the user does not have a wallet address", () => {
            // Arrange
            const userContext = {
                walletAddress: undefined,
            };
            // Act
            const result = userHasWallet(userContext);
            // Assert
            expect(result).toBe(false);
        });
        it("should return true if the user has a wallet address", () => {
            // Arrange
            const userContext = {
                ethereum: {
                    address: "walletAddress",
                },
                user: {},
            };
            // Act
            const result = userHasWallet(userContext);
            // Assert
            expect(result).toBe(true);
        });
    });
    describe("getEthereumProviderRPCsFromConfig", () => {
        const dummyHttpRpc = "https://dummy-http-url.com";
        const dummyWsRpc = "wss://dummy-ws-url.com";
        const dummyChain = {
            id: 1,
            name: "dummy",
            nativeCurrency: {
                name: "dummy",
                symbol: "DUM",
                decimals: 18,
            },
            rpcUrls: {
                default: {
                    http: [dummyHttpRpc],
                    webSocket: [dummyWsRpc],
                },
            },
        };
        it("should return explicit RPCs from config if provided", () => {
            const explicitRPCs = {
                1: {
                    http: ["https://explicit-http.com"],
                    webSocket: ["wss://explicit-ws.com"],
                },
            };
            const config = {
                endpoints: { rpcs: explicitRPCs },
                initialChain: dummyChain,
            };
            const result = getEthereumProviderRPCsFromConfig(config);
            expect(result).toEqual(explicitRPCs);
        });
        it("should throw an error on empty ws rpc arrays (should be undefined in that case)", () => {
            const chainWithMissingWsRpcs = {
                id: 2,
                name: "another",
                nativeCurrency: {
                    name: "another",
                    symbol: "ANO",
                    decimals: 18,
                },
                rpcUrls: {
                    default: {
                        http: ["https://explicit-http.com"],
                        // cast here - we want a test for this as it is typically out of our control (options are passed at runtime)
                        webSocket: [],
                    },
                },
            };
            const config = {
                initialChain: chainWithMissingWsRpcs,
            };
            const shouldThrow = () => getEthereumProviderRPCsFromConfig(config);
            expect(shouldThrow).toThrowError();
        });
        it("should return default RPCs when no explicit RPCs are provided in config", () => {
            const config = {
                endpoints: {},
                chains: [dummyChain],
            };
            const result = getEthereumProviderRPCsFromConfig(config);
            expect(result).toEqual({
                1: {
                    http: [dummyHttpRpc],
                    webSocket: [dummyWsRpc],
                },
            });
        });
        it("should merge initialChain and config.chains, ensuring unique chains", () => {
            const anotherHttpRpc = "https://another-http-url.com";
            const anotherWsRpc = "wss://another-ws-url.com";
            const anotherChain = {
                id: 2,
                name: "another",
                nativeCurrency: {
                    name: "another",
                    symbol: "ANO",
                    decimals: 18,
                },
                rpcUrls: {
                    default: {
                        http: [anotherHttpRpc],
                        webSocket: [anotherWsRpc],
                    },
                },
            };
            const config = {
                endpoints: {},
                chains: [dummyChain, anotherChain],
                initialChain: dummyChain,
            };
            const result = getEthereumProviderRPCsFromConfig(config);
            expect(result).toEqual({
                1: {
                    http: [dummyHttpRpc],
                    webSocket: [dummyWsRpc],
                },
                2: {
                    http: [anotherHttpRpc],
                    webSocket: [anotherWsRpc],
                },
            });
        });
        it("should only return the initial chain RPCs if config.chains is empty", () => {
            const config = {
                endpoints: {},
                chains: [],
                initialChain: dummyChain,
            };
            const result = getEthereumProviderRPCsFromConfig(config);
            expect(result).toEqual({
                1: {
                    http: [dummyHttpRpc],
                    webSocket: [dummyWsRpc],
                },
            });
        });
        it("should return all viem chains if no config is provided", () => {
            const config = {
                endpoints: {},
            };
            const result = getEthereumProviderRPCsFromConfig(config);
            expect(result).toEqual({
                1: {
                    // the default viem http rpc for mainnet
                    http: [expect.any(String)],
                    // viem does not provide a default ws rpc for mainnet
                    webSocket: undefined,
                },
                137: {
                    // the default viem http rpc for polygon
                    http: [expect.any(String)],
                    // viem does not provide a default ws rpc for polygon
                    webSocket: undefined,
                },
            });
        });
    });
});
//# sourceMappingURL=walletUtils.test.js.map
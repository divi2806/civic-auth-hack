{"version":3,"file":"standardAdapter.js","sourceRoot":"","sources":["../../../../src/lib/solana/walletAdapter/standardAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  PublicKey,\n  SendOptions,\n  Transaction,\n  TransactionSignature,\n  VersionedTransaction,\n  Connection,\n} from \"@solana/web3.js\";\nimport type {\n  SolanaSignInInput,\n  SolanaSignInOutput,\n} from \"@solana/wallet-standard-features\";\nimport type { CivicWallet, CivicWalletEvent } from \"./window.js\";\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\nimport { Transaction as LegacyTransaction } from \"@solana/web3.js\";\nimport type { MetakeepSolanaWalletAdapter } from \"../../metakeep/solana/MetakeepSolanaWalletAdapter.js\";\n\n/**\n * MetakeepWalletStandardAdapter implements the Solana Wallet Standard interface,\n * by delegating most functionality to an underlying MetakeepSolanaWalletAdapter instance,\n * with appropriate adaptations.\n *\n * It accepts a Solana Connection to support sending transactions.\n */\nexport class MetakeepWalletStandardAdapter implements CivicWallet {\n  /**\n   * Constructor takes a delegate wallet adapter and a Solana connection.\n   * @param delegate - The underlying MetakeepSolanaWalletAdapter instance.\n   * @param connection - A Solana Connection instance used for sending transactions.\n   */\n  constructor(\n    private delegate: MetakeepSolanaWalletAdapter,\n    private connection: Connection,\n  ) {}\n\n  /**\n   * Getter for the publicKey property.\n   * Returns the delegate's publicKey if connected, otherwise null.\n   */\n  get publicKey(): PublicKey | null {\n    return this.delegate.connected ? this.delegate.publicKey : null;\n  }\n\n  /**\n   * Connects the wallet.\n   * Delegates the connection process to the underlying adapter.\n   * After connecting, returns an object containing the publicKey.\n   *\n   * @param options - Optional connection options.\n   * @returns A promise resolving to an object containing the publicKey.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async connect(options?: {\n    onlyIfTrusted?: boolean;\n  }): Promise<{ publicKey: PublicKey }> {\n    // Await the delegate's connect method.\n    await this.delegate.connect();\n    // Return the publicKey wrapped in an object.\n    return { publicKey: this.delegate.publicKey };\n  }\n\n  /**\n   * Disconnects the wallet.\n   * Simply delegates to the underlying adapter's disconnect method.\n   */\n  async disconnect(): Promise<void> {\n    await this.delegate.disconnect();\n  }\n\n  /**\n   * Signs and sends a transaction.\n   * First, the transaction is signed using the delegate's signTransaction method.\n   * Then, the signed transaction is sent via the provided Solana connection.\n   *\n   * Handles both legacy and versioned transactions.\n   *\n   * @param transaction - The transaction to sign and send.\n   * @param options - Optional send options.\n   * @returns A promise resolving to an object containing the transaction signature.\n   */\n  async signAndSendTransaction<T extends Transaction | VersionedTransaction>(\n    transaction: T,\n    options?: SendOptions,\n  ): Promise<{ signature: TransactionSignature }> {\n    // Ensure the wallet is connected.\n    if (!this.delegate.connected) throw new WalletNotConnectedError();\n\n    // Delegate the signing process.\n    const signedTx = await this.delegate.signTransaction(transaction);\n\n    let signature: TransactionSignature;\n\n    // Check the type of the transaction to handle sending appropriately.\n    if (signedTx instanceof LegacyTransaction) {\n      // For legacy Transactions, assume no extra signers are needed.\n      signature = await this.connection.sendTransaction(signedTx, [], options);\n    } else {\n      // For VersionedTransactions, any extra signatures are applied directly to the transaction beforehand\n      signature = await this.connection.sendTransaction(signedTx, options);\n    }\n\n    // Return the signature wrapped in an object.\n    return { signature };\n  }\n\n  /**\n   * Signs a transaction.\n   * Simply delegates the signing process to the underlying adapter.\n   *\n   * @param transaction - The transaction to sign.\n   * @returns A promise resolving to the signed transaction.\n   */\n  async signTransaction<T extends Transaction | VersionedTransaction>(\n    transaction: T,\n  ): Promise<T> {\n    return this.delegate.signTransaction(transaction);\n  }\n\n  /**\n   * Signs all transactions in an array.\n   * Delegates each signing to the underlying adapter.\n   *\n   * @param transactions - An array of transactions to sign.\n   * @returns A promise resolving to an array of signed transactions.\n   */\n  async signAllTransactions<T extends Transaction | VersionedTransaction>(\n    transactions: T[],\n  ): Promise<T[]> {\n    return Promise.all(\n      transactions.map((tx) => this.delegate.signTransaction(tx)),\n    );\n  }\n\n  /**\n   * Signs an arbitrary message.\n   * Delegates the signing to the underlying adapter and wraps the result.\n   *\n   * @param message - The message to sign as a Uint8Array.\n   * @returns A promise resolving to an object containing the signature.\n   */\n  async signMessage(message: Uint8Array): Promise<{ signature: Uint8Array }> {\n    const signature = await this.delegate.signMessage(message);\n    return { signature };\n  }\n\n  /**\n   * Performs a sign-in operation.\n   * Delegates the operation to the underlying adapter.\n   *\n   * @param input - Optional sign-in input parameters.\n   * @returns A promise resolving to the sign-in output.\n   */\n  async signIn(input?: SolanaSignInInput): Promise<SolanaSignInOutput> {\n    return this.delegate.signIn(input);\n  }\n\n  /**\n   * Registers an event listener.\n   *\n   * For the 'connect' and 'disconnect' events, the listener is forwarded to the delegate.\n   * For the 'accountChanged' event, this method does nothing because the account never changes\n   * in this implementation.\n   *\n   * @param event - The name of the event to listen for.\n   * @param listener - The callback function to invoke when the event is emitted.\n   * @param context - Optional context for the listener.\n   */\n  on<E extends keyof CivicWalletEvent>(\n    event: E,\n    listener: CivicWalletEvent[E],\n    context?: unknown,\n  ): void {\n    if (event === \"accountChanged\") {\n      // Account never changes in this implementation.\n      // So, registering a listener for 'accountChanged' is a no-op.\n      console.debug(\n        `Listener for '${event}' registered, but will never be called because the account is immutable in this implementation.`,\n      );\n    } else {\n      // For 'connect' and 'disconnect', forward the event registration to the delegate.\n      // Type assertion is used here because the delegate's event keys differ slightly.\n      this.delegate.on(event, listener, context);\n    }\n  }\n\n  /**\n   * Unregisters an event listener.\n   *\n   * For the 'connect' and 'disconnect' events, the listener is removed from the delegate.\n   * For the 'accountChanged' event, this method does nothing because it was a no-op.\n   *\n   * @param event - The name of the event.\n   * @param listener - The listener function to remove.\n   * @param context - Optional context for the listener.\n   */\n  off<E extends keyof CivicWalletEvent>(\n    event: E,\n    listener: CivicWalletEvent[E],\n    context?: unknown,\n  ): void {\n    if (event === \"accountChanged\") {\n      // No-op for 'accountChanged' as it never fires.\n      console.debug(\n        `Listener for '${event}' removed, though it was a no-op because the account never changes.`,\n      );\n    } else {\n      // Forward removal for 'connect' and 'disconnect' to the delegate.\n      this.delegate.off(event, listener, context);\n    }\n  }\n\n  removeListener<E extends keyof CivicWalletEvent>(\n    event: E,\n    listener: CivicWalletEvent[E],\n    context?: unknown,\n  ) {\n    return this.off(event, listener, context);\n  }\n}\n"]}
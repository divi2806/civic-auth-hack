{"version":3,"file":"standardAdapter.test.js","sourceRoot":"","sources":["../../../../src/lib/solana/walletAdapter/standardAdapter.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { beforeEach, describe, expect, it, vi } from \"vitest\";\nimport { MetakeepWalletStandardAdapter } from \"./standardAdapter.js\";\nimport { WalletNotConnectedError } from \"@solana/wallet-adapter-base\";\nimport {\n  Transaction as LegacyTransaction,\n  PublicKey,\n  VersionedTransaction,\n  type Connection,\n  Keypair,\n} from \"@solana/web3.js\";\nimport type { MetakeepSolanaWalletAdapter } from \"../../metakeep/solana/MetakeepSolanaWalletAdapter.js\";\n\ndescribe(\"MetakeepWalletStandardAdapter\", () => {\n  // Test doubles\n  let stubDelegate: MetakeepSolanaWalletAdapter;\n  let stubConnection: Connection;\n  let standardAdapter: MetakeepWalletStandardAdapter;\n  let dummyPublicKey: PublicKey;\n\n  beforeEach(() => {\n    // Create dummy PublicKey\n    dummyPublicKey = Keypair.generate().publicKey;\n\n    // Create stub for delegate wallet adapter\n    stubDelegate = {\n      publicKey: dummyPublicKey,\n      connected: true,\n      connect: vi.fn().mockResolvedValue(undefined),\n      disconnect: vi.fn().mockResolvedValue(undefined),\n      signTransaction: vi.fn().mockImplementation((tx) => Promise.resolve(tx)),\n      signAllTransactions: vi.fn(),\n      signMessage: vi.fn().mockResolvedValue(new Uint8Array([1, 2, 3])),\n      signIn: vi.fn().mockResolvedValue({ accounts: [] }),\n      on: vi.fn(),\n      off: vi.fn(),\n    } as unknown as MetakeepSolanaWalletAdapter;\n\n    // Create stub for Solana connection\n    stubConnection = {\n      sendTransaction: vi.fn().mockResolvedValue(\"test-signature\"),\n    } as unknown as Connection;\n\n    // Create the adapter under test\n    standardAdapter = new MetakeepWalletStandardAdapter(\n      stubDelegate,\n      stubConnection,\n    );\n  });\n\n  it(\"should return the delegate's publicKey when connected\", () => {\n    expect(standardAdapter.publicKey).toBe(dummyPublicKey);\n  });\n\n  it(\"should return null for publicKey when not connected\", () => {\n    // the stub delegate lets us manually change its connected status - work around the typescript complaint by casting\n    (stubDelegate as { connected: boolean }).connected = false;\n    expect(standardAdapter.publicKey).toBeNull();\n  });\n\n  it(\"should delegate connect and return the publicKey\", async () => {\n    const result = await standardAdapter.connect();\n\n    expect(stubDelegate.connect).toHaveBeenCalledOnce();\n    expect(result).toEqual({ publicKey: dummyPublicKey });\n  });\n\n  it(\"should delegate disconnect\", async () => {\n    await standardAdapter.disconnect();\n\n    expect(stubDelegate.disconnect).toHaveBeenCalledOnce();\n  });\n\n  it(\"should sign and send a legacy transaction\", async () => {\n    // Create a stub for a legacy transaction\n    const stubTransaction = {\n      serialize: () => new Uint8Array([1, 2, 3]),\n    } as unknown as LegacyTransaction;\n\n    // Sign and send transaction\n    const result =\n      await standardAdapter.signAndSendTransaction(stubTransaction);\n\n    // Verify delegate signed the transaction\n    expect(stubDelegate.signTransaction).toHaveBeenCalledWith(stubTransaction);\n\n    // Verify connection sent the transaction\n    expect(stubConnection.sendTransaction).toHaveBeenCalled();\n\n    // Verify correct result\n    expect(result).toEqual({ signature: \"test-signature\" });\n  });\n\n  it(\"should sign and send a versioned transaction\", async () => {\n    // Create a stub for a versioned transaction\n    const stubVersionedTx = {\n      serialize: () => new Uint8Array([1, 2, 3]),\n    } as unknown as VersionedTransaction;\n\n    // Sign and send transaction\n    const result =\n      await standardAdapter.signAndSendTransaction(stubVersionedTx);\n\n    // Verify delegate signed the transaction\n    expect(stubDelegate.signTransaction).toHaveBeenCalledWith(stubVersionedTx);\n\n    // Verify connection sent the transaction (with different arguments)\n    expect(stubConnection.sendTransaction).toHaveBeenCalled();\n\n    // Verify correct result\n    expect(result).toEqual({ signature: \"test-signature\" });\n  });\n\n  it(\"should throw WalletNotConnectedError when not connected\", async () => {\n    // the stub delegate lets us manually change its connected status - work around the typescript complaint by casting\n    (stubDelegate as { connected: boolean }).connected = false;\n\n    const stubTransaction = {} as LegacyTransaction;\n\n    await expect(\n      standardAdapter.signAndSendTransaction(stubTransaction),\n    ).rejects.toThrow(WalletNotConnectedError);\n  });\n\n  it(\"should delegate signTransaction\", async () => {\n    const stubTransaction = {} as LegacyTransaction;\n\n    await standardAdapter.signTransaction(stubTransaction);\n\n    expect(stubDelegate.signTransaction).toHaveBeenCalledWith(stubTransaction);\n  });\n\n  it(\"should delegate signAllTransactions\", async () => {\n    const stubTransactions = [{} as LegacyTransaction, {} as LegacyTransaction];\n\n    // Set up the delegate to return specific results for each transaction\n    stubDelegate.signTransaction = vi\n      .fn()\n      .mockResolvedValueOnce(\"signed1\")\n      .mockResolvedValueOnce(\"signed2\");\n\n    const result = await standardAdapter.signAllTransactions(stubTransactions);\n\n    // Verify each transaction was signed\n    expect(stubDelegate.signTransaction).toHaveBeenCalledTimes(2);\n    expect(result).toEqual([\"signed1\", \"signed2\"]);\n  });\n\n  it(\"should delegate signMessage and wrap the result\", async () => {\n    const message = new Uint8Array([4, 5, 6]);\n\n    const result = await standardAdapter.signMessage(message);\n\n    expect(stubDelegate.signMessage).toHaveBeenCalledWith(message);\n    expect(result).toEqual({ signature: new Uint8Array([1, 2, 3]) });\n  });\n\n  it(\"should delegate signIn\", async () => {\n    const input = { domain: \"test.com\" };\n\n    await standardAdapter.signIn(input);\n\n    expect(stubDelegate.signIn).toHaveBeenCalledWith(input);\n  });\n\n  it(\"should forward connect and disconnect events to delegate\", () => {\n    const listener = vi.fn();\n    const context = {};\n\n    standardAdapter.on(\"connect\", listener, context);\n    standardAdapter.on(\"disconnect\", listener, context);\n\n    expect(stubDelegate.on).toHaveBeenCalledTimes(2);\n    expect(stubDelegate.on).toHaveBeenCalledWith(\"connect\", listener, context);\n    expect(stubDelegate.on).toHaveBeenCalledWith(\n      \"disconnect\",\n      listener,\n      context,\n    );\n  });\n\n  it(\"should not forward accountChanged events to delegate\", () => {\n    const listener = vi.fn();\n\n    standardAdapter.on(\"accountChanged\", listener);\n\n    // Verify no delegation for accountChanged\n    expect(stubDelegate.on).not.toHaveBeenCalledWith(\n      \"accountChanged\",\n      listener,\n    );\n  });\n\n  it(\"should forward connect and disconnect event removals to delegate\", () => {\n    const listener = vi.fn();\n    const context = {};\n\n    standardAdapter.off(\"connect\", listener, context);\n    standardAdapter.off(\"disconnect\", listener, context);\n\n    expect(stubDelegate.off).toHaveBeenCalledTimes(2);\n    expect(stubDelegate.off).toHaveBeenCalledWith(\"connect\", listener, context);\n    expect(stubDelegate.off).toHaveBeenCalledWith(\n      \"disconnect\",\n      listener,\n      context,\n    );\n  });\n\n  it(\"should not forward accountChanged event removals to delegate\", () => {\n    const listener = vi.fn();\n\n    standardAdapter.off(\"accountChanged\", listener);\n\n    // Verify no delegation for accountChanged\n    expect(stubDelegate.off).not.toHaveBeenCalledWith(\n      \"accountChanged\",\n      listener,\n    );\n  });\n\n  it(\"should use removeListener as an alias for off\", () => {\n    const listener = vi.fn();\n    const offSpy = vi.spyOn(standardAdapter, \"off\");\n\n    standardAdapter.removeListener(\"connect\", listener);\n\n    expect(offSpy).toHaveBeenCalledWith(\"connect\", listener, undefined);\n  });\n});\n"]}
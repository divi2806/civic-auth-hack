{"version":3,"file":"window.js","sourceRoot":"","sources":["../../../../src/lib/solana/walletAdapter/window.ts"],"names":[],"mappings":"AAAA,OAAO,EAGN,MAAM,kCAAkC,CAAC","sourcesContent":["import {\n  type SolanaSignInInput,\n  type SolanaSignInOutput,\n} from \"@solana/wallet-standard-features\";\nimport type {\n  PublicKey,\n  SendOptions,\n  Transaction,\n  TransactionSignature,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\n\nexport interface CivicWalletEvent {\n  connect(...args: unknown[]): unknown;\n  disconnect(...args: unknown[]): unknown;\n  accountChanged(...args: unknown[]): unknown;\n}\n\nexport interface CivicWalletEventEmitter {\n  on<E extends keyof CivicWalletEvent>(\n    event: E,\n    listener: CivicWalletEvent[E],\n    context?: unknown,\n  ): void;\n  off<E extends keyof CivicWalletEvent>(\n    event: E,\n    listener: CivicWalletEvent[E],\n    context?: unknown,\n  ): void;\n  // Alias for off to allow compatibility between solana and ethereum wallets\n  removeListener<E extends keyof CivicWalletEvent>(\n    event: E,\n    listener: CivicWalletEvent[E],\n    context?: unknown,\n  ): void;\n}\n\nexport interface CivicWallet extends CivicWalletEventEmitter {\n  publicKey: PublicKey | null;\n  connect(options?: {\n    onlyIfTrusted?: boolean;\n  }): Promise<{ publicKey: PublicKey }>;\n  disconnect(): Promise<void>;\n  signAndSendTransaction<T extends Transaction | VersionedTransaction>(\n    transaction: T,\n    options?: SendOptions,\n  ): Promise<{ signature: TransactionSignature }>;\n  signTransaction<T extends Transaction | VersionedTransaction>(\n    transaction: T,\n  ): Promise<T>;\n  signAllTransactions<T extends Transaction | VersionedTransaction>(\n    transactions: T[],\n  ): Promise<T[]>;\n  signMessage(message: Uint8Array): Promise<{ signature: Uint8Array }>;\n  signIn(input?: SolanaSignInInput): Promise<SolanaSignInOutput>;\n}\n"]}
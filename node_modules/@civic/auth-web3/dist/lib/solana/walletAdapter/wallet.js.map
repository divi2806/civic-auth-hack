{"version":3,"file":"wallet.js","sourceRoot":"","sources":["../../../../src/lib/solana/walletAdapter/wallet.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  SolanaSignAndSendTransaction,\n  type SolanaSignAndSendTransactionFeature,\n  type SolanaSignAndSendTransactionMethod,\n  type SolanaSignAndSendTransactionOutput,\n  SolanaSignIn,\n  type SolanaSignInFeature,\n  type SolanaSignInMethod,\n  type SolanaSignInOutput,\n  SolanaSignMessage,\n  type SolanaSignMessageFeature,\n  type SolanaSignMessageMethod,\n  type SolanaSignMessageOutput,\n  SolanaSignTransaction,\n  type SolanaSignTransactionFeature,\n  type SolanaSignTransactionMethod,\n  type SolanaSignTransactionOutput,\n} from \"@solana/wallet-standard-features\";\nimport { VersionedTransaction } from \"@solana/web3.js\";\nimport type { Wallet } from \"@wallet-standard/base\";\nimport {\n  StandardConnect,\n  type StandardConnectFeature,\n  type StandardConnectMethod,\n  StandardDisconnect,\n  type StandardDisconnectFeature,\n  type StandardDisconnectMethod,\n  StandardEvents,\n  type StandardEventsFeature,\n  type StandardEventsListeners,\n  type StandardEventsNames,\n  type StandardEventsOnMethod,\n} from \"@wallet-standard/features\";\nimport bs58 from \"bs58\";\nimport { CivicWalletAccount } from \"./account.js\";\nimport type { SolanaChain } from \"./solana.js\";\nimport { isSolanaChain, SOLANA_CHAINS } from \"./solana.js\";\nimport { bytesEqual } from \"./util.js\";\nimport type { CivicWallet } from \"./window.js\";\nimport { ICON } from \"../../walletUtils.js\";\nimport { withAnalytics } from \"../../analytics/index.js\";\n\nexport const CivicWalletNamespace = \"civicWallet:\";\n\nexport type CivicWalletFeature = {\n  [CivicWalletNamespace]: {\n    civicWallet: CivicWallet;\n  };\n};\n\nexport class CivicWalletAdapter implements Wallet {\n  readonly #listeners: {\n    [E in StandardEventsNames]?: StandardEventsListeners[E][];\n  } = {};\n  readonly #version = \"1.0.0\" as const;\n  readonly #name = \"Civic Wallet\" as const;\n  readonly #icon = ICON;\n  #account: CivicWalletAccount | null = null;\n  readonly #civicWallet: CivicWallet;\n\n  get version() {\n    return this.#version;\n  }\n\n  get name() {\n    return this.#name;\n  }\n\n  get icon() {\n    return this.#icon;\n  }\n\n  get chains() {\n    return SOLANA_CHAINS.slice();\n  }\n\n  get features(): StandardConnectFeature &\n    StandardDisconnectFeature &\n    StandardEventsFeature &\n    SolanaSignAndSendTransactionFeature &\n    SolanaSignTransactionFeature &\n    SolanaSignMessageFeature &\n    SolanaSignInFeature &\n    CivicWalletFeature {\n    return {\n      [StandardConnect]: {\n        version: \"1.0.0\",\n        connect: this.#connect,\n      },\n      [StandardDisconnect]: {\n        version: \"1.0.0\",\n        disconnect: this.#disconnect,\n      },\n      [StandardEvents]: {\n        version: \"1.0.0\",\n        on: this.#on,\n      },\n      [SolanaSignAndSendTransaction]: {\n        version: \"1.0.0\",\n        supportedTransactionVersions: [\"legacy\", 0],\n        signAndSendTransaction: this.#signAndSendTransaction,\n      },\n      [SolanaSignTransaction]: {\n        version: \"1.0.0\",\n        supportedTransactionVersions: [\"legacy\", 0],\n        signTransaction: this.#signTransaction,\n      },\n      [SolanaSignMessage]: {\n        version: \"1.0.0\",\n        signMessage: this.#signMessage,\n      },\n      [SolanaSignIn]: {\n        version: \"1.0.0\",\n        signIn: this.#signIn,\n      },\n      [CivicWalletNamespace]: {\n        civicWallet: this.#civicWallet,\n      },\n    };\n  }\n\n  get accounts() {\n    return this.#account ? [this.#account] : [];\n  }\n\n  constructor(civicWallet: CivicWallet) {\n    if (new.target === CivicWalletAdapter) {\n      Object.freeze(this);\n    }\n\n    this.#civicWallet = civicWallet;\n\n    civicWallet.on(\"connect\", this.#connected, this);\n    civicWallet.on(\"disconnect\", this.#disconnected, this);\n    civicWallet.on(\"accountChanged\", this.#reconnected, this);\n\n    this.#connected();\n  }\n\n  #on: StandardEventsOnMethod = (event, listener) => {\n    if (this.#listeners[event]) {\n      this.#listeners[event].push(listener);\n    } else {\n      this.#listeners[event] = [listener];\n    }\n    return (): void => this.#off(event, listener);\n  };\n\n  #emit<E extends StandardEventsNames>(\n    event: E,\n    ...args: Parameters<StandardEventsListeners[E]>\n  ): void {\n    // eslint-disable-next-line prefer-spread\n    this.#listeners[event]?.forEach((listener) => listener.apply(null, args));\n  }\n\n  #off<E extends StandardEventsNames>(\n    event: E,\n    listener: StandardEventsListeners[E],\n  ): void {\n    this.#listeners[event] = this.#listeners[event]?.filter(\n      (existingListener) => listener !== existingListener,\n    );\n  }\n\n  #connected = () => {\n    const address = this.#civicWallet.publicKey?.toBase58();\n    if (address) {\n      const publicKey = this.#civicWallet.publicKey!.toBytes();\n\n      const account = this.#account;\n      if (\n        !account ||\n        account.address !== address ||\n        !bytesEqual(account.publicKey, publicKey)\n      ) {\n        this.#account = new CivicWalletAccount({ address, publicKey });\n        this.#emit(\"change\", { accounts: this.accounts });\n      }\n    }\n  };\n\n  #disconnected = () => {\n    if (this.#account) {\n      this.#account = null;\n      this.#emit(\"change\", { accounts: this.accounts });\n    }\n  };\n\n  #reconnected = () => {\n    if (this.#civicWallet.publicKey) {\n      this.#connected();\n    } else {\n      this.#disconnected();\n    }\n  };\n\n  #connect: StandardConnectMethod = async ({ silent } = {}) => {\n    if (!this.#account) {\n      await this.#civicWallet.connect(\n        silent ? { onlyIfTrusted: true } : undefined,\n      );\n    }\n\n    this.#connected();\n\n    return { accounts: this.accounts };\n  };\n\n  #disconnect: StandardDisconnectMethod = async () => {\n    await this.#civicWallet.disconnect();\n  };\n\n  #signAndSendTransaction: SolanaSignAndSendTransactionMethod = async (\n    ...inputs\n  ) => {\n    // Define the core transaction function without analytics\n    const sendTransaction = async () => {\n      if (!this.#account) throw new Error(\"not connected\");\n\n      const outputs: SolanaSignAndSendTransactionOutput[] = [];\n\n      if (inputs.length === 1) {\n        const { transaction, account, chain, options } = inputs[0]!;\n        const {\n          minContextSlot,\n          preflightCommitment,\n          skipPreflight,\n          maxRetries,\n        } = options ?? {};\n        if (account !== this.#account) throw new Error(\"invalid account\");\n        if (!isSolanaChain(chain)) throw new Error(\"invalid chain\");\n\n        const { signature } = await this.#civicWallet.signAndSendTransaction(\n          VersionedTransaction.deserialize(transaction),\n          {\n            preflightCommitment,\n            minContextSlot,\n            maxRetries,\n            skipPreflight,\n          },\n        );\n\n        outputs.push({ signature: bs58.decode(signature) });\n      } else if (inputs.length > 1) {\n        for (const input of inputs) {\n          outputs.push(...(await this.#signAndSendTransaction(input)));\n        }\n      }\n\n      return outputs;\n    };\n\n    // Wrap with analytics and execute - pass inputs as analytics parameters\n    return withAnalytics(\n      sendTransaction,\n      \"signTransaction\",\n      \"solana\",\n      inputs as unknown as readonly unknown[],\n    )();\n  };\n\n  #signTransaction: SolanaSignTransactionMethod = async (...inputs) => {\n    // Define the core transaction signing function without analytics\n    const signTransaction = async () => {\n      if (!this.#account) throw new Error(\"not connected\");\n\n      const outputs: SolanaSignTransactionOutput[] = [];\n\n      if (inputs.length === 1) {\n        const { transaction, account, chain } = inputs[0]!;\n        if (account !== this.#account) throw new Error(\"invalid account\");\n        if (chain && !isSolanaChain(chain)) throw new Error(\"invalid chain\");\n\n        const signedTransaction = await this.#civicWallet.signTransaction(\n          VersionedTransaction.deserialize(transaction),\n        );\n        const serializedTransaction = signedTransaction.serialize();\n\n        outputs.push({ signedTransaction: serializedTransaction });\n      } else if (inputs.length > 1) {\n        let chain: SolanaChain | undefined = undefined;\n        for (const input of inputs) {\n          if (input.account !== this.#account)\n            throw new Error(\"invalid account\");\n          if (input.chain) {\n            if (!isSolanaChain(input.chain)) throw new Error(\"invalid chain\");\n            if (chain) {\n              if (input.chain !== chain) throw new Error(\"conflicting chain\");\n            } else {\n              chain = input.chain;\n            }\n          }\n        }\n\n        const transactions = inputs.map(({ transaction }) =>\n          VersionedTransaction.deserialize(transaction),\n        );\n\n        const signedTransactions =\n          await this.#civicWallet.signAllTransactions(transactions);\n\n        outputs.push(\n          ...signedTransactions.map((signedTransaction) => {\n            const serializedTransaction = signedTransaction.serialize();\n            return { signedTransaction: serializedTransaction };\n          }),\n        );\n      }\n\n      return outputs;\n    };\n\n    // Wrap with analytics and execute - pass inputs as analytics parameters\n    return withAnalytics(\n      signTransaction,\n      \"signTransaction\",\n      \"solana\",\n      inputs as unknown as readonly unknown[],\n    )();\n  };\n\n  #signMessage: SolanaSignMessageMethod = async (...inputs) => {\n    // Define the core message signing function without analytics\n    const signMessage = async () => {\n      if (!this.#account) throw new Error(\"not connected\");\n\n      const outputs: SolanaSignMessageOutput[] = [];\n\n      if (inputs.length === 1) {\n        const { message, account } = inputs[0]!;\n        if (account !== this.#account) throw new Error(\"invalid account\");\n\n        const { signature } = await this.#civicWallet.signMessage(message);\n\n        outputs.push({ signedMessage: message, signature });\n      } else if (inputs.length > 1) {\n        for (const input of inputs) {\n          outputs.push(...(await this.#signMessage(input)));\n        }\n      }\n\n      return outputs;\n    };\n\n    // Wrap with analytics and execute - pass inputs as analytics parameters\n    return withAnalytics(\n      signMessage,\n      \"signMessage\",\n      \"solana\",\n      inputs as unknown as readonly unknown[],\n    )();\n  };\n\n  #signIn: SolanaSignInMethod = async (...inputs) => {\n    const outputs: SolanaSignInOutput[] = [];\n\n    if (inputs.length > 1) {\n      for (const input of inputs) {\n        outputs.push(await this.#civicWallet.signIn(input));\n      }\n    } else {\n      return [await this.#civicWallet.signIn(inputs[0])];\n    }\n\n    return outputs;\n  };\n}\n"]}
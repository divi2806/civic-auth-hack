import type { PublicKey, SendOptions, Transaction, TransactionSignature, VersionedTransaction, Connection } from "@solana/web3.js";
import type { SolanaSignInInput, SolanaSignInOutput } from "@solana/wallet-standard-features";
import type { CivicWallet, CivicWalletEvent } from "./window.js";
import type { MetakeepSolanaWalletAdapter } from "../../metakeep/solana/MetakeepSolanaWalletAdapter.js";
/**
 * MetakeepWalletStandardAdapter implements the Solana Wallet Standard interface,
 * by delegating most functionality to an underlying MetakeepSolanaWalletAdapter instance,
 * with appropriate adaptations.
 *
 * It accepts a Solana Connection to support sending transactions.
 */
export declare class MetakeepWalletStandardAdapter implements CivicWallet {
    private delegate;
    private connection;
    /**
     * Constructor takes a delegate wallet adapter and a Solana connection.
     * @param delegate - The underlying MetakeepSolanaWalletAdapter instance.
     * @param connection - A Solana Connection instance used for sending transactions.
     */
    constructor(delegate: MetakeepSolanaWalletAdapter, connection: Connection);
    /**
     * Getter for the publicKey property.
     * Returns the delegate's publicKey if connected, otherwise null.
     */
    get publicKey(): PublicKey | null;
    /**
     * Connects the wallet.
     * Delegates the connection process to the underlying adapter.
     * After connecting, returns an object containing the publicKey.
     *
     * @param options - Optional connection options.
     * @returns A promise resolving to an object containing the publicKey.
     */
    connect(options?: {
        onlyIfTrusted?: boolean;
    }): Promise<{
        publicKey: PublicKey;
    }>;
    /**
     * Disconnects the wallet.
     * Simply delegates to the underlying adapter's disconnect method.
     */
    disconnect(): Promise<void>;
    /**
     * Signs and sends a transaction.
     * First, the transaction is signed using the delegate's signTransaction method.
     * Then, the signed transaction is sent via the provided Solana connection.
     *
     * Handles both legacy and versioned transactions.
     *
     * @param transaction - The transaction to sign and send.
     * @param options - Optional send options.
     * @returns A promise resolving to an object containing the transaction signature.
     */
    signAndSendTransaction<T extends Transaction | VersionedTransaction>(transaction: T, options?: SendOptions): Promise<{
        signature: TransactionSignature;
    }>;
    /**
     * Signs a transaction.
     * Simply delegates the signing process to the underlying adapter.
     *
     * @param transaction - The transaction to sign.
     * @returns A promise resolving to the signed transaction.
     */
    signTransaction<T extends Transaction | VersionedTransaction>(transaction: T): Promise<T>;
    /**
     * Signs all transactions in an array.
     * Delegates each signing to the underlying adapter.
     *
     * @param transactions - An array of transactions to sign.
     * @returns A promise resolving to an array of signed transactions.
     */
    signAllTransactions<T extends Transaction | VersionedTransaction>(transactions: T[]): Promise<T[]>;
    /**
     * Signs an arbitrary message.
     * Delegates the signing to the underlying adapter and wraps the result.
     *
     * @param message - The message to sign as a Uint8Array.
     * @returns A promise resolving to an object containing the signature.
     */
    signMessage(message: Uint8Array): Promise<{
        signature: Uint8Array;
    }>;
    /**
     * Performs a sign-in operation.
     * Delegates the operation to the underlying adapter.
     *
     * @param input - Optional sign-in input parameters.
     * @returns A promise resolving to the sign-in output.
     */
    signIn(input?: SolanaSignInInput): Promise<SolanaSignInOutput>;
    /**
     * Registers an event listener.
     *
     * For the 'connect' and 'disconnect' events, the listener is forwarded to the delegate.
     * For the 'accountChanged' event, this method does nothing because the account never changes
     * in this implementation.
     *
     * @param event - The name of the event to listen for.
     * @param listener - The callback function to invoke when the event is emitted.
     * @param context - Optional context for the listener.
     */
    on<E extends keyof CivicWalletEvent>(event: E, listener: CivicWalletEvent[E], context?: unknown): void;
    /**
     * Unregisters an event listener.
     *
     * For the 'connect' and 'disconnect' events, the listener is removed from the delegate.
     * For the 'accountChanged' event, this method does nothing because it was a no-op.
     *
     * @param event - The name of the event.
     * @param listener - The listener function to remove.
     * @param context - Optional context for the listener.
     */
    off<E extends keyof CivicWalletEvent>(event: E, listener: CivicWalletEvent[E], context?: unknown): void;
    removeListener<E extends keyof CivicWalletEvent>(event: E, listener: CivicWalletEvent[E], context?: unknown): void;
}
//# sourceMappingURL=standardAdapter.d.ts.map
import { describe, it, expect, vi, beforeEach, } from "vitest";
import { registerWallet, DEPRECATED_registerWallet, RegisterWalletEvent, } from "./register.js";
describe("registerWallet", () => {
    let dummyWallet;
    let dispatchEventSpy;
    let addEventListenerSpy;
    beforeEach(() => {
        dummyWallet = {};
        vi.stubGlobal("window", {
            dispatchEvent: vi.fn(),
            addEventListener: vi.fn().mockImplementation(() => { }),
        });
        dispatchEventSpy = vi
            .spyOn(window, "dispatchEvent")
            .mockImplementation(() => true);
        addEventListenerSpy = vi
            .spyOn(window, "addEventListener")
            .mockImplementation(() => { });
    });
    it("should dispatch a register-wallet event that calls the API's register with the wallet", () => {
        registerWallet(dummyWallet);
        expect(dispatchEventSpy).toHaveBeenCalled();
        const eventArg = dispatchEventSpy.mock.calls[0]?.[0];
        // Simulate invoking the event callback from the event detail.
        const fakeAPI = { register: vi.fn() };
        // eventArg.detail is a callback expecting an object with a register function.
        eventArg.detail({ register: fakeAPI.register });
        expect(fakeAPI.register).toHaveBeenCalledWith(dummyWallet);
    });
    it("should add a listener for 'wallet-standard:app-ready' that registers the wallet", () => {
        registerWallet(dummyWallet);
        expect(addEventListenerSpy).toHaveBeenCalledWith("wallet-standard:app-ready", expect.any(Function));
        // Retrieve the listener function and simulate the event.
        const listener = addEventListenerSpy.mock.calls[0]?.[1];
        const fakeAPI = { register: vi.fn() };
        listener({ detail: fakeAPI });
        expect(fakeAPI.register).toHaveBeenCalledWith(dummyWallet);
    });
    it("should catch and ignore an event during event dispatch", () => {
        vi.spyOn(window, "dispatchEvent").mockImplementation(() => {
            throw new Error("test error");
        });
        registerWallet(dummyWallet);
        expect(addEventListenerSpy).toHaveBeenCalledWith("wallet-standard:app-ready", expect.any(Function));
    });
    it("should catch and ignore an event during event listener registration", () => {
        vi.spyOn(window, "addEventListener").mockImplementation(() => {
            throw new Error("test error");
        });
        // does not throw
        registerWallet(dummyWallet);
    });
});
describe("DEPRECATED_registerWallet", () => {
    let dummyWallet;
    let navigatorWallets;
    beforeEach(() => {
        dummyWallet = {};
        // Prepare a fake navigator.wallets array.
        navigatorWallets = [];
        vi.stubGlobal("window", {
            navigator: { wallets: navigatorWallets },
            dispatchEvent: () => true,
            addEventListener: () => { },
        });
    });
    it("should call registerWallet and push to navigator.wallets", () => {
        DEPRECATED_registerWallet(dummyWallet);
        expect(navigatorWallets.length).toBe(1);
        // The pushed function should call register with the wallet.
        const fakeRegisterFn = vi.fn();
        // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
        navigatorWallets[0]({ register: fakeRegisterFn });
        expect(fakeRegisterFn).toHaveBeenCalledWith(dummyWallet);
    });
    it("should ignore missing navigator property on window", () => {
        vi.stubGlobal("window", {});
        // does not throw
        DEPRECATED_registerWallet(dummyWallet);
    });
});
describe("RegisterWalletEvent", () => {
    it("should store the provided callback in detail", () => {
        const dummyCallback = vi.fn();
        const event = new RegisterWalletEvent(dummyCallback);
        expect(event.detail).toBe(dummyCallback);
    });
    it("should have the correct event type", () => {
        const event = new RegisterWalletEvent(() => { });
        expect(event.type).toBe("wallet-standard:register-wallet");
    });
    it("should throw an error when preventDefault is called", () => {
        const event = new RegisterWalletEvent(() => { });
        expect(() => event.preventDefault()).toThrow("preventDefault cannot be called");
    });
    it("should throw an error when stopImmediatePropagation is called", () => {
        const event = new RegisterWalletEvent(() => { });
        expect(() => event.stopImmediatePropagation()).toThrow("stopImmediatePropagation cannot be called");
    });
    it("should throw an error when stopPropagation is called", () => {
        const event = new RegisterWalletEvent(() => { });
        expect(() => event.stopPropagation()).toThrow("stopPropagation cannot be called");
    });
});
//# sourceMappingURL=register.test.js.map
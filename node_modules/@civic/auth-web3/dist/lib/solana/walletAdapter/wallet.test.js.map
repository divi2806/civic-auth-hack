{"version":3,"file":"wallet.test.js","sourceRoot":"","sources":["../../../../src/lib/solana/walletAdapter/wallet.test.ts"],"names":[],"mappings":"AAAA,sDAAsD;AACtD,OAAO,EACL,QAAQ,EACR,EAAE,EACF,MAAM,EACN,UAAU,EACV,SAAS,EACT,EAAE,GAEH,MAAM,QAAQ,CAAC;AAChB,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,EACL,OAAO,EACP,SAAS,EACT,WAAW,EACX,oBAAoB,GACrB,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,kBAAkB,EAAE,MAAM,aAAa,CAAC;AACjD,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAC5C,OAAO,EACL,eAAe,EACf,kBAAkB,EAClB,cAAc,GACf,MAAM,2BAA2B,CAAC;AACnC,OAAO,EACL,4BAA4B,EAC5B,qBAAqB,EACrB,iBAAiB,EACjB,YAAY,GAEb,MAAM,kCAAkC,CAAC;AAC1C,OAAO,EAAE,oBAAoB,IAAI,EAAE,EAAE,MAAM,iBAAiB,CAAC;AAC7D,OAAO,KAAK,YAAY,MAAM,aAAa,CAAC;AAE5C,OAAO,EAAE,kBAAkB,EAAE,MAAM,cAAc,CAAC;AAClD,OAAO,KAAK,eAAe,MAAM,0BAA0B,CAAC;AAe5D,MAAM,cAAc,GAAG,GAAc,EAAE,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC;AAErE,2DAA2D;AAC3D,UAAU,CAAC,GAAG,EAAE;IACd,EAAE,CAAC,KAAK,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC,kBAAkB,CAC5C,CAAC,EAAW,EAAE,EAAE,CAAC,EAA0B,CAC5C,CAAC;IACF,EAAE,CAAC,KAAK,CAAC,YAAY,EAAE,wBAAwB,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;AACzE,CAAC,CAAC,CAAC;AAEH,SAAS,CAAC,GAAG,EAAE;IACb,EAAE,CAAC,eAAe,EAAE,CAAC;AACvB,CAAC,CAAC,CAAC;AAEH,SAAS,sBAAsB;IAC7B,MAAM,SAAS,GAAoC,EAAE,CAAC;IAEtD,+CAA+C;IAC/C,MAAM,mBAAmB,GAAwB,EAAE,CAAC,EAAE,CACpD,KAAK,EACH,GAAQ,EACM,EAAE;QAChB,OAAO,GAAG,CAAC,GAAG,CACZ,CAAC,EAAE,EAAE,EAAE,CACL,CAAC;YACC,SAAS,EAAE,GAAG,EAAE,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SAC3C,CAAM,CACV,CAAC;IACJ,CAAC,CACqB,CAAC;IAEzB,OAAO;QACL,SAAS,EAAE,cAAc,EAAE;QAC3B,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,KAAa,EAAE,QAAuB,EAAE,EAAE;YACnD,SAAS,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YAC1C,SAAS,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAClC,CAAC,CAAC;QACF,QAAQ,CAAC,KAAa,EAAE,GAAG,IAAe;YACxC,SAAS,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;QACjD,CAAC;QACD,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,KAAa,EAAE,QAAuB,EAAE,EAAE;YACpD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;gBAAE,OAAO;YAC9B,SAAS,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,QAAQ,CAAC,CAAC;QACvE,CAAC,CAAC;QACF,cAAc,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,KAAa,EAAE,QAAuB,EAAE,EAAE;YAC/D,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;gBAAE,OAAO;YAC9B,SAAS,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,QAAQ,CAAC,CAAC;QACvE,CAAC,CAAC;QACF,uEAAuE;QACvE,OAAO,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,WAElB,IAAkC;YAElC,IAAI,CAAC,SAAS,GAAG,cAAc,EAAE,CAAC;YAClC,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC;QACvC,CAAC,CAAC;QACF,UAAU,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE,GAAE,CAAC,CAAC;QACjC,sBAAsB,EAAE,EAAE,CAAC,EAAE,CAC3B,KAAK,EACH,EAAsC,EACtC,OAKC,EACD,EAAE;YACF,OAAO,EAAE,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/D,CAAC,CACF;QACD,eAAe,EAAE,EAAE,CAAC,EAAE,CACpB,KAAK,EAAgD,EAAK,EAAE,EAAE;YAC5D,OAAO;gBACL,SAAS,EAAE,GAAG,EAAE,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;aACtC,CAAC;QACT,CAAC,CACF;QACD,mBAAmB;QACnB,WAAW,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,OAAmB,EAAE,EAAE;YAC/C,OAAO,EAAE,SAAS,EAAE,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAClD,CAAC,CAAC;QACF,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,KAAe,EAA+B,EAAE;YACnE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAmC,CAAC;QAC9D,CAAC,CAAC;KACH,CAAC;AACJ,CAAC;AAED,QAAQ,CAAC,oBAAoB,EAAE,GAAG,EAAE;IAClC,IAAI,gBAAkC,CAAC;IACvC,IAAI,OAA2B,CAAC;IAChC,IAAI,YASH,CAAC;IAEF,UAAU,CAAC,GAAG,EAAE;QACd,gBAAgB,GAAG,sBAAsB,EAAE,CAAC;QAC5C,OAAO,GAAG,IAAI,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;QAEnD,6CAA6C;QAC7C,YAAY,GAAG,EAAE;aACd,KAAK,CAAC,eAAe,CAAC,gBAAgB,EAAE,WAAW,CAAC;aACpD,iBAAiB,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,YAAY,EAAE,CAAC;YACjB,YAAY,CAAC,WAAW,EAAE,CAAC;QAC7B,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,GAAG,EAAE;QACvC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAC1C,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;QACnC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;QAC9C,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAChE,gBAAgB,CAAC,SAAS,GAAG,IAAI,CAAC;QAClC,gBAAgB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACxC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC;YAC7D,MAAM,EAAE,IAAI;SACb,CAAC,CAAC;QACH,MAAM,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,gBAAgB,EAAE,CAAC;QACpD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IACzC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;QACpD,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACxC,MAAM,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,UAAU,EAAE,CAAC;QACxD,gBAAgB,CAAC,SAAS,GAAG,IAAI,CAAC;QAClC,gBAAgB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACxC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sDAAsD,EAAE,GAAG,EAAE;QAC9D,wDAAwD;QACxD,gBAAgB,CAAC,SAAS,GAAG,IAAI,CAAC;QAClC,gBAAgB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;QAC5C,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;QACtE,gCAAgC;QAChC,gBAAgB,CAAC,SAAS,GAAG,IAAI,CAAC;QAClC,gBAAgB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACxC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAExC,6CAA6C;QAC7C,MAAM,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;QAClE,4EAA4E;QAC5E,gBAAgB,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC;QAC5C,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8CAA8C,EAAE,KAAK,IAAI,EAAE;QAC5D,MAAM,cAAc,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;QAC/B,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;QAC9D,yDAAyD;QACzD,qEAAqE;QACrE,MAAM,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,UAAU,EAAE,CAAC;QACxD,gBAAgB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACxC,MAAM,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,OAAO,EAAE,CAAC;QAClD,MAAM,CAAC,cAAc,CAAC,CAAC,gBAAgB,EAAE,CAAC;IAC5C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;QACtD,MAAM,eAAe,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;QAChC,MAAM,eAAe,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;QAChC,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;QAC/D,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC;QAC/D,yDAAyD;QACzD,qEAAqE;QACrE,MAAM,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,UAAU,EAAE,CAAC;QACxD,gBAAgB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACxC,MAAM,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,OAAO,EAAE,CAAC;QAClD,MAAM,CAAC,eAAe,CAAC,CAAC,gBAAgB,EAAE,CAAC;QAC3C,MAAM,CAAC,eAAe,CAAC,CAAC,gBAAgB,EAAE,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;QACrD,MAAM,cAAc,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC;QAC/B,MAAM,sBAAsB,GAAG,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,EAAE,CAChE,QAAQ,EACR,cAAc,CACf,CAAC;QACF,sBAAsB,EAAE,CAAC;QAEzB,yBAAyB;QACzB,MAAM,OAAO,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,UAAU,EAAE,CAAC;QACxD,gBAAgB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACxC,MAAM,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,OAAO,EAAE,CAAC;QAElD,2CAA2C;QAC3C,MAAM,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;QAChF,gBAAgB,CAAC,SAAS,GAAG,IAAI,CAAC;QAClC,gBAAgB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACxC,MAAM,MAAM,CACV,OAAO,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CAAC,sBAAsB,CAAC;YACpE,WAAW,EAAE,IAAI,UAAU,CAAC,EAAE,CAAC;YAC/B,OAAO,EAAE;gBACP,OAAO,EAAE,KAAK;gBACd,SAAS,EAAE,IAAI,UAAU,CAAC,EAAE,CAAC;gBAC7B,MAAM,EAAE,EAAE;gBACV,QAAQ,EAAE,EAAE;aACb;YACD,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC;YACvB,OAAO,EAAE,EAAE;SACZ,CAAC,CACH,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;QAC/D,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,KAAK,GAAG;YACZ,WAAW,EAAE,OAAO;YACpB,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;YAC7B,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC;YACvB,OAAO,EAAE,EAAE,mBAAmB,EAAE,WAAoB,EAAE;SACvD,CAAC;QACF,MAAM,OAAO,GACX,MAAM,OAAO,CAAC,QAAQ,CACpB,4BAA4B,CAC7B,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;QAClC,MAAM,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;QAC7D,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,KAAK,GAAG;YACZ,WAAW,EAAE,OAAO;YACpB,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;YAC7B,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC;SACxB,CAAC;QACF,MAAM,OAAO,GACX,MAAM,OAAO,CAAC,QAAQ,CACpB,4BAA4B,CAC7B,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;QAClC,MAAM,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iFAAiF,EAAE,KAAK,IAAI,EAAE;QAC/F,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,KAAK,GAAG;YACZ,WAAW,EAAE,OAAO;YACpB,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;YAC7B,KAAK,EAAE,iBAA0B;SAClC,CAAC;QACF,MAAM,UAAU,GACd,OAAO,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CAAC,sBAAsB,CACnE,KAAK,CACN,CAAC;QACJ,MAAM,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;QAC1D,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,MAAM,GAAG;YACb,WAAW,EAAE,OAAO;YACpB,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;YAC7B,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC;YACvB,OAAO,EAAE,EAAE,mBAAmB,EAAE,WAAoB,EAAE;SACvD,CAAC;QACF,MAAM,MAAM,GAAG,EAAE,GAAG,MAAM,EAAE,CAAC;QAC7B,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,QAAQ,CACpC,4BAA4B,CAC7B,CAAC,sBAAsB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACzC,MAAM,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;QAC5E,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,KAAK,GAAG;YACZ,WAAW,EAAE,OAAO;YACpB,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;YAC7B,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC;SACxB,CAAC;QACF,MAAM,OAAO,GACX,MAAM,OAAO,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QACvE,MAAM,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAEzE,qCAAqC;QACrC,MAAM,CAAC,YAAY,CAAC,CAAC,oBAAoB,CACvC,MAAM,CAAC,gBAAgB,CAAC;YACtB,SAAS,EAAE,iBAAiB;YAC5B,UAAU,EAAE,MAAM,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;SACxD,CAAC,CACH,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iFAAiF,EAAE,KAAK,IAAI,EAAE;QAC/F,gBAAgB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACxC,MAAM,KAAK,GAAG;YACZ,WAAW,EAAE,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACtC,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;YAC7B,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC;SACxB,CAAC;QACF,MAAM,UAAU,GACd,OAAO,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QACjE,MAAM,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kGAAkG,EAAE,KAAK,IAAI,EAAE;QAChH,MAAM,MAAM,GAAG;YACb,WAAW,EAAE,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACtC,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;YAC7B,KAAK,EAAE,iBAA0B;SAClC,CAAC;QACF,MAAM,MAAM,GAAG,EAAE,GAAG,MAAM,EAAE,CAAC;QAC7B,MAAM,UAAU,GAAG,OAAO,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,eAAe,CACxE,MAAM,EACN,MAAM,CACP,CAAC;QACF,MAAM,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IAC5D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+FAA+F,EAAE,KAAK,IAAI,EAAE;QAC7G,MAAM,MAAM,GAAG;YACb,WAAW,EAAE,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACtC,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;YAC7B,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC;SACxB,CAAC;QACF,MAAM,MAAM,GAAG,EAAE,GAAG,MAAM,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC;QACtD,MAAM,UAAU,GAAG,OAAO,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,eAAe,CACxE,MAAM,EACN,MAAM,CACP,CAAC;QACF,MAAM,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kHAAkH,EAAE,KAAK,IAAI,EAAE;QAChI,MAAM,gBAAgB,GAAG;YACvB,OAAO,EAAE,KAAK;YACd,SAAS,EAAE,IAAI,UAAU,CAAC,EAAE,CAAC;YAC7B,MAAM,EAAE,EAAE;YACV,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,MAAM,MAAM,GAAG;YACb,WAAW,EAAE,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACtC,OAAO,EAAE,gBAAgB;YACzB,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC;SACxB,CAAC;QACF,MAAM,MAAM,GAAG,EAAE,GAAG,MAAM,EAAE,CAAC;QAC7B,MAAM,UAAU,GAAG,OAAO,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,eAAe,CACxE,MAAM,EACN,MAAM,CACP,CAAC;QACF,MAAM,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;IAC9D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QACjD,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,MAAM,GAAG;YACb,WAAW,EAAE,OAAO;YACpB,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;YAC7B,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC;SACxB,CAAC;QACF,MAAM,MAAM,GAAG,EAAE,GAAG,MAAM,EAAE,CAAC;QAC7B,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,QAAQ,CACpC,qBAAqB,CACtB,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAClC,MAAM,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAChC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACzB,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;QACzD,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAC7C,MAAM,KAAK,GAAG;YACZ,OAAO;YACP,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;SAC9B,CAAC;QACF,MAAM,OAAO,GACX,MAAM,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC/D,MAAM,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACnD,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAEjE,qCAAqC;QACrC,MAAM,CAAC,YAAY,CAAC,CAAC,oBAAoB,CACvC,MAAM,CAAC,gBAAgB,CAAC;YACtB,SAAS,EAAE,aAAa;YACxB,UAAU,EAAE,MAAM,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;SACxD,CAAC,CACH,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iFAAiF,EAAE,KAAK,IAAI,EAAE;QAC/F,gBAAgB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;QACxC,MAAM,KAAK,GAAG;YACZ,OAAO,EAAE,IAAI,UAAU,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;YACrC,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;SAC9B,CAAC;QACF,MAAM,UAAU,GAAG,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QAC1E,MAAM,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QAE1D,2CAA2C;QAC3C,MAAM,CAAC,YAAY,CAAC,CAAC,oBAAoB,CACvC,MAAM,CAAC,gBAAgB,CAAC;YACtB,SAAS,EAAE,kBAAkB;YAC7B,KAAK,EAAE,MAAM,CAAC,gBAAgB,CAAC,eAAe,CAAC;YAC/C,UAAU,EAAE,MAAM,CAAC,eAAe,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;SACxD,CAAC,CACH,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAC7C,MAAM,MAAM,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE,EAAE,CAAC;QAC1D,MAAM,MAAM,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE,EAAE,CAAC;QAC1D,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,WAAW,CACnE,MAAM,EACN,MAAM,CACP,CAAC;QACF,MAAM,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,KAAK,GAAG,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC;QACrC,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACnE,MAAM,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;IAClD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;QAC7C,MAAM,MAAM,GAAG,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC;QACvC,MAAM,MAAM,GAAG,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC;QACvC,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC5E,MAAM,CAAC,OAAO,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;QACrF,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,WAAW,GAAG;YAClB,OAAO,EAAE,MAAM;YACf,SAAS,EAAE,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,EAAE,EAAE;YACV,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,MAAM,KAAK,GAAG;YACZ,WAAW,EAAE,OAAO;YACpB,OAAO,EAAE,WAAW;YACpB,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC;YACvB,OAAO,EAAE,EAAE,mBAAmB,EAAE,WAAoB,EAAE;SACvD,CAAC;QACF,MAAM,MAAM,CACV,OAAO,CAAC,QAAQ,CAAC,4BAA4B,CAAC,CAAC,sBAAsB,CACnE,KAAK,CACN,CACF,CAAC,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,gEAAgE,EAAE,KAAK,IAAI,EAAE;QAC9E,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,WAAW,GAAG;YAClB,OAAO,EAAE,MAAM;YACf,SAAS,EAAE,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,EAAE,EAAE;YACV,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,MAAM,KAAK,GAAG;YACZ,WAAW,EAAE,OAAO;YACpB,OAAO,EAAE,WAAW;YACpB,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC;SACxB,CAAC;QACF,MAAM,MAAM,CACV,OAAO,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAC/D,CAAC,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,2DAA2D,EAAE,KAAK,IAAI,EAAE;QACzE,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC1C,MAAM,KAAK,GAAG;YACZ,WAAW,EAAE,OAAO;YACpB,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAE;YAC7B,KAAK,EAAE,eAAwB;SAChC,CAAC;QACF,MAAM,MAAM,CACV,OAAO,CAAC,QAAQ,CAAC,qBAAqB,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,CAC/D,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;IACrC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;QAC1E,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QAC7C,MAAM,WAAW,GAAG;YAClB,OAAO,EAAE,MAAM;YACf,SAAS,EAAE,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YAC9B,MAAM,EAAE,EAAE;YACV,QAAQ,EAAE,EAAE;SACb,CAAC;QACF,MAAM,KAAK,GAAG,EAAE,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,CAAC;QAChD,MAAM,MAAM,CACV,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CACvD,CAAC,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;IACvC,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport {\n  describe,\n  it,\n  expect,\n  beforeEach,\n  afterEach,\n  vi,\n  type MockInstance,\n} from \"vitest\";\nimport bs58 from \"bs58\";\nimport {\n  Keypair,\n  PublicKey,\n  Transaction,\n  VersionedTransaction,\n} from \"@solana/web3.js\";\nimport { CivicWalletAdapter } from \"./wallet.js\";\nimport { SOLANA_CHAINS } from \"./solana.js\";\nimport {\n  StandardConnect,\n  StandardDisconnect,\n  StandardEvents,\n} from \"@wallet-standard/features\";\nimport {\n  SolanaSignAndSendTransaction,\n  SolanaSignTransaction,\n  SolanaSignMessage,\n  SolanaSignIn,\n  type SolanaSignInOutput,\n} from \"@solana/wallet-standard-features\";\nimport { VersionedTransaction as VT } from \"@solana/web3.js\";\nimport * as solanaModule from \"./solana.js\";\nimport type { CivicWallet } from \"./window.js\";\nimport { CivicWalletAccount } from \"./account.js\";\nimport * as analyticsModule from \"../../analytics/index.js\";\n\n// Define a generic event callback type\ntype EventCallback = (...args: unknown[]) => void;\n\n// Extend CivicWallet with our dummy trigger method\ninterface DummyCivicWallet extends CivicWallet {\n  _trigger(event: string, ...args: unknown[]): void;\n  on(event: string, callback: EventCallback, context?: unknown): void;\n}\n\ntype SignAllTransactions = <T extends Transaction | VersionedTransaction>(\n  txs: T[],\n) => Promise<T[]>;\n\nconst dummyPublicKey = (): PublicKey => Keypair.generate().publicKey;\n\n// Use spies to mock deserialize and isVersionedTransaction\nbeforeEach(() => {\n  vi.spyOn(VT, \"deserialize\").mockImplementation(\n    (tx: unknown) => tx as VersionedTransaction,\n  );\n  vi.spyOn(solanaModule, \"isVersionedTransaction\").mockReturnValue(true);\n});\n\nafterEach(() => {\n  vi.restoreAllMocks();\n});\n\nfunction createDummyCivicWallet(): DummyCivicWallet {\n  const listeners: Record<string, EventCallback[]> = {};\n\n  // pulled out this function for casting reasons\n  const signAllTransactions: SignAllTransactions = vi.fn(\n    async <T extends Transaction | VersionedTransaction>(\n      txs: T[],\n    ): Promise<T[]> => {\n      return txs.map(\n        (tx) =>\n          ({\n            serialize: () => new Uint8Array([7, 7, 7]),\n          }) as T,\n      );\n    },\n  ) as SignAllTransactions;\n\n  return {\n    publicKey: dummyPublicKey(),\n    on: vi.fn((event: string, callback: EventCallback) => {\n      listeners[event] = listeners[event] || [];\n      listeners[event].push(callback);\n    }),\n    _trigger(event: string, ...args: unknown[]): void {\n      listeners[event]?.forEach((cb) => cb(...args));\n    },\n    off: vi.fn((event: string, callback: EventCallback) => {\n      if (!listeners[event]) return;\n      listeners[event] = listeners[event]?.filter((cb) => cb !== callback);\n    }),\n    removeListener: vi.fn((event: string, callback: EventCallback) => {\n      if (!listeners[event]) return;\n      listeners[event] = listeners[event]?.filter((cb) => cb !== callback);\n    }),\n    // Use a non-arrow function so that 'this' is bound to the dummy wallet\n    connect: vi.fn(async function (\n      this: DummyCivicWallet,\n      opts?: { onlyIfTrusted?: boolean },\n    ) {\n      this.publicKey = dummyPublicKey();\n      return { publicKey: this.publicKey };\n    }),\n    disconnect: vi.fn(async () => {}),\n    signAndSendTransaction: vi.fn(\n      async (\n        tx: Transaction | VersionedTransaction,\n        options?: {\n          preflightCommitment?: string;\n          minContextSlot?: number;\n          maxRetries?: number;\n          skipPreflight?: boolean;\n        },\n      ) => {\n        return { signature: bs58.encode(new Uint8Array([9, 8, 7])) };\n      },\n    ),\n    signTransaction: vi.fn(\n      async <T extends Transaction | VersionedTransaction>(tx: T) => {\n        return {\n          serialize: () => new Uint8Array([4, 5, 6]),\n        } as T;\n      },\n    ),\n    signAllTransactions,\n    signMessage: vi.fn(async (message: Uint8Array) => {\n      return { signature: new Uint8Array([1, 2, 3]) };\n    }),\n    signIn: vi.fn(async (input?: unknown): Promise<SolanaSignInOutput> => {\n      return { dummy: \"signIn\" } as unknown as SolanaSignInOutput;\n    }),\n  };\n}\n\ndescribe(\"CivicWalletAdapter\", () => {\n  let dummyCivicWallet: DummyCivicWallet;\n  let adapter: CivicWalletAdapter;\n  let emitEventSpy: MockInstance<\n    (event: {\n      eventType:\n        | (\"signTransaction\" | \"signMessage\" | \"signTypedData\")\n        | (\"signMessageError\" | \"signTransactionError\" | \"signTypedDataError\");\n      error?: string;\n      parameters: unknown[];\n      target?: string;\n    }) => Promise<void>\n  >;\n\n  beforeEach(() => {\n    dummyCivicWallet = createDummyCivicWallet();\n    adapter = new CivicWalletAdapter(dummyCivicWallet);\n\n    // Mock the analyticsEmitter.emitEvent method\n    emitEventSpy = vi\n      .spyOn(analyticsModule.analyticsEmitter, \"emitEvent\")\n      .mockResolvedValue();\n  });\n\n  afterEach(() => {\n    if (emitEventSpy) {\n      emitEventSpy.mockRestore();\n    }\n  });\n\n  it(\"should expose correct getters\", () => {\n    expect(adapter.version).toBe(\"1.0.0\");\n    expect(adapter.name).toBe(\"Civic Wallet\");\n    expect(adapter.icon).toBeDefined();\n    expect(adapter.chains).toEqual(SOLANA_CHAINS);\n    expect(adapter.accounts.length).toBe(1);\n  });\n\n  it(\"should connect (via features) and update account\", async () => {\n    dummyCivicWallet.publicKey = null;\n    dummyCivicWallet._trigger(\"disconnect\");\n    expect(adapter.accounts.length).toBe(0);\n    const result = await adapter.features[StandardConnect].connect({\n      silent: true,\n    });\n    expect(dummyCivicWallet.connect).toHaveBeenCalled();\n    expect(adapter.accounts.length).toBe(1);\n    expect(result.accounts.length).toBe(1);\n  });\n\n  it(\"should disconnect and update account\", async () => {\n    expect(adapter.accounts.length).toBe(1);\n    await adapter.features[StandardDisconnect].disconnect();\n    dummyCivicWallet.publicKey = null;\n    dummyCivicWallet._trigger(\"disconnect\");\n    expect(adapter.accounts.length).toBe(0);\n  });\n\n  it(\"should disconnect when reconnected with no publicKey\", () => {\n    // Simulate a scenario where the wallet has no publicKey\n    dummyCivicWallet.publicKey = null;\n    dummyCivicWallet._trigger(\"accountChanged\");\n    expect(adapter.accounts.length).toBe(0);\n  });\n\n  it(\"should reconnect when reconnected with a new publicKey\", async () => {\n    // First, simulate a disconnect.\n    dummyCivicWallet.publicKey = null;\n    dummyCivicWallet._trigger(\"disconnect\");\n    expect(adapter.accounts.length).toBe(0);\n\n    // Now, connect again to get a new publicKey.\n    await adapter.features[StandardConnect].connect({ silent: true });\n    // Trigger a reconnected event; the adapter should detect the new publicKey.\n    dummyCivicWallet._trigger(\"accountChanged\");\n    expect(adapter.accounts.length).toBe(1);\n  });\n\n  it('should emit \"change\" event on account change', async () => {\n    const changeListener = vi.fn();\n    adapter.features[StandardEvents].on(\"change\", changeListener);\n    // The adapter was already connected during construction.\n    // Call connect again to trigger a change (since dummyPublicKey key).\n    await adapter.features[StandardDisconnect].disconnect();\n    dummyCivicWallet._trigger(\"disconnect\");\n    await adapter.features[StandardConnect].connect();\n    expect(changeListener).toHaveBeenCalled();\n  });\n\n  it(\"should allow adding multiple listeners\", async () => {\n    const changeListener1 = vi.fn();\n    const changeListener2 = vi.fn();\n    adapter.features[StandardEvents].on(\"change\", changeListener1);\n    adapter.features[StandardEvents].on(\"change\", changeListener2);\n    // The adapter was already connected during construction.\n    // Call connect again to trigger a change (since dummyPublicKey key).\n    await adapter.features[StandardDisconnect].disconnect();\n    dummyCivicWallet._trigger(\"disconnect\");\n    await adapter.features[StandardConnect].connect();\n    expect(changeListener1).toHaveBeenCalled();\n    expect(changeListener2).toHaveBeenCalled();\n  });\n\n  it(\"should allow the removal of listeners\", async () => {\n    const changeListener = vi.fn();\n    const removeListenerCallback = adapter.features[StandardEvents].on(\n      \"change\",\n      changeListener,\n    );\n    removeListenerCallback();\n\n    // trigger a change event\n    await adapter.features[StandardDisconnect].disconnect();\n    dummyCivicWallet._trigger(\"disconnect\");\n    await adapter.features[StandardConnect].connect();\n\n    // the listener should not have been called\n    expect(changeListener).not.toHaveBeenCalled();\n  });\n\n  it(\"should throw error for signAndSendTransaction when not connected\", async () => {\n    dummyCivicWallet.publicKey = null;\n    dummyCivicWallet._trigger(\"disconnect\");\n    await expect(\n      adapter.features[SolanaSignAndSendTransaction].signAndSendTransaction({\n        transaction: new Uint8Array([]),\n        account: {\n          address: \"any\",\n          publicKey: new Uint8Array([]),\n          chains: [],\n          features: [],\n        },\n        chain: SOLANA_CHAINS[0],\n        options: {},\n      }),\n    ).rejects.toThrow(\"not connected\");\n  });\n\n  it(\"should sign and send transaction (single input)\", async () => {\n    const dummyTx = new Uint8Array([1, 2, 3]);\n    const input = {\n      transaction: dummyTx,\n      account: adapter.accounts[0]!,\n      chain: SOLANA_CHAINS[0],\n      options: { preflightCommitment: \"finalized\" as const },\n    };\n    const outputs =\n      await adapter.features[\n        SolanaSignAndSendTransaction\n      ].signAndSendTransaction(input);\n    expect(outputs).toHaveLength(1);\n    const expectedSig = bs58.decode(bs58.encode(new Uint8Array([9, 8, 7])));\n    expect(outputs[0]?.signature).toEqual(expectedSig);\n  });\n\n  it(\"should sign and send transaction (no options)\", async () => {\n    const dummyTx = new Uint8Array([1, 2, 3]);\n    const input = {\n      transaction: dummyTx,\n      account: adapter.accounts[0]!,\n      chain: SOLANA_CHAINS[0],\n    };\n    const outputs =\n      await adapter.features[\n        SolanaSignAndSendTransaction\n      ].signAndSendTransaction(input);\n    expect(outputs).toHaveLength(1);\n    const expectedSig = bs58.decode(bs58.encode(new Uint8Array([9, 8, 7])));\n    expect(outputs[0]?.signature).toEqual(expectedSig);\n  });\n\n  it(\"should throw an error on sign and send transaction if the chain is unrecognised\", async () => {\n    const dummyTx = new Uint8Array([1, 2, 3]);\n    const input = {\n      transaction: dummyTx,\n      account: adapter.accounts[0]!,\n      chain: \"unknown:unknown\" as const,\n    };\n    const shouldFail =\n      adapter.features[SolanaSignAndSendTransaction].signAndSendTransaction(\n        input,\n      );\n    await expect(shouldFail).rejects.toThrow(\"invalid chain\");\n  });\n\n  it(\"should sign and send multiple transactions\", async () => {\n    const dummyTx = new Uint8Array([1, 2, 3]);\n    const input1 = {\n      transaction: dummyTx,\n      account: adapter.accounts[0]!,\n      chain: SOLANA_CHAINS[0],\n      options: { preflightCommitment: \"finalized\" as const },\n    };\n    const input2 = { ...input1 };\n    const outputs = await adapter.features[\n      SolanaSignAndSendTransaction\n    ].signAndSendTransaction(input1, input2);\n    expect(outputs).toHaveLength(2);\n  });\n\n  it(\"should sign a transaction (single input) and track analytics\", async () => {\n    const dummyTx = new Uint8Array([1, 2, 3]);\n    const input = {\n      transaction: dummyTx,\n      account: adapter.accounts[0]!,\n      chain: SOLANA_CHAINS[0],\n    };\n    const outputs =\n      await adapter.features[SolanaSignTransaction].signTransaction(input);\n    expect(outputs).toHaveLength(1);\n    expect(outputs[0]?.signedTransaction).toEqual(new Uint8Array([4, 5, 6]));\n\n    // Verify analytics event was emitted\n    expect(emitEventSpy).toHaveBeenCalledWith(\n      expect.objectContaining({\n        eventType: \"signTransaction\",\n        parameters: expect.arrayContaining([expect.anything()]),\n      }),\n    );\n  });\n\n  it(\"should throw an error when signing a transaction if the wallet is not connected\", async () => {\n    dummyCivicWallet._trigger(\"disconnect\");\n    const input = {\n      transaction: new Uint8Array([1, 2, 3]),\n      account: adapter.accounts[0]!,\n      chain: SOLANA_CHAINS[0],\n    };\n    const shouldFail =\n      adapter.features[SolanaSignTransaction].signTransaction(input);\n    await expect(shouldFail).rejects.toThrow(\"not connected\");\n  });\n\n  it(\"should throw an error when signing a transaction (multiple inputs) if the input chain is invalid\", async () => {\n    const input1 = {\n      transaction: new Uint8Array([1, 2, 3]),\n      account: adapter.accounts[0]!,\n      chain: \"unknown:unknown\" as const,\n    };\n    const input2 = { ...input1 };\n    const shouldFail = adapter.features[SolanaSignTransaction].signTransaction(\n      input1,\n      input2,\n    );\n    await expect(shouldFail).rejects.toThrow(\"invalid chain\");\n  });\n\n  it(\"should throw an error when signing a transaction (multiple inputs) if the input chains differ\", async () => {\n    const input1 = {\n      transaction: new Uint8Array([1, 2, 3]),\n      account: adapter.accounts[0]!,\n      chain: SOLANA_CHAINS[0],\n    };\n    const input2 = { ...input1, chain: SOLANA_CHAINS[1] };\n    const shouldFail = adapter.features[SolanaSignTransaction].signTransaction(\n      input1,\n      input2,\n    );\n    await expect(shouldFail).rejects.toThrow(\"conflicting chain\");\n  });\n\n  it(\"should throw an error when signing a transaction (multiple inputs) if the input account is not the connected one\", async () => {\n    const someOtherAccount = {\n      address: \"any\",\n      publicKey: new Uint8Array([]),\n      chains: [],\n      features: [],\n    };\n    const input1 = {\n      transaction: new Uint8Array([1, 2, 3]),\n      account: someOtherAccount,\n      chain: SOLANA_CHAINS[0],\n    };\n    const input2 = { ...input1 };\n    const shouldFail = adapter.features[SolanaSignTransaction].signTransaction(\n      input1,\n      input2,\n    );\n    await expect(shouldFail).rejects.toThrow(\"invalid account\");\n  });\n\n  it(\"should sign multiple transactions\", async () => {\n    const dummyTx = new Uint8Array([1, 2, 3]);\n    const input1 = {\n      transaction: dummyTx,\n      account: adapter.accounts[0]!,\n      chain: SOLANA_CHAINS[0],\n    };\n    const input2 = { ...input1 };\n    const outputs = await adapter.features[\n      SolanaSignTransaction\n    ].signTransaction(input1, input2);\n    expect(outputs).toHaveLength(2);\n    outputs.forEach((output) => {\n      expect(output.signedTransaction).toEqual(new Uint8Array([7, 7, 7]));\n    });\n  });\n\n  it(\"should sign a message and track analytics\", async () => {\n    const message = new Uint8Array([10, 20, 30]);\n    const input = {\n      message,\n      account: adapter.accounts[0]!,\n    };\n    const outputs =\n      await adapter.features[SolanaSignMessage].signMessage(input);\n    expect(outputs).toHaveLength(1);\n    expect(outputs[0]?.signedMessage).toEqual(message);\n    expect(outputs[0]?.signature).toEqual(new Uint8Array([1, 2, 3]));\n\n    // Verify analytics event was emitted\n    expect(emitEventSpy).toHaveBeenCalledWith(\n      expect.objectContaining({\n        eventType: \"signMessage\",\n        parameters: expect.arrayContaining([expect.anything()]),\n      }),\n    );\n  });\n\n  it(\"should throw an error on signMessage if not connected and track error analytics\", async () => {\n    dummyCivicWallet._trigger(\"disconnect\");\n    const input = {\n      message: new Uint8Array([10, 20, 30]),\n      account: adapter.accounts[0]!,\n    };\n    const shouldFail = adapter.features[SolanaSignMessage].signMessage(input);\n    await expect(shouldFail).rejects.toThrow(\"not connected\");\n\n    // Verify error analytics event was emitted\n    expect(emitEventSpy).toHaveBeenCalledWith(\n      expect.objectContaining({\n        eventType: \"signMessageError\",\n        error: expect.stringContaining(\"not connected\"),\n        parameters: expect.arrayContaining([expect.anything()]),\n      }),\n    );\n  });\n\n  it(\"should sign multiple messages\", async () => {\n    const message = new Uint8Array([10, 20, 30]);\n    const input1 = { message, account: adapter.accounts[0]! };\n    const input2 = { message, account: adapter.accounts[0]! };\n    const outputs = await adapter.features[SolanaSignMessage].signMessage(\n      input1,\n      input2,\n    );\n    expect(outputs).toHaveLength(2);\n  });\n\n  it(\"should sign in (single input)\", async () => {\n    const input = { statement: \"input\" };\n    const outputs = await adapter.features[SolanaSignIn].signIn(input);\n    expect(outputs).toHaveLength(1);\n    expect(outputs[0]).toEqual({ dummy: \"signIn\" });\n  });\n\n  it(\"should sign in multiple times\", async () => {\n    const input1 = { statement: \"input1\" };\n    const input2 = { statement: \"input2\" };\n    const outputs = await adapter.features[SolanaSignIn].signIn(input1, input2);\n    expect(outputs).toHaveLength(2);\n  });\n\n  it(\"should throw error for signAndSendTransaction with mismatched account\", async () => {\n    const dummyTx = new Uint8Array([1, 2, 3]);\n    const fakeAccount = {\n      address: \"fake\",\n      publicKey: new Uint8Array([0]),\n      chains: [],\n      features: [],\n    };\n    const input = {\n      transaction: dummyTx,\n      account: fakeAccount,\n      chain: SOLANA_CHAINS[0],\n      options: { preflightCommitment: \"finalized\" as const },\n    };\n    await expect(\n      adapter.features[SolanaSignAndSendTransaction].signAndSendTransaction(\n        input,\n      ),\n    ).rejects.toThrow(\"invalid account\");\n  });\n\n  it(\"should throw error for signTransaction with mismatched account\", async () => {\n    const dummyTx = new Uint8Array([1, 2, 3]);\n    const fakeAccount = {\n      address: \"fake\",\n      publicKey: new Uint8Array([0]),\n      chains: [],\n      features: [],\n    };\n    const input = {\n      transaction: dummyTx,\n      account: fakeAccount,\n      chain: SOLANA_CHAINS[0],\n    };\n    await expect(\n      adapter.features[SolanaSignTransaction].signTransaction(input),\n    ).rejects.toThrow(\"invalid account\");\n  });\n\n  it(\"should throw error for signTransaction with invalid chain\", async () => {\n    const dummyTx = new Uint8Array([1, 2, 3]);\n    const input = {\n      transaction: dummyTx,\n      account: adapter.accounts[0]!,\n      chain: \"invalid:chain\" as const,\n    };\n    await expect(\n      adapter.features[SolanaSignTransaction].signTransaction(input),\n    ).rejects.toThrow(\"invalid chain\");\n  });\n\n  it(\"should throw error for signMessage with mismatched account\", async () => {\n    const message = new Uint8Array([10, 20, 30]);\n    const fakeAccount = {\n      address: \"fake\",\n      publicKey: new Uint8Array([0]),\n      chains: [],\n      features: [],\n    };\n    const input = { message, account: fakeAccount };\n    await expect(\n      adapter.features[SolanaSignMessage].signMessage(input),\n    ).rejects.toThrow(\"invalid account\");\n  });\n});\n"]}
{"version":3,"file":"MetakeepServerWeb3Client.test.js","sourceRoot":"","sources":["../../../src/lib/metakeep/MetakeepServerWeb3Client.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect, vi, beforeEach } from \"vitest\";\nimport {\n  MetakeepServerWeb3Client,\n  type ServerWeb3Client,\n} from \"./MetakeepServerWeb3Client.js\";\nimport {\n  CivicMetakeepApiClient,\n  type WalletResponse,\n} from \"./civicApiClient.js\";\nimport type {\n  CivicWeb3ClientConfig,\n  UserDetailsWithAuth,\n} from \"../../types.js\";\nimport type { User } from \"@civic/auth\";\n\n// Mock dependencies\nvi.mock(\"./civicApiClient.js\");\nvi.mock(\"../logger.js\");\n\n// Mock API config\nconst stubApiClientConfig: CivicWeb3ClientConfig = {\n  endpoints: { wallet: \"https://test-wallet-api.com\" },\n};\n\n// Mock user\nconst stubUser: User<UserDetailsWithAuth> = {\n  idToken: \"mock-token\",\n  id: \"mock-id\",\n  email: \"user@example.com\",\n  ethWalletAddress: \"0xMockWalletAddress\",\n  solWalletAddress: \"MockSolAddress\",\n} as User<UserDetailsWithAuth>;\n\n// Create stub for user without wallet addresses\nconst stubUserWithoutWallets: User<UserDetailsWithAuth> = {\n  ...stubUser,\n  ethWalletAddress: undefined,\n  solWalletAddress: undefined,\n} as User<UserDetailsWithAuth>;\n\n// Stub wallet response\nconst stubWallets = {\n  ethAddress: \"0xMockWalletAddress\",\n  solAddress: \"MockSolAddress\",\n};\n\n// Stub CivicMetakeepApiClient\nconst stubCivicApiClient = {\n  user: stubUser,\n  config: stubApiClientConfig,\n  createWallet: vi.fn(async () => ({\n    wallet: stubWallets,\n    config: {\n      metakeep: {\n        ethereum: { publicAppId: \"mockEthId\" },\n        solana: { publicAppId: \"mockSolId\" },\n      },\n    },\n  })),\n  getWallet: vi.fn(async () => ({\n    wallet: stubWallets,\n    config: {\n      metakeep: {\n        ethereum: { publicAppId: \"mockEthId\" },\n        solana: { publicAppId: \"mockSolId\" },\n      },\n    },\n  })),\n  getConfig: vi.fn(async () => ({\n    config: {\n      metakeep: {\n        ethereum: { publicAppId: \"mockEthId\" },\n        solana: { publicAppId: \"mockSolId\" },\n      },\n    },\n  })),\n  checkWalletCreationPermission: vi.fn(async () => true),\n} as unknown as CivicMetakeepApiClient;\n\ndescribe(\"MetakeepServerWeb3Client\", () => {\n  let client: ServerWeb3Client;\n\n  beforeEach(() => {\n    vi.clearAllMocks();\n    vi.mocked(CivicMetakeepApiClient).mockReturnValue(stubCivicApiClient);\n  });\n\n  describe(\"build\", () => {\n    it(\"should use wallet addresses from user if available\", async () => {\n      client = await MetakeepServerWeb3Client.build(\n        stubApiClientConfig,\n        stubUser,\n      );\n\n      expect(CivicMetakeepApiClient).toHaveBeenCalledWith(\n        stubUser,\n        stubApiClientConfig,\n      );\n      expect(stubCivicApiClient.getWallet).not.toHaveBeenCalled();\n      expect(stubCivicApiClient.createWallet).not.toHaveBeenCalled();\n\n      expect(client.ethereum.address).toBe(\"0xMockWalletAddress\");\n      expect(client.solana.address).toBe(\"MockSolAddress\");\n    });\n\n    it(\"should fetch existing wallet if user has no wallet addresses\", async () => {\n      client = await MetakeepServerWeb3Client.build(\n        stubApiClientConfig,\n        stubUserWithoutWallets,\n      );\n\n      expect(CivicMetakeepApiClient).toHaveBeenCalledWith(\n        stubUserWithoutWallets,\n        stubApiClientConfig,\n      );\n      expect(\n        stubCivicApiClient.checkWalletCreationPermission,\n      ).toHaveBeenCalled();\n      expect(stubCivicApiClient.createWallet).toHaveBeenCalled();\n\n      expect(client.ethereum.address).toBe(\"0xMockWalletAddress\");\n      expect(client.solana.address).toBe(\"MockSolAddress\");\n    });\n\n    it(\"should check wallet creation permissions when creating a new wallet\", async () => {\n      await MetakeepServerWeb3Client.build(\n        stubApiClientConfig,\n        stubUserWithoutWallets,\n      );\n\n      expect(\n        stubCivicApiClient.checkWalletCreationPermission,\n      ).toHaveBeenCalled();\n    });\n\n    it(\"should throw an error if wallet creation is not allowed\", async () => {\n      vi.mocked(\n        stubCivicApiClient.checkWalletCreationPermission,\n      ).mockResolvedValueOnce(false);\n\n      const shouldFail = MetakeepServerWeb3Client.build(\n        stubApiClientConfig,\n        stubUserWithoutWallets,\n      );\n\n      await expect(shouldFail).rejects.toThrowError(\n        \"Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.\",\n      );\n      expect(stubCivicApiClient.createWallet).not.toHaveBeenCalled();\n    });\n\n    it(\"should throw error if wallet creation fails\", async () => {\n      // Stub a failed wallet creation\n      vi.mocked(stubCivicApiClient.createWallet).mockResolvedValueOnce({\n        wallet: { ethAddress: undefined, solAddress: undefined },\n      } as unknown as WalletResponse);\n\n      await expect(\n        MetakeepServerWeb3Client.build(\n          stubApiClientConfig,\n          stubUserWithoutWallets,\n        ),\n      ).rejects.toThrow(/Failed to create wallet/);\n    });\n  });\n\n  describe(\"createWallets\", () => {\n    it(\"should return existing wallet addresses\", async () => {\n      client = await MetakeepServerWeb3Client.build(\n        stubApiClientConfig,\n        stubUser,\n      );\n\n      const walletAddresses = await client.createWallets();\n\n      expect(stubCivicApiClient.createWallet).not.toHaveBeenCalled();\n      expect(walletAddresses).toEqual({\n        ethereum: { address: \"0xMockWalletAddress\" },\n        solana: { address: \"MockSolAddress\" },\n      });\n    });\n\n    it(\"should create new wallets if addresses don't exist\", async () => {\n      // Create a client with undefined wallet addresses initially\n      const clientWithoutWallets = new MetakeepServerWeb3Client(\n        { ethereum: undefined, solana: undefined },\n        stubUserWithoutWallets,\n        stubApiClientConfig,\n      );\n\n      const walletAddresses = await clientWithoutWallets.createWallets();\n\n      expect(stubCivicApiClient.createWallet).toHaveBeenCalled();\n      expect(walletAddresses).toEqual({\n        ethereum: { address: \"0xMockWalletAddress\" },\n        solana: { address: \"MockSolAddress\" },\n      });\n    });\n\n    it(\"should throw error if wallet creation fails in createWallets\", async () => {\n      // Create a client with undefined wallet addresses\n      const clientWithoutWallets = new MetakeepServerWeb3Client(\n        { ethereum: undefined, solana: undefined },\n        stubUserWithoutWallets,\n        stubApiClientConfig,\n      );\n\n      // Stub a failed wallet creation\n      vi.mocked(stubCivicApiClient.createWallet).mockResolvedValueOnce({\n        wallet: { ethAddress: undefined, solAddress: undefined },\n      } as unknown as WalletResponse);\n\n      await expect(clientWithoutWallets.createWallets()).rejects.toThrow(\n        \"Failed to create or retrieve wallet addresses\",\n      );\n    });\n  });\n\n  describe(\"disconnect\", () => {\n    it(\"should set connected to false\", async () => {\n      client = await MetakeepServerWeb3Client.build(\n        stubApiClientConfig,\n        stubUser,\n      );\n\n      expect(client.connected).toBe(true);\n\n      await client.disconnect();\n\n      expect(client.connected).toBe(false);\n    });\n  });\n});\n"]}
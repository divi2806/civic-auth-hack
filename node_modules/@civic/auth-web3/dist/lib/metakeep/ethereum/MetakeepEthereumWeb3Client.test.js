import { describe, it, expect, vi, beforeEach } from "vitest";
import { INITIAL_CHAIN, MetakeepEthereumWeb3Client, } from "./MetakeepEthereumWeb3Client.js";
import { createWalletClient, custom } from "viem";
import { createTypedProvider } from "../../ethereum/index.js";
// stub dependencies
let metakeepConstructorParams;
vi.mock("metakeep", async () => {
    const MetakeepStub = vi.fn((params) => {
        metakeepConstructorParams = params;
    });
    MetakeepStub.prototype.ethereum = Promise.resolve({
        enable: vi.fn(),
    });
    return { default: { MetaKeep: MetakeepStub } };
});
vi.mock("viem");
vi.mock("../../ethereum/index.js");
// Mock API config
const stubConfig = {
    endpoints: {
        rpcs: {
            [INITIAL_CHAIN.id]: {
                http: ["https://mock-rpc-url.com"],
            },
        },
    },
    metakeep: {
        ethereum: { publicAppId: "mockEthAppId" },
        solana: { publicAppId: "mockSolAppId" },
    },
};
const stubUser = {
    id: "mock-id",
    email: "user@example.com",
};
// Mock Ethereum provider
const mockTypedProvider = {
    request: vi.fn(),
    on: vi.fn(),
    removeListener: vi.fn(),
    disconnect: vi.fn(),
};
describe("MetakeepEthereumWeb3Client", () => {
    let client;
    const mockAddress = "0xMockWalletAddress";
    beforeEach(async () => {
        vi.mocked(createTypedProvider).mockReturnValue(mockTypedProvider);
        client = await MetakeepEthereumWeb3Client.build(stubConfig, stubUser, mockAddress);
    });
    it("should initialize the provider and Viem client", async () => {
        expect(createWalletClient).toHaveBeenCalledWith({
            chain: INITIAL_CHAIN,
            transport: custom(mockTypedProvider),
            account: mockAddress,
        });
    });
    describe("Metakeep constructor", () => {
        it("should call metakeep constructor with baseSepolia defaiult if no initialChain is passed in", () => {
            expect(metakeepConstructorParams.chainId).toEqual(84532); // baseSepolia
        });
        it("should call metakeep constructor with initialChain param if passed in", async () => {
            client = await MetakeepEthereumWeb3Client.build({ ...stubConfig, initialChain: { id: 123456 } }, stubUser, mockAddress);
            expect(metakeepConstructorParams.chainId).toEqual(123456);
        });
    });
    describe("disconnect()", () => {
        it("should disconnect the provider", async () => {
            await client.disconnect();
            expect(mockTypedProvider.disconnect).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=MetakeepEthereumWeb3Client.test.js.map
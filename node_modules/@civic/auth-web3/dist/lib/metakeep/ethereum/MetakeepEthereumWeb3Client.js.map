{"version":3,"file":"MetakeepEthereumWeb3Client.js","sourceRoot":"","sources":["../../../../src/lib/metakeep/ethereum/MetakeepEthereumWeb3Client.ts"],"names":[],"mappings":"AAAA,OAAO,WAAW,MAAM,UAAU,CAAC;AAEnC,OAAO,EAEL,kBAAkB,EAClB,MAAM,GAEP,MAAM,MAAM,CAAC;AAEd,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAE,mBAAmB,EAAE,MAAM,yBAAyB,CAAC;AAC9D,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AAEzC,OAAO,EAAE,iCAAiC,EAAE,MAAM,sBAAsB,CAAC;AAEzE,OAAO,EAAuB,iBAAiB,EAAE,MAAM,YAAY,CAAC;AAEpE,MAAM,CAAC,MAAM,aAAa,GAAG,WAAW,CAAC,CAAC,qDAAqD;AAE/F;;;;;GAKG;AACH,MAAM,OAAO,0BAA0B;IAe3B;IACA;IACC;IAhBX;;;OAGG;IACH,QAAQ,CAA+B;IACvC;;;OAGG;IACH,MAAM,CAAsB;IAE5B,GAAG,CAAuB;IAE1B,YACU,MAA4D,EAC5D,IAAuB,EACtB,OAAgB;QAFjB,WAAM,GAAN,MAAM,CAAsD;QAC5D,SAAI,GAAJ,IAAI,CAAmB;QACtB,YAAO,GAAP,OAAO,CAAS;QAEzB,IAAI,CAAC,GAAG,GAAG,IAAI,WAAW,CAAC,QAAQ,CAAC;YAClC,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW;YAC3C,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE;YAC3B,mCAAmC;YACnC,OAAO,EAAE,MAAM,CAAC,YAAY,EAAE,EAAE,IAAI,aAAa,CAAC,EAAE;YACpD,WAAW,EAAE,iBAAiB,CAAC,iCAAiC,CAAC,MAAM,CAAC,CAAC;SAC1E,CAAC,CAAC;QAEH,uDAAuD;QACvD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvB,CAAC;IAEO,KAAK,CAAC,IAAI;QAChB,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;QACzC,MAAM,QAAQ,CAAC,MAAM,EAAE,CAAC;QACxB,MAAM,aAAa,GAAG,mBAAmB,CAAC,QAAQ,CAAC,CAAC;QACpD,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC;QAE9B,IAAI,CAAC,MAAM,GAAG,kBAAkB,CAAC;YAC/B,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,YAAY,IAAI,aAAa;YAChD,SAAS,EAAE,MAAM,CAAC,aAAa,CAAC;YAChC,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,UAAU;QACrB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CACxB,iCAAiC,EACjC,IAAI,CAAC,QAAQ,CACd,CAAC;QACF,IAAI,CAAC,QAAQ,EAAE,UAAU,EAAE,CAAC;IAC9B,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,KAAK,CAAC,KAAK,CAChB,MAA4D,EAC5D,IAAuB,EACvB,OAAgB;QAEhB,MAAM,MAAM,GAAG,IAAI,0BAA0B,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACrE,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QACpB,OAAO,MAAM,CAAC;IAChB,CAAC;CACF","sourcesContent":["import MetakeepSDK from \"metakeep\";\nimport type { CivicWeb3ClientConfig, UserDetails } from \"../../../types.js\";\nimport {\n  type Address,\n  createWalletClient,\n  custom,\n  type WalletClient,\n} from \"viem\";\nimport type { EthereumWeb3Client } from \"../../ethereum/EthereumWeb3Client.js\";\nimport { baseSepolia } from \"viem/chains\";\nimport { createTypedProvider } from \"../../ethereum/index.js\";\nimport { logger } from \"../../logger.js\";\nimport type { TypedEthereumProvider } from \"../../ethereum/EIP1193ProviderImpl.js\";\nimport { getEthereumProviderRPCsFromConfig } from \"../../walletUtils.js\";\nimport type { User } from \"@civic/auth\";\nimport { type MetakeepConfig, toMetakeepRpcUrls } from \"../util.js\";\n\nexport const INITIAL_CHAIN = baseSepolia; // initial chain, can be switched later by the client\n\n/**\n * The Metakeep implementation of the generic Web3Client interface.\n * Web3Client provides all clients (react and non-react) a common interface to\n * web3 wallet functionality, an address and a ViemClient, as well as a function to register a new wallet\n * This class implements this using Metakeep, hiding the details from the client.\n */\nexport class MetakeepEthereumWeb3Client implements EthereumWeb3Client {\n  /**\n   * An EIP1193 provider wrapping metakeep\n   * Will be null if the user does not yet have a wallet, or if init is not yet called\n   */\n  provider: TypedEthereumProvider | null;\n  /**\n   * A viem client based on the above provider\n   * Will be null if the user does not yet have a wallet, or if init is not yet called\n   */\n  client: WalletClient | null;\n\n  sdk: MetakeepSDK.MetaKeep;\n\n  constructor(\n    private config: CivicWeb3ClientConfig & { metakeep: MetakeepConfig },\n    private user: User<UserDetails>,\n    readonly address: Address,\n  ) {\n    this.sdk = new MetakeepSDK.MetaKeep({\n      appId: config.metakeep.ethereum.publicAppId,\n      user: { email: user.email },\n      // Default chainId - can be changed\n      chainId: config.initialChain?.id ?? INITIAL_CHAIN.id,\n      rpcNodeUrls: toMetakeepRpcUrls(getEthereumProviderRPCsFromConfig(config)),\n    });\n\n    // call init() to create the wallet client and provider\n    this.client = null;\n    this.provider = null;\n  }\n\n  private async init() {\n    const provider = await this.sdk.ethereum;\n    await provider.enable();\n    const typedProvider = createTypedProvider(provider);\n    this.provider = typedProvider;\n\n    this.client = createWalletClient({\n      chain: this.config.initialChain ?? INITIAL_CHAIN,\n      transport: custom(typedProvider),\n      account: this.address,\n    });\n  }\n\n  public async disconnect(): Promise<void> {\n    logger.web3.metakeep.debug(\n      \"Metakeep provider disconnecting\",\n      this.provider,\n    );\n    this.provider?.disconnect();\n  }\n\n  /**\n   * Create and initialise a web3 client (which wraps a Viem WalletClient)\n   * @param config\n   * @param user\n   * @param address\n   */\n  static async build(\n    config: CivicWeb3ClientConfig & { metakeep: MetakeepConfig },\n    user: User<UserDetails>,\n    address: Address,\n  ): Promise<EthereumWeb3Client> {\n    const client = new MetakeepEthereumWeb3Client(config, user, address);\n    await client.init();\n    return client;\n  }\n}\n"]}
{"version":3,"file":"MetakeepEthereumWeb3Client.test.js","sourceRoot":"","sources":["../../../../src/lib/metakeep/ethereum/MetakeepEthereumWeb3Client.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect, vi, beforeEach } from \"vitest\";\nimport {\n  INITIAL_CHAIN,\n  MetakeepEthereumWeb3Client,\n} from \"./MetakeepEthereumWeb3Client.js\";\nimport { createWalletClient, custom, type Chain } from \"viem\";\nimport type { CivicWeb3ClientConfig, UserDetails } from \"../../../types.js\";\nimport type { TypedEthereumProvider } from \"../../ethereum/EIP1193ProviderImpl.js\";\nimport { createTypedProvider } from \"../../ethereum/index.js\";\nimport type { EthereumWeb3Client } from \"../../ethereum/EthereumWeb3Client.js\";\nimport type { MetakeepConfig } from \"../util.js\";\nimport type { User } from \"@civic/auth\";\n\n// stub dependencies\nlet metakeepConstructorParams: Record<string, unknown>;\nvi.mock(\"metakeep\", async () => {\n  const MetakeepStub = vi.fn((params) => {\n    metakeepConstructorParams = params;\n  });\n  MetakeepStub.prototype.ethereum = Promise.resolve({\n    enable: vi.fn(),\n  });\n  return { default: { MetaKeep: MetakeepStub } };\n});\nvi.mock(\"viem\");\nvi.mock(\"../../ethereum/index.js\");\n\n// Mock API config\nconst stubConfig: CivicWeb3ClientConfig & { metakeep: MetakeepConfig } = {\n  endpoints: {\n    rpcs: {\n      [INITIAL_CHAIN.id]: {\n        http: [\"https://mock-rpc-url.com\"],\n      },\n    },\n  },\n  metakeep: {\n    ethereum: { publicAppId: \"mockEthAppId\" },\n    solana: { publicAppId: \"mockSolAppId\" },\n  },\n};\n\nconst stubUser: User<UserDetails> = {\n  id: \"mock-id\",\n  email: \"user@example.com\",\n} as User<UserDetails>;\n\n// Mock Ethereum provider\nconst mockTypedProvider: TypedEthereumProvider = {\n  request: vi.fn(),\n  on: vi.fn(),\n  removeListener: vi.fn(),\n  disconnect: vi.fn(),\n};\n\ndescribe(\"MetakeepEthereumWeb3Client\", () => {\n  let client: EthereumWeb3Client;\n\n  const mockAddress = \"0xMockWalletAddress\";\n\n  beforeEach(async () => {\n    vi.mocked(createTypedProvider).mockReturnValue(mockTypedProvider);\n    client = await MetakeepEthereumWeb3Client.build(\n      stubConfig,\n      stubUser,\n      mockAddress,\n    );\n  });\n\n  it(\"should initialize the provider and Viem client\", async () => {\n    expect(createWalletClient).toHaveBeenCalledWith({\n      chain: INITIAL_CHAIN,\n      transport: custom(mockTypedProvider),\n      account: mockAddress,\n    });\n  });\n\n  describe(\"Metakeep constructor\", () => {\n    it(\"should call metakeep constructor with baseSepolia defaiult if no initialChain is passed in\", () => {\n      expect(metakeepConstructorParams.chainId).toEqual(84532); // baseSepolia\n    });\n\n    it(\"should call metakeep constructor with initialChain param if passed in\", async () => {\n      client = await MetakeepEthereumWeb3Client.build(\n        { ...stubConfig, initialChain: { id: 123456 } as Chain },\n        stubUser,\n        mockAddress,\n      );\n      expect(metakeepConstructorParams.chainId).toEqual(123456);\n    });\n  });\n\n  describe(\"disconnect()\", () => {\n    it(\"should disconnect the provider\", async () => {\n      await client.disconnect();\n      expect(mockTypedProvider.disconnect).toHaveBeenCalled();\n    });\n  });\n});\n"]}
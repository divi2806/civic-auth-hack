import type { CivicWeb3ClientConfig, UserDetailsWithAuth, Wallets } from "../../types.js";
import type { User } from "@civic/auth";
import type { Web3Client } from "../Web3Client.js";
import type { EthereumWeb3Client } from "../ethereum/EthereumWeb3Client.js";
import type { SolanaWeb3Client } from "../solana/SolanaWeb3Client.js";
import type { Connection } from "@solana/web3.js";
type WalletConfig = {
    solanaConnection?: Connection;
};
export declare class MetakeepWeb3Client implements Web3Client {
    private hooks;
    readonly ethereum: EthereumWeb3Client;
    readonly solana: SolanaWeb3Client;
    connected: boolean;
    constructor(ethereum: EthereumWeb3Client, solana: SolanaWeb3Client, hooks: {
        onSessionEnd?: () => void;
    });
    createWallets(): Promise<Wallets | null>;
    disconnect(): Promise<void>;
    /**
     * Build a Web3Client, that implements the Web3Client interface using Metakeep
     * @param civicApiConfig - the configuration for calling the civic wallet service API. Any metakeep config comes from the service itself
     * @param user - the user for whom the wallet cleint is being created
     * @param onSessionEnd
     */
    static build<TUserDetails extends UserDetailsWithAuth>(civicApiConfig: CivicWeb3ClientConfig & WalletConfig, user: User<TUserDetails>, onSessionEnd?: () => void): Promise<Web3Client>;
}
export {};
//# sourceMappingURL=MetakeepWeb3Client.d.ts.map
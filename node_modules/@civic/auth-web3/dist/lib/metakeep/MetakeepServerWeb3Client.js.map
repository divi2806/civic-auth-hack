{"version":3,"file":"MetakeepServerWeb3Client.js","sourceRoot":"","sources":["../../../src/lib/metakeep/MetakeepServerWeb3Client.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  CivicWeb3ClientConfig,\n  UserDetailsWithAuth,\n} from \"../../types.js\";\nimport type { User } from \"@civic/auth\";\nimport { CivicMetakeepApiClient } from \"./civicApiClient.js\";\nimport { logger } from \"../logger.js\";\n\n/**\n * Server-side version of Web3Client interface\n * Stripped down to only include addresses, not actual wallet implementations\n * which don't work server-side\n */\nexport interface ServerWeb3Client {\n  ethereum: { address: string | undefined };\n  solana: { address: string | undefined };\n  connected: boolean;\n\n  createWallets(): Promise<{\n    ethereum: { address: string };\n    solana: { address: string };\n  }>;\n\n  disconnect(): Promise<void>;\n}\n\n/**\n * MetakeepServerWeb3Client - A simplified server-side implementation of the Web3Client interface\n * that works without browser-specific Metakeep SDK, only requiring API access.\n */\nexport class MetakeepServerWeb3Client implements ServerWeb3Client {\n  ethereum: { address: string | undefined };\n  solana: { address: string | undefined };\n  connected: boolean = true;\n\n  private civicApiClient: CivicMetakeepApiClient;\n\n  constructor(\n    private addresses: {\n      ethereum: string | undefined;\n      solana: string | undefined;\n    },\n    user: User<UserDetailsWithAuth>,\n    config: CivicWeb3ClientConfig,\n  ) {\n    this.ethereum = { address: addresses.ethereum };\n    this.solana = { address: addresses.solana };\n    this.civicApiClient = new CivicMetakeepApiClient(user, config);\n  }\n\n  async createWallets() {\n    // Create wallet if it doesn't exist\n    if (!this.addresses.ethereum || !this.addresses.solana) {\n      const { wallet } = await this.civicApiClient.createWallet();\n      this.addresses = {\n        ethereum: wallet.ethAddress,\n        solana: wallet.solAddress,\n      };\n      this.ethereum.address = this.addresses.ethereum;\n      this.solana.address = this.addresses.solana;\n    }\n\n    // At this point, we should definitely have addresses\n    if (!this.addresses.ethereum || !this.addresses.solana) {\n      throw new Error(\"Failed to create or retrieve wallet addresses\");\n    }\n\n    return {\n      ethereum: { address: this.addresses.ethereum },\n      solana: { address: this.addresses.solana },\n    };\n  }\n\n  async disconnect() {\n    // No actual disconnection needed on server side\n    this.connected = false;\n    return Promise.resolve();\n  }\n\n  /**\n   * Build a MetakeepServerWeb3Client instance\n   * This follows the same pattern as MetakeepWeb3Client.build() to maintain consistency\n   */\n  static async build<TUserDetails extends UserDetailsWithAuth>(\n    config: CivicWeb3ClientConfig,\n    user: User<TUserDetails>,\n  ): Promise<ServerWeb3Client> {\n    const civicApiClient = new CivicMetakeepApiClient(user, config);\n\n    // Extract wallet addresses from user if available\n    const { ethWalletAddress, solWalletAddress } = user;\n    let addresses = { ethereum: ethWalletAddress, solana: solWalletAddress };\n\n    // If the wallet addresses are not part of the user object\n    // assume they don't have a wallet yet, and create one\n    if (!ethWalletAddress && !solWalletAddress) {\n      // Check if wallet creation is allowed for this app user before attempting to create one\n      const isWalletCreationAllowed =\n        await civicApiClient.checkWalletCreationPermission();\n      if (!isWalletCreationAllowed) {\n        throw new Error(\n          \"Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.\",\n        );\n      }\n\n      logger.web3?.metakeep?.debug?.(\n        \"No wallet present in user object - creating one\",\n      );\n      const { wallet } = await civicApiClient.createWallet();\n      addresses = {\n        ethereum: wallet.ethAddress,\n        solana: wallet.solAddress,\n      };\n    }\n\n    // If the user still doesn't have a wallet, throw an error\n    if (!addresses.ethereum || !addresses.solana) {\n      throw new Error(\n        `Failed to create wallet: Eth address: ${addresses.ethereum}, Sol address: ${addresses.solana}`,\n      );\n    }\n\n    return new MetakeepServerWeb3Client(addresses, user, config);\n  }\n}\n"]}
{"version":3,"file":"civicApiClient.js","sourceRoot":"","sources":["../../../src/lib/metakeep/civicApiClient.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  CivicWeb3ClientConfig,\n  PermissionsCheckResponse,\n  UserDetailsWithAuth,\n} from \"../../types.js\";\nimport type { User } from \"@civic/auth\";\nimport { env } from \"../utils.js\";\n\nconst DEFAULT_BASE_API =\n  env.NEXT_PUBLIC_WALLET_API_BASE_URL || \"https://api.civic.com/metakeep\";\n\n// configuration required to set up the wallet client\nexport type ConfigResponse = {\n  config: {\n    metakeep: {\n      solana: {\n        publicAppId: string;\n      };\n      ethereum: {\n        publicAppId: string;\n      };\n    };\n  };\n};\n\nexport type WalletResponse = {\n  wallet: {\n    ethAddress: string;\n    solAddress: string;\n  };\n} & ConfigResponse; // for optimisation, the wallet get and create calls also return the config\n\nexport class CivicMetakeepApiClient {\n  // The configuration for the client, including the base URL for the wallet API (defaulted if not provided)\n  readonly config: CivicWeb3ClientConfig & { endpoints: { wallet: string } };\n  private walletCreationAllowed: boolean | null = null;\n\n  constructor(\n    readonly user: User<UserDetailsWithAuth>,\n    config: Partial<CivicWeb3ClientConfig> = {},\n  ) {\n    this.config = {\n      ...config,\n      endpoints: {\n        wallet: DEFAULT_BASE_API,\n        ...config?.endpoints,\n      },\n    };\n  }\n\n  // An authenticated request to the wallet service to get the configuration\n  async getConfig(): Promise<ConfigResponse> {\n    const url = `${this.config.endpoints.wallet}/config`;\n    const response = await fetch(url, {\n      headers: {\n        Authorization: `Bearer ${this.user.idToken}`,\n      },\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to get config: ${response.statusText}`);\n    }\n    return response.json();\n  }\n\n  async getWallet(): Promise<WalletResponse> {\n    const url = `${this.config.endpoints.wallet}/wallet`;\n    const response = await fetch(url, {\n      headers: {\n        Authorization: `Bearer ${this.user.idToken}`,\n      },\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to get wallet: ${response.statusText}`);\n    }\n    return response.json();\n  }\n\n  async checkWalletCreationPermission(): Promise<boolean> {\n    // Return cached result if available\n    if (this.walletCreationAllowed !== null) {\n      return this.walletCreationAllowed;\n    }\n\n    try {\n      // TODO re-enable query parameters when the endpoint accepts it\n      // const url = `${this.config.endpoints.wallet}/permissions?type=walletCreation`;\n      const url = `${this.config.endpoints.wallet}/permissions`;\n      const response = await fetch(url, {\n        headers: {\n          Authorization: `Bearer ${this.user.idToken}`,\n        },\n      });\n\n      if (!response.ok) {\n        console.error(\n          \"Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.\",\n        );\n        this.walletCreationAllowed = false;\n        return false;\n      }\n\n      const permissionsCheck =\n        (await response.json()) as PermissionsCheckResponse;\n      if (!permissionsCheck.walletCreation?.allowed) {\n        console.error(\n          \"Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.\",\n        );\n        this.walletCreationAllowed = false;\n        return false;\n      }\n\n      // Store the result\n      this.walletCreationAllowed = true;\n      return true;\n    } catch (error) {\n      console.error(\"Error checking wallet creation permission:\", error);\n      // For network errors, we don't cache the result and default to true\n      // to prevent blocking legitimate users due to temporary issues\n      console.error(\n        \"Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.\",\n      );\n      return false;\n    }\n  }\n\n  async createWallet(): Promise<WalletResponse> {\n    // Note: Permission checks are now handled at the Web3Client.build level\n    const url = `${this.config.endpoints.wallet}/wallet`;\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        Authorization: `Bearer ${this.user.idToken}`,\n      },\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to create wallet: ${response.statusText}`);\n    }\n    return response.json();\n  }\n}\n"]}
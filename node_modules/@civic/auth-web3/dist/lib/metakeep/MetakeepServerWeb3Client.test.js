import { describe, it, expect, vi, beforeEach } from "vitest";
import { MetakeepServerWeb3Client, } from "./MetakeepServerWeb3Client.js";
import { CivicMetakeepApiClient, } from "./civicApiClient.js";
// Mock dependencies
vi.mock("./civicApiClient.js");
vi.mock("../logger.js");
// Mock API config
const stubApiClientConfig = {
    endpoints: { wallet: "https://test-wallet-api.com" },
};
// Mock user
const stubUser = {
    idToken: "mock-token",
    id: "mock-id",
    email: "user@example.com",
    ethWalletAddress: "0xMockWalletAddress",
    solWalletAddress: "MockSolAddress",
};
// Create stub for user without wallet addresses
const stubUserWithoutWallets = {
    ...stubUser,
    ethWalletAddress: undefined,
    solWalletAddress: undefined,
};
// Stub wallet response
const stubWallets = {
    ethAddress: "0xMockWalletAddress",
    solAddress: "MockSolAddress",
};
// Stub CivicMetakeepApiClient
const stubCivicApiClient = {
    user: stubUser,
    config: stubApiClientConfig,
    createWallet: vi.fn(async () => ({
        wallet: stubWallets,
        config: {
            metakeep: {
                ethereum: { publicAppId: "mockEthId" },
                solana: { publicAppId: "mockSolId" },
            },
        },
    })),
    getWallet: vi.fn(async () => ({
        wallet: stubWallets,
        config: {
            metakeep: {
                ethereum: { publicAppId: "mockEthId" },
                solana: { publicAppId: "mockSolId" },
            },
        },
    })),
    getConfig: vi.fn(async () => ({
        config: {
            metakeep: {
                ethereum: { publicAppId: "mockEthId" },
                solana: { publicAppId: "mockSolId" },
            },
        },
    })),
    checkWalletCreationPermission: vi.fn(async () => true),
};
describe("MetakeepServerWeb3Client", () => {
    let client;
    beforeEach(() => {
        vi.clearAllMocks();
        vi.mocked(CivicMetakeepApiClient).mockReturnValue(stubCivicApiClient);
    });
    describe("build", () => {
        it("should use wallet addresses from user if available", async () => {
            client = await MetakeepServerWeb3Client.build(stubApiClientConfig, stubUser);
            expect(CivicMetakeepApiClient).toHaveBeenCalledWith(stubUser, stubApiClientConfig);
            expect(stubCivicApiClient.getWallet).not.toHaveBeenCalled();
            expect(stubCivicApiClient.createWallet).not.toHaveBeenCalled();
            expect(client.ethereum.address).toBe("0xMockWalletAddress");
            expect(client.solana.address).toBe("MockSolAddress");
        });
        it("should fetch existing wallet if user has no wallet addresses", async () => {
            client = await MetakeepServerWeb3Client.build(stubApiClientConfig, stubUserWithoutWallets);
            expect(CivicMetakeepApiClient).toHaveBeenCalledWith(stubUserWithoutWallets, stubApiClientConfig);
            expect(stubCivicApiClient.checkWalletCreationPermission).toHaveBeenCalled();
            expect(stubCivicApiClient.createWallet).toHaveBeenCalled();
            expect(client.ethereum.address).toBe("0xMockWalletAddress");
            expect(client.solana.address).toBe("MockSolAddress");
        });
        it("should check wallet creation permissions when creating a new wallet", async () => {
            await MetakeepServerWeb3Client.build(stubApiClientConfig, stubUserWithoutWallets);
            expect(stubCivicApiClient.checkWalletCreationPermission).toHaveBeenCalled();
        });
        it("should throw an error if wallet creation is not allowed", async () => {
            vi.mocked(stubCivicApiClient.checkWalletCreationPermission).mockResolvedValueOnce(false);
            const shouldFail = MetakeepServerWeb3Client.build(stubApiClientConfig, stubUserWithoutWallets);
            await expect(shouldFail).rejects.toThrowError("Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.");
            expect(stubCivicApiClient.createWallet).not.toHaveBeenCalled();
        });
        it("should throw error if wallet creation fails", async () => {
            // Stub a failed wallet creation
            vi.mocked(stubCivicApiClient.createWallet).mockResolvedValueOnce({
                wallet: { ethAddress: undefined, solAddress: undefined },
            });
            await expect(MetakeepServerWeb3Client.build(stubApiClientConfig, stubUserWithoutWallets)).rejects.toThrow(/Failed to create wallet/);
        });
    });
    describe("createWallets", () => {
        it("should return existing wallet addresses", async () => {
            client = await MetakeepServerWeb3Client.build(stubApiClientConfig, stubUser);
            const walletAddresses = await client.createWallets();
            expect(stubCivicApiClient.createWallet).not.toHaveBeenCalled();
            expect(walletAddresses).toEqual({
                ethereum: { address: "0xMockWalletAddress" },
                solana: { address: "MockSolAddress" },
            });
        });
        it("should create new wallets if addresses don't exist", async () => {
            // Create a client with undefined wallet addresses initially
            const clientWithoutWallets = new MetakeepServerWeb3Client({ ethereum: undefined, solana: undefined }, stubUserWithoutWallets, stubApiClientConfig);
            const walletAddresses = await clientWithoutWallets.createWallets();
            expect(stubCivicApiClient.createWallet).toHaveBeenCalled();
            expect(walletAddresses).toEqual({
                ethereum: { address: "0xMockWalletAddress" },
                solana: { address: "MockSolAddress" },
            });
        });
        it("should throw error if wallet creation fails in createWallets", async () => {
            // Create a client with undefined wallet addresses
            const clientWithoutWallets = new MetakeepServerWeb3Client({ ethereum: undefined, solana: undefined }, stubUserWithoutWallets, stubApiClientConfig);
            // Stub a failed wallet creation
            vi.mocked(stubCivicApiClient.createWallet).mockResolvedValueOnce({
                wallet: { ethAddress: undefined, solAddress: undefined },
            });
            await expect(clientWithoutWallets.createWallets()).rejects.toThrow("Failed to create or retrieve wallet addresses");
        });
    });
    describe("disconnect", () => {
        it("should set connected to false", async () => {
            client = await MetakeepServerWeb3Client.build(stubApiClientConfig, stubUser);
            expect(client.connected).toBe(true);
            await client.disconnect();
            expect(client.connected).toBe(false);
        });
    });
});
//# sourceMappingURL=MetakeepServerWeb3Client.test.js.map
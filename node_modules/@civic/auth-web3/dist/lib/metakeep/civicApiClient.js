import { env } from "../utils.js";
const DEFAULT_BASE_API = env.NEXT_PUBLIC_WALLET_API_BASE_URL || "https://api.civic.com/metakeep";
export class CivicMetakeepApiClient {
    user;
    // The configuration for the client, including the base URL for the wallet API (defaulted if not provided)
    config;
    walletCreationAllowed = null;
    constructor(user, config = {}) {
        this.user = user;
        this.config = {
            ...config,
            endpoints: {
                wallet: DEFAULT_BASE_API,
                ...config?.endpoints,
            },
        };
    }
    // An authenticated request to the wallet service to get the configuration
    async getConfig() {
        const url = `${this.config.endpoints.wallet}/config`;
        const response = await fetch(url, {
            headers: {
                Authorization: `Bearer ${this.user.idToken}`,
            },
        });
        if (!response.ok) {
            throw new Error(`Failed to get config: ${response.statusText}`);
        }
        return response.json();
    }
    async getWallet() {
        const url = `${this.config.endpoints.wallet}/wallet`;
        const response = await fetch(url, {
            headers: {
                Authorization: `Bearer ${this.user.idToken}`,
            },
        });
        if (!response.ok) {
            throw new Error(`Failed to get wallet: ${response.statusText}`);
        }
        return response.json();
    }
    async checkWalletCreationPermission() {
        // Return cached result if available
        if (this.walletCreationAllowed !== null) {
            return this.walletCreationAllowed;
        }
        try {
            // TODO re-enable query parameters when the endpoint accepts it
            // const url = `${this.config.endpoints.wallet}/permissions?type=walletCreation`;
            const url = `${this.config.endpoints.wallet}/permissions`;
            const response = await fetch(url, {
                headers: {
                    Authorization: `Bearer ${this.user.idToken}`,
                },
            });
            if (!response.ok) {
                console.error("Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.");
                this.walletCreationAllowed = false;
                return false;
            }
            const permissionsCheck = (await response.json());
            if (!permissionsCheck.walletCreation?.allowed) {
                console.error("Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.");
                this.walletCreationAllowed = false;
                return false;
            }
            // Store the result
            this.walletCreationAllowed = true;
            return true;
        }
        catch (error) {
            console.error("Error checking wallet creation permission:", error);
            // For network errors, we don't cache the result and default to true
            // to prevent blocking legitimate users due to temporary issues
            console.error("Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.");
            return false;
        }
    }
    async createWallet() {
        // Note: Permission checks are now handled at the Web3Client.build level
        const url = `${this.config.endpoints.wallet}/wallet`;
        const response = await fetch(url, {
            method: "POST",
            headers: {
                Authorization: `Bearer ${this.user.idToken}`,
            },
        });
        if (!response.ok) {
            throw new Error(`Failed to create wallet: ${response.statusText}`);
        }
        return response.json();
    }
}
//# sourceMappingURL=civicApiClient.js.map
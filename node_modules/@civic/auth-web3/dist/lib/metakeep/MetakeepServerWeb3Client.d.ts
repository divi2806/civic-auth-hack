import type { CivicWeb3ClientConfig, UserDetailsWithAuth } from "../../types.js";
import type { User } from "@civic/auth";
/**
 * Server-side version of Web3Client interface
 * Stripped down to only include addresses, not actual wallet implementations
 * which don't work server-side
 */
export interface ServerWeb3Client {
    ethereum: {
        address: string | undefined;
    };
    solana: {
        address: string | undefined;
    };
    connected: boolean;
    createWallets(): Promise<{
        ethereum: {
            address: string;
        };
        solana: {
            address: string;
        };
    }>;
    disconnect(): Promise<void>;
}
/**
 * MetakeepServerWeb3Client - A simplified server-side implementation of the Web3Client interface
 * that works without browser-specific Metakeep SDK, only requiring API access.
 */
export declare class MetakeepServerWeb3Client implements ServerWeb3Client {
    private addresses;
    ethereum: {
        address: string | undefined;
    };
    solana: {
        address: string | undefined;
    };
    connected: boolean;
    private civicApiClient;
    constructor(addresses: {
        ethereum: string | undefined;
        solana: string | undefined;
    }, user: User<UserDetailsWithAuth>, config: CivicWeb3ClientConfig);
    createWallets(): Promise<{
        ethereum: {
            address: string;
        };
        solana: {
            address: string;
        };
    }>;
    disconnect(): Promise<void>;
    /**
     * Build a MetakeepServerWeb3Client instance
     * This follows the same pattern as MetakeepWeb3Client.build() to maintain consistency
     */
    static build<TUserDetails extends UserDetailsWithAuth>(config: CivicWeb3ClientConfig, user: User<TUserDetails>): Promise<ServerWeb3Client>;
}
//# sourceMappingURL=MetakeepServerWeb3Client.d.ts.map
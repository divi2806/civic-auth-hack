{"version":3,"file":"MetakeepWeb3Client.js","sourceRoot":"","sources":["../../../src/lib/metakeep/MetakeepWeb3Client.ts"],"names":[],"mappings":"AAKA,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AAGtC,OAAO,EAAE,0BAA0B,EAAE,MAAM,0CAA0C,CAAC;AACtF,OAAO,EAAE,wBAAwB,EAAE,MAAM,sCAAsC,CAAC;AAChF,OAAO,EACL,sBAAsB,GAEvB,MAAM,qBAAqB,CAAC;AAc7B,MAAM,OAAO,kBAAkB;IAQnB;IAPD,QAAQ,CAAqB;IAC7B,MAAM,CAAmB;IAClC,SAAS,CAAU;IAEnB,YACE,QAA4B,EAC5B,MAAwB,EAChB,KAAoC;QAApC,UAAK,GAAL,KAAK,CAA+B;QAE5C,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,wGAAwG;QACxG,oEAAoE;QACpE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;YACpD,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;QAC/C,CAAC;QACD,OAAO;YACL,QAAQ,EAAE;gBACR,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO;gBAC9B,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;aAC7B;YACD,MAAM,EAAE;gBACN,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO;gBAC5B,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM;aAC3B;SACF,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,UAAU;QACrB,IAAI,CAAC,KAAK,CAAC,YAAY,EAAE,EAAE,CAAC;QAE5B,MAAM,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;QACjC,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;QAE/B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IACzB,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,KAAK,CAAC,KAAK,CAChB,cAAoD,EACpD,IAAwB,EACxB,YAAyB;QAEzB,MAAM,cAAc,GAAG,IAAI,sBAAsB,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QAExE,4FAA4F;QAC5F,IAAI,cAAwC,CAAC;QAE7C,0GAA0G;QAC1G,IAAI,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,GAAG,IAAI,CAAC;QAElD,0DAA0D;QAC1D,sDAAsD;QACtD,IAAI,CAAC,gBAAgB,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC3C,wFAAwF;YACxF,MAAM,uBAAuB,GAC3B,MAAM,cAAc,CAAC,6BAA6B,EAAE,CAAC;YACvD,IAAI,CAAC,uBAAuB,EAAE,CAAC;gBAC7B,MAAM,IAAI,KAAK,CACb,mHAAmH,CACpH,CAAC;YACJ,CAAC;YAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CACxB,iDAAiD,CAClD,CAAC;YACF,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,cAAc,CAAC,YAAY,EAAE,CAAC;YAC/D,gBAAgB,GAAG,MAAM,CAAC,UAAU,CAAC;YACrC,gBAAgB,GAAG,MAAM,CAAC,UAAU,CAAC;YACrC,cAAc,GAAG,MAAM,CAAC;QAC1B,CAAC;aAAM,CAAC;YACN,iFAAiF;YACjF,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,cAAc,CAAC,SAAS,EAAE,CAAC;YACpD,cAAc,GAAG,MAAM,CAAC;QAC1B,CAAC;QAED,0DAA0D;QAC1D,IAAI,CAAC,gBAAgB,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC3C,MAAM,IAAI,KAAK,CACb,yCAAyC,gBAAgB,kBAAkB,gBAAgB,EAAE,CAC9F,CAAC;QACJ,CAAC;QAED,kCAAkC;QAClC,MAAM,yBAAyB,GAAG,0BAA0B,CAAC,KAAK,CAChE;YACE,GAAG,cAAc;YACjB,QAAQ,EAAE,cAAc,CAAC,QAAQ;SAClC,EACD,IAAI,EACJ,gBAA2B,CAC5B,CAAC;QAEF,MAAM,uBAAuB,GAAG,wBAAwB,CAAC,KAAK,CAC5D;YACE,GAAG,cAAc;YACjB,QAAQ,EAAE,cAAc,CAAC,QAAQ;YACjC,gBAAgB,EAAE,cAAc,CAAC,gBAAgB;SAClD,EACD,IAAI,EACJ,gBAAgB,CACjB,CAAC;QAEF,MAAM,cAAc,GAAG,MAAM,yBAAyB,CAAC;QACvD,MAAM,YAAY,GAAG,MAAM,uBAAuB,CAAC;QACnD,OAAO,IAAI,kBAAkB,CAAC,cAAc,EAAE,YAAY,EAAE;YAC1D,YAAY;SACb,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import type {\n  CivicWeb3ClientConfig,\n  UserDetailsWithAuth,\n  Wallets,\n} from \"../../types.js\";\nimport { logger } from \"../logger.js\";\nimport type { User } from \"@civic/auth\";\nimport type { Web3Client } from \"../Web3Client.js\";\nimport { MetakeepEthereumWeb3Client } from \"./ethereum/MetakeepEthereumWeb3Client.js\";\nimport { MetakeepSolanaWeb3Client } from \"./solana/MetakeepSolanaWeb3Client.js\";\nimport {\n  CivicMetakeepApiClient,\n  type ConfigResponse,\n} from \"./civicApiClient.js\";\nimport type { Address } from \"viem\";\nimport type { EthereumWeb3Client } from \"../ethereum/EthereumWeb3Client.js\";\nimport type { SolanaWeb3Client } from \"../solana/SolanaWeb3Client.js\";\nimport type { Connection } from \"@solana/web3.js\";\n\ntype WalletConfig = {\n  // Optional solana connection object. If provided, the wallet can behave not just as a signer\n  // but also send transactions, just like a browser extension wallet.\n  // Adding this will automatically register the wallet using the Solana Wallet Standard for detection by\n  // wallet selection UI components\n  solanaConnection?: Connection;\n};\n\nexport class MetakeepWeb3Client implements Web3Client {\n  readonly ethereum: EthereumWeb3Client;\n  readonly solana: SolanaWeb3Client;\n  connected: boolean;\n\n  constructor(\n    ethereum: EthereumWeb3Client,\n    solana: SolanaWeb3Client,\n    private hooks: { onSessionEnd?: () => void },\n  ) {\n    this.ethereum = ethereum;\n    this.solana = solana;\n    this.connected = true;\n  }\n\n  async createWallets(): Promise<Wallets | null> {\n    // currently this function just returns the existing wallets, as they are automatically created on login\n    // We may choose to defer wallet creation in future to reduce costs.\n    if (!this.ethereum.address || !this.ethereum.client) {\n      throw new Error(\"Ethereum wallet not found\");\n    }\n    return {\n      ethereum: {\n        address: this.ethereum.address,\n        wallet: this.ethereum.client,\n      },\n      solana: {\n        address: this.solana.address,\n        wallet: this.solana.wallet,\n      },\n    };\n  }\n\n  public async disconnect(): Promise<void> {\n    this.hooks.onSessionEnd?.();\n\n    await this.ethereum.disconnect();\n    await this.solana.disconnect();\n\n    this.connected = false;\n  }\n\n  /**\n   * Build a Web3Client, that implements the Web3Client interface using Metakeep\n   * @param civicApiConfig - the configuration for calling the civic wallet service API. Any metakeep config comes from the service itself\n   * @param user - the user for whom the wallet cleint is being created\n   * @param onSessionEnd\n   */\n  static async build<TUserDetails extends UserDetailsWithAuth>(\n    civicApiConfig: CivicWeb3ClientConfig & WalletConfig,\n    user: User<TUserDetails>,\n    onSessionEnd?: () => void,\n  ): Promise<Web3Client> {\n    const civicApiClient = new CivicMetakeepApiClient(user, civicApiConfig);\n\n    // get the metakeep config either from the wallet creation request or a separate config call\n    let metakeepConfig: ConfigResponse[\"config\"];\n\n    // decide if we need to create or retrieve the wallet, based on the presence of a wallet claim in the user\n    let { ethWalletAddress, solWalletAddress } = user;\n\n    // if the wallet addresses are not part of the user object\n    // assume they don't have a wallet yet, and create one\n    if (!ethWalletAddress && !solWalletAddress) {\n      // Check if wallet creation is allowed for this app user before attempting to create one\n      const isWalletCreationAllowed =\n        await civicApiClient.checkWalletCreationPermission();\n      if (!isWalletCreationAllowed) {\n        throw new Error(\n          \"Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.\",\n        );\n      }\n\n      logger.web3.metakeep.debug(\n        \"No wallet present in user object - creating one\",\n      );\n      const { wallet, config } = await civicApiClient.createWallet();\n      ethWalletAddress = wallet.ethAddress;\n      solWalletAddress = wallet.solAddress;\n      metakeepConfig = config;\n    } else {\n      // no need to create a wallet, but we still need to ask the server for the config\n      const { config } = await civicApiClient.getConfig();\n      metakeepConfig = config;\n    }\n\n    // If the user still doesn't have a wallet, throw an error\n    if (!ethWalletAddress || !solWalletAddress) {\n      throw new Error(\n        `Failed to create wallet: Eth address: ${ethWalletAddress}, Sol address: ${solWalletAddress}`,\n      );\n    }\n\n    // create both clients in parallel\n    const ethereumWeb3ClientPromise = MetakeepEthereumWeb3Client.build(\n      {\n        ...civicApiConfig,\n        metakeep: metakeepConfig.metakeep,\n      },\n      user,\n      ethWalletAddress as Address,\n    );\n\n    const solanaWeb3ClientPromise = MetakeepSolanaWeb3Client.build(\n      {\n        ...civicApiConfig,\n        metakeep: metakeepConfig.metakeep,\n        solanaConnection: civicApiConfig.solanaConnection,\n      },\n      user,\n      solWalletAddress,\n    );\n\n    const ethereumClient = await ethereumWeb3ClientPromise;\n    const solanaClient = await solanaWeb3ClientPromise;\n    return new MetakeepWeb3Client(ethereumClient, solanaClient, {\n      onSessionEnd,\n    });\n  }\n}\n"]}
{"version":3,"file":"civicApiClient.test.js","sourceRoot":"","sources":["../../../src/lib/metakeep/civicApiClient.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect, vi, beforeEach } from \"vitest\";\nimport { CivicMetakeepApiClient } from \"./civicApiClient.js\";\nimport type {\n  CivicWeb3ClientConfig,\n  UserDetailsWithAuth,\n} from \"../../types.js\";\nimport type { User } from \"@civic/auth\";\n\n// Mock user object\nconst mockUser: User<UserDetailsWithAuth> = {\n  email: \"dummy-user@test.test\",\n  idToken: \"mock-token\",\n} as User<UserDetailsWithAuth>;\n\n// Mock fetch responses\nconst mockFetch = vi.fn();\n\ndescribe(\"CivicMetakeepApiClient\", () => {\n  let client: CivicMetakeepApiClient;\n\n  beforeEach(() => {\n    vi.stubGlobal(\"fetch\", mockFetch);\n    client = new CivicMetakeepApiClient(mockUser);\n  });\n\n  it(\"should initialize with default API endpoint\", () => {\n    expect(client.config.endpoints.wallet).toBe(\n      \"https://api.civic.com/metakeep\",\n    );\n  });\n\n  it(\"should allow overriding API endpoints\", () => {\n    const customConfig: Partial<CivicWeb3ClientConfig> = {\n      endpoints: { wallet: \"https://custom-wallet-api.com\" },\n    };\n\n    const customClient = new CivicMetakeepApiClient(mockUser, customConfig);\n\n    expect(customClient.config.endpoints.wallet).toBe(\n      \"https://custom-wallet-api.com\",\n    );\n  });\n\n  describe(\"getWallet\", () => {\n    it(\"should make a GET request and return wallet details\", async () => {\n      const mockResponse = { wallet: { ethAddress: \"0xMockAddress\" } };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      });\n\n      const result = await client.getWallet();\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        `${client.config.endpoints.wallet}/wallet`,\n        {\n          headers: { Authorization: \"Bearer mock-token\" },\n        },\n      );\n      expect(result).toEqual(mockResponse);\n    });\n\n    it(\"should throw an error if the request fails\", async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        statusText: \"Unauthorized\",\n      });\n\n      await expect(client.getWallet()).rejects.toThrow(\n        \"Failed to get wallet: Unauthorized\",\n      );\n    });\n  });\n\n  describe(\"getConfig\", () => {\n    it(\"should make a GET request and return config\", async () => {\n      const mockResponse = {\n        metakeep: { someRandomConfig: \"someRandomConfigValue\" },\n      };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      });\n\n      const result = await client.getConfig();\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        `${client.config.endpoints.wallet}/config`,\n        {\n          headers: { Authorization: \"Bearer mock-token\" },\n        },\n      );\n      expect(result).toEqual(mockResponse);\n    });\n\n    it(\"should throw an error if the request fails\", async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        statusText: \"Unauthorized\",\n      });\n\n      await expect(client.getConfig()).rejects.toThrow(\n        \"Failed to get config: Unauthorized\",\n      );\n    });\n  });\n\n  describe(\"createWallet\", () => {\n    it(\"should make a POST request and return wallet details\", async () => {\n      const mockResponse = { wallet: { ethAddress: \"0xMockAddress\" } };\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockResponse,\n      });\n\n      const result = await client.createWallet();\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        `${client.config.endpoints.wallet}/wallet`,\n        {\n          method: \"POST\",\n          headers: { Authorization: \"Bearer mock-token\" },\n        },\n      );\n      expect(result).toEqual(mockResponse);\n    });\n\n    it(\"should throw an error if the request fails\", async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        statusText: \"Internal Server Error\",\n      });\n\n      await expect(client.createWallet()).rejects.toThrow(\n        \"Failed to create wallet: Internal Server Error\",\n      );\n    });\n  });\n\n  describe(\"checkWalletCreationPermission\", () => {\n    it(\"should make a GET request to the permissions endpoint\", async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ walletCreation: { allowed: true } }),\n      });\n\n      const result = await client.checkWalletCreationPermission();\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        `${client.config.endpoints.wallet}/permissions`,\n        {\n          headers: { Authorization: \"Bearer mock-token\" },\n        },\n      );\n      expect(result).toBe(true);\n    });\n\n    it(\"should cache successful permission check results\", async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ allowed: true }),\n      });\n\n      await client.checkWalletCreationPermission();\n      await client.checkWalletCreationPermission(); // Second call should use cached result\n\n      // Fetch should only be called once\n      expect(mockFetch).toHaveBeenCalledTimes(1);\n    });\n\n    it(\"should return false for 401 unauthorized responses\", async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 401,\n      });\n\n      const result = await client.checkWalletCreationPermission();\n      expect(result).toBe(false);\n    });\n\n    it(\"should return false if walletCreation allowed is false\", async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ walletCreation: { allowed: false } }),\n      });\n\n      const result = await client.checkWalletCreationPermission();\n      expect(result).toBe(false);\n    });\n\n    it(\"should return true if walletCreation allowed is true\", async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ walletCreation: { allowed: true } }),\n      });\n\n      const result = await client.checkWalletCreationPermission();\n      expect(result).toBe(true);\n    });\n\n    it(\"should handle network errors and return false\", async () => {\n      // Mock console.error to prevent test output noise\n      const consoleErrorMock = vi\n        .spyOn(console, \"error\")\n        .mockImplementation(() => {});\n\n      // Simulate a network error\n      mockFetch.mockRejectedValueOnce(new Error(\"Network error\"));\n\n      const result = await client.checkWalletCreationPermission();\n\n      // Should have logged errors\n      expect(consoleErrorMock).toHaveBeenCalledWith(\n        \"Error checking wallet creation permission:\",\n        expect.any(Error),\n      );\n      expect(consoleErrorMock).toHaveBeenCalledWith(\n        \"Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.\",\n      );\n\n      // Should return false for network errors\n      expect(result).toBe(false);\n\n      // Restore the original console.error\n      consoleErrorMock.mockRestore();\n    });\n  });\n});\n"]}
import { logger } from "../logger.js";
import { MetakeepEthereumWeb3Client } from "./ethereum/MetakeepEthereumWeb3Client.js";
import { MetakeepSolanaWeb3Client } from "./solana/MetakeepSolanaWeb3Client.js";
import { CivicMetakeepApiClient, } from "./civicApiClient.js";
export class MetakeepWeb3Client {
    hooks;
    ethereum;
    solana;
    connected;
    constructor(ethereum, solana, hooks) {
        this.hooks = hooks;
        this.ethereum = ethereum;
        this.solana = solana;
        this.connected = true;
    }
    async createWallets() {
        // currently this function just returns the existing wallets, as they are automatically created on login
        // We may choose to defer wallet creation in future to reduce costs.
        if (!this.ethereum.address || !this.ethereum.client) {
            throw new Error("Ethereum wallet not found");
        }
        return {
            ethereum: {
                address: this.ethereum.address,
                wallet: this.ethereum.client,
            },
            solana: {
                address: this.solana.address,
                wallet: this.solana.wallet,
            },
        };
    }
    async disconnect() {
        this.hooks.onSessionEnd?.();
        await this.ethereum.disconnect();
        await this.solana.disconnect();
        this.connected = false;
    }
    /**
     * Build a Web3Client, that implements the Web3Client interface using Metakeep
     * @param civicApiConfig - the configuration for calling the civic wallet service API. Any metakeep config comes from the service itself
     * @param user - the user for whom the wallet cleint is being created
     * @param onSessionEnd
     */
    static async build(civicApiConfig, user, onSessionEnd) {
        const civicApiClient = new CivicMetakeepApiClient(user, civicApiConfig);
        // get the metakeep config either from the wallet creation request or a separate config call
        let metakeepConfig;
        // decide if we need to create or retrieve the wallet, based on the presence of a wallet claim in the user
        let { ethWalletAddress, solWalletAddress } = user;
        // if the wallet addresses are not part of the user object
        // assume they don't have a wallet yet, and create one
        if (!ethWalletAddress && !solWalletAddress) {
            // Check if wallet creation is allowed for this app user before attempting to create one
            const isWalletCreationAllowed = await civicApiClient.checkWalletCreationPermission();
            if (!isWalletCreationAllowed) {
                throw new Error("Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.");
            }
            logger.web3.metakeep.debug("No wallet present in user object - creating one");
            const { wallet, config } = await civicApiClient.createWallet();
            ethWalletAddress = wallet.ethAddress;
            solWalletAddress = wallet.solAddress;
            metakeepConfig = config;
        }
        else {
            // no need to create a wallet, but we still need to ask the server for the config
            const { config } = await civicApiClient.getConfig();
            metakeepConfig = config;
        }
        // If the user still doesn't have a wallet, throw an error
        if (!ethWalletAddress || !solWalletAddress) {
            throw new Error(`Failed to create wallet: Eth address: ${ethWalletAddress}, Sol address: ${solWalletAddress}`);
        }
        // create both clients in parallel
        const ethereumWeb3ClientPromise = MetakeepEthereumWeb3Client.build({
            ...civicApiConfig,
            metakeep: metakeepConfig.metakeep,
        }, user, ethWalletAddress);
        const solanaWeb3ClientPromise = MetakeepSolanaWeb3Client.build({
            ...civicApiConfig,
            metakeep: metakeepConfig.metakeep,
            solanaConnection: civicApiConfig.solanaConnection,
        }, user, solWalletAddress);
        const ethereumClient = await ethereumWeb3ClientPromise;
        const solanaClient = await solanaWeb3ClientPromise;
        return new MetakeepWeb3Client(ethereumClient, solanaClient, {
            onSessionEnd,
        });
    }
}
//# sourceMappingURL=MetakeepWeb3Client.js.map
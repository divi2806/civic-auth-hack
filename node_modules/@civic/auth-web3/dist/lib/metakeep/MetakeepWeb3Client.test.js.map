{"version":3,"file":"MetakeepWeb3Client.test.js","sourceRoot":"","sources":["../../../src/lib/metakeep/MetakeepWeb3Client.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect, vi, beforeEach } from \"vitest\";\nimport { MetakeepWeb3Client } from \"./MetakeepWeb3Client.js\";\nimport {\n  CivicMetakeepApiClient,\n  type WalletResponse,\n} from \"./civicApiClient.js\";\nimport { MetakeepEthereumWeb3Client } from \"./ethereum/MetakeepEthereumWeb3Client.js\";\nimport { MetakeepSolanaWeb3Client } from \"./solana/MetakeepSolanaWeb3Client.js\";\nimport type {\n  CivicWeb3ClientConfig,\n  SolanaWallet,\n  UserDetailsWithAuth,\n} from \"../../types.js\";\nimport type { User } from \"@civic/auth\";\nimport type { Web3Client } from \"../Web3Client.js\";\nimport type { EthereumWeb3Client } from \"../ethereum/EthereumWeb3Client.js\";\nimport type { SolanaWeb3Client } from \"../solana/SolanaWeb3Client.js\";\nimport type { WalletClient } from \"viem\";\n\n// Mock dependencies\nvi.mock(\"metakeep\");\nvi.mock(\"./ethereum/MetakeepEthereumWeb3Client.js\");\nvi.mock(\"./solana/MetakeepSolanaWeb3Client.js\");\nvi.mock(\"./civicApiClient.js\");\n\n// Mock API config\nconst stubApiClientConfig: CivicWeb3ClientConfig = {\n  endpoints: { rpcs: {} },\n};\nconst stubMetakeepConfig = {\n  metakeep: {\n    ethereum: { publicAppId: \"mockEthAppId\" },\n    solana: { publicAppId: \"mockSolAppId\" },\n  },\n};\n\n// Mock user\nconst stubUser: User<UserDetailsWithAuth> = {\n  idToken: \"mock-token\",\n  id: \"mock-id\",\n  email: \"user@example.com\",\n  ethWalletAddress: \"0xMockWalletAddress\",\n  solWalletAddress: \"MockSolAddress\",\n} as User<UserDetailsWithAuth>;\n\nconst stubWallets = {\n  ethAddress: \"0xMockWalletAddress\",\n  solAddress: \"MockSolAddress\",\n};\nconst stubCivicApiClient = {\n  user: stubUser,\n  config: stubApiClientConfig,\n  createWallet: vi.fn(async () => ({\n    wallet: stubWallets,\n    config: stubMetakeepConfig,\n  })),\n  getWallet: vi.fn(async () => ({\n    wallet: stubWallets,\n    config: stubMetakeepConfig,\n  })),\n  getConfig: vi.fn(async () => ({\n    config: stubMetakeepConfig,\n  })),\n  checkWalletCreationPermission: vi.fn(async () => true),\n} as unknown as CivicMetakeepApiClient;\n\n// Mock Ethereum and Solana clients\nconst mockEthereumClient: EthereumWeb3Client = {\n  address: \"0xMockWalletAddress\",\n  provider: null,\n  client: {} as WalletClient,\n  disconnect: vi.fn(),\n};\nconst mockSolanaClient: SolanaWeb3Client = {\n  address: \"MockSolAddress\",\n  wallet: {} as SolanaWallet,\n  disconnect: vi.fn(),\n};\n\ndescribe(\"MetakeepWeb3Client\", () => {\n  let client: Web3Client;\n\n  beforeEach(async () => {\n    vi.mocked(MetakeepEthereumWeb3Client.build).mockResolvedValue(\n      mockEthereumClient,\n    );\n    vi.mocked(MetakeepSolanaWeb3Client.build).mockResolvedValue(\n      mockSolanaClient,\n    );\n    vi.mocked(CivicMetakeepApiClient).mockReturnValue(stubCivicApiClient);\n\n    client = await MetakeepWeb3Client.build(stubApiClientConfig, stubUser);\n  });\n\n  it(\"should initialize Ethereum and Solana clients\", async () => {\n    const expectedConfig = {\n      ...stubApiClientConfig,\n      ...stubMetakeepConfig,\n    };\n    expect(MetakeepEthereumWeb3Client.build).toHaveBeenCalledWith(\n      expectedConfig,\n      stubUser,\n      \"0xMockWalletAddress\",\n    );\n    expect(MetakeepSolanaWeb3Client.build).toHaveBeenCalledWith(\n      expectedConfig,\n      stubUser,\n      \"MockSolAddress\",\n    );\n  });\n\n  it(\"should throw an error if no wallet addresses are found\", async () => {\n    const userWithoutWallets = {\n      ...stubUser,\n      ethWalletAddress: undefined,\n      solWalletAddress: undefined,\n    };\n    // we have to hack the types for this case\n    vi.mocked(stubCivicApiClient.createWallet).mockResolvedValue({\n      wallet: { ethAddress: undefined, solAddress: undefined },\n    } as unknown as WalletResponse);\n\n    const shouldFail = MetakeepWeb3Client.build(\n      stubApiClientConfig,\n      userWithoutWallets,\n    );\n    await expect(shouldFail).rejects.toThrowError(\n      \"Failed to create wallet: Eth address: undefined, Sol address: undefined\",\n    );\n  });\n\n  it(\"should check wallet creation permissions when creating a new wallet\", async () => {\n    const userWithoutWallets = {\n      ...stubUser,\n      ethWalletAddress: undefined,\n      solWalletAddress: undefined,\n    };\n\n    await MetakeepWeb3Client.build(stubApiClientConfig, userWithoutWallets);\n\n    expect(stubCivicApiClient.checkWalletCreationPermission).toHaveBeenCalled();\n  });\n\n  it(\"should throw an error if wallet creation is not allowed\", async () => {\n    const userWithoutWallets = {\n      ...stubUser,\n      ethWalletAddress: undefined,\n      solWalletAddress: undefined,\n    };\n\n    vi.mocked(\n      stubCivicApiClient.checkWalletCreationPermission,\n    ).mockResolvedValueOnce(false);\n\n    const shouldFail = MetakeepWeb3Client.build(\n      stubApiClientConfig,\n      userWithoutWallets,\n    );\n\n    await expect(shouldFail).rejects.toThrowError(\n      \"Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.\",\n    );\n  });\n\n  describe(\"createWallets\", () => {\n    it(\"should return existing wallets\", async () => {\n      const wallets = await client.createWallets();\n      expect(wallets).toEqual({\n        ethereum: {\n          address: \"0xMockWalletAddress\",\n          wallet: mockEthereumClient.client,\n        },\n        solana: { address: \"MockSolAddress\", wallet: mockSolanaClient.wallet },\n      });\n    });\n\n    // currently this function just returns the existing wallets, as they are automatically created on login\n    // We may choose to defer wallet creation in future to reduce costs.\n    it(\"should fail if existing wallets do not exist\", async () => {\n      const client = new MetakeepWeb3Client(\n        { address: null } as unknown as EthereumWeb3Client,\n        mockSolanaClient,\n        {},\n      );\n      const shouldFail = client.createWallets();\n      await expect(shouldFail).rejects.toThrowError(\n        \"Ethereum wallet not found\",\n      );\n    });\n  });\n\n  describe(\"disconnect()\", () => {\n    it(\"should disconnect both Ethereum and Solana clients\", async () => {\n      await client.disconnect();\n      expect(mockEthereumClient.disconnect).toHaveBeenCalled();\n      expect(mockSolanaClient.disconnect).toHaveBeenCalled();\n    });\n  });\n});\n"]}
import { CivicMetakeepApiClient } from "./civicApiClient.js";
import { logger } from "../logger.js";
/**
 * MetakeepServerWeb3Client - A simplified server-side implementation of the Web3Client interface
 * that works without browser-specific Metakeep SDK, only requiring API access.
 */
export class MetakeepServerWeb3Client {
    addresses;
    ethereum;
    solana;
    connected = true;
    civicApiClient;
    constructor(addresses, user, config) {
        this.addresses = addresses;
        this.ethereum = { address: addresses.ethereum };
        this.solana = { address: addresses.solana };
        this.civicApiClient = new CivicMetakeepApiClient(user, config);
    }
    async createWallets() {
        // Create wallet if it doesn't exist
        if (!this.addresses.ethereum || !this.addresses.solana) {
            const { wallet } = await this.civicApiClient.createWallet();
            this.addresses = {
                ethereum: wallet.ethAddress,
                solana: wallet.solAddress,
            };
            this.ethereum.address = this.addresses.ethereum;
            this.solana.address = this.addresses.solana;
        }
        // At this point, we should definitely have addresses
        if (!this.addresses.ethereum || !this.addresses.solana) {
            throw new Error("Failed to create or retrieve wallet addresses");
        }
        return {
            ethereum: { address: this.addresses.ethereum },
            solana: { address: this.addresses.solana },
        };
    }
    async disconnect() {
        // No actual disconnection needed on server side
        this.connected = false;
        return Promise.resolve();
    }
    /**
     * Build a MetakeepServerWeb3Client instance
     * This follows the same pattern as MetakeepWeb3Client.build() to maintain consistency
     */
    static async build(config, user) {
        const civicApiClient = new CivicMetakeepApiClient(user, config);
        // Extract wallet addresses from user if available
        const { ethWalletAddress, solWalletAddress } = user;
        let addresses = { ethereum: ethWalletAddress, solana: solWalletAddress };
        // If the wallet addresses are not part of the user object
        // assume they don't have a wallet yet, and create one
        if (!ethWalletAddress && !solWalletAddress) {
            // Check if wallet creation is allowed for this app user before attempting to create one
            const isWalletCreationAllowed = await civicApiClient.checkWalletCreationPermission();
            if (!isWalletCreationAllowed) {
                throw new Error("Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.");
            }
            logger.web3?.metakeep?.debug?.("No wallet present in user object - creating one");
            const { wallet } = await civicApiClient.createWallet();
            addresses = {
                ethereum: wallet.ethAddress,
                solana: wallet.solAddress,
            };
        }
        // If the user still doesn't have a wallet, throw an error
        if (!addresses.ethereum || !addresses.solana) {
            throw new Error(`Failed to create wallet: Eth address: ${addresses.ethereum}, Sol address: ${addresses.solana}`);
        }
        return new MetakeepServerWeb3Client(addresses, user, config);
    }
}
//# sourceMappingURL=MetakeepServerWeb3Client.js.map
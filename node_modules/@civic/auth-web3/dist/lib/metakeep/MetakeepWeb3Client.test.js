import { describe, it, expect, vi, beforeEach } from "vitest";
import { MetakeepWeb3Client } from "./MetakeepWeb3Client.js";
import { CivicMetakeepApiClient, } from "./civicApiClient.js";
import { MetakeepEthereumWeb3Client } from "./ethereum/MetakeepEthereumWeb3Client.js";
import { MetakeepSolanaWeb3Client } from "./solana/MetakeepSolanaWeb3Client.js";
// Mock dependencies
vi.mock("metakeep");
vi.mock("./ethereum/MetakeepEthereumWeb3Client.js");
vi.mock("./solana/MetakeepSolanaWeb3Client.js");
vi.mock("./civicApiClient.js");
// Mock API config
const stubApiClientConfig = {
    endpoints: { rpcs: {} },
};
const stubMetakeepConfig = {
    metakeep: {
        ethereum: { publicAppId: "mockEthAppId" },
        solana: { publicAppId: "mockSolAppId" },
    },
};
// Mock user
const stubUser = {
    idToken: "mock-token",
    id: "mock-id",
    email: "user@example.com",
    ethWalletAddress: "0xMockWalletAddress",
    solWalletAddress: "MockSolAddress",
};
const stubWallets = {
    ethAddress: "0xMockWalletAddress",
    solAddress: "MockSolAddress",
};
const stubCivicApiClient = {
    user: stubUser,
    config: stubApiClientConfig,
    createWallet: vi.fn(async () => ({
        wallet: stubWallets,
        config: stubMetakeepConfig,
    })),
    getWallet: vi.fn(async () => ({
        wallet: stubWallets,
        config: stubMetakeepConfig,
    })),
    getConfig: vi.fn(async () => ({
        config: stubMetakeepConfig,
    })),
    checkWalletCreationPermission: vi.fn(async () => true),
};
// Mock Ethereum and Solana clients
const mockEthereumClient = {
    address: "0xMockWalletAddress",
    provider: null,
    client: {},
    disconnect: vi.fn(),
};
const mockSolanaClient = {
    address: "MockSolAddress",
    wallet: {},
    disconnect: vi.fn(),
};
describe("MetakeepWeb3Client", () => {
    let client;
    beforeEach(async () => {
        vi.mocked(MetakeepEthereumWeb3Client.build).mockResolvedValue(mockEthereumClient);
        vi.mocked(MetakeepSolanaWeb3Client.build).mockResolvedValue(mockSolanaClient);
        vi.mocked(CivicMetakeepApiClient).mockReturnValue(stubCivicApiClient);
        client = await MetakeepWeb3Client.build(stubApiClientConfig, stubUser);
    });
    it("should initialize Ethereum and Solana clients", async () => {
        const expectedConfig = {
            ...stubApiClientConfig,
            ...stubMetakeepConfig,
        };
        expect(MetakeepEthereumWeb3Client.build).toHaveBeenCalledWith(expectedConfig, stubUser, "0xMockWalletAddress");
        expect(MetakeepSolanaWeb3Client.build).toHaveBeenCalledWith(expectedConfig, stubUser, "MockSolAddress");
    });
    it("should throw an error if no wallet addresses are found", async () => {
        const userWithoutWallets = {
            ...stubUser,
            ethWalletAddress: undefined,
            solWalletAddress: undefined,
        };
        // we have to hack the types for this case
        vi.mocked(stubCivicApiClient.createWallet).mockResolvedValue({
            wallet: { ethAddress: undefined, solAddress: undefined },
        });
        const shouldFail = MetakeepWeb3Client.build(stubApiClientConfig, userWithoutWallets);
        await expect(shouldFail).rejects.toThrowError("Failed to create wallet: Eth address: undefined, Sol address: undefined");
    });
    it("should check wallet creation permissions when creating a new wallet", async () => {
        const userWithoutWallets = {
            ...stubUser,
            ethWalletAddress: undefined,
            solWalletAddress: undefined,
        };
        await MetakeepWeb3Client.build(stubApiClientConfig, userWithoutWallets);
        expect(stubCivicApiClient.checkWalletCreationPermission).toHaveBeenCalled();
    });
    it("should throw an error if wallet creation is not allowed", async () => {
        const userWithoutWallets = {
            ...stubUser,
            ethWalletAddress: undefined,
            solWalletAddress: undefined,
        };
        vi.mocked(stubCivicApiClient.checkWalletCreationPermission).mockResolvedValueOnce(false);
        const shouldFail = MetakeepWeb3Client.build(stubApiClientConfig, userWithoutWallets);
        await expect(shouldFail).rejects.toThrowError("Embedded wallet feature is disabled. To enable it, go to the Crypto Wallets section in your Civic Auth Dashboard.");
    });
    describe("createWallets", () => {
        it("should return existing wallets", async () => {
            const wallets = await client.createWallets();
            expect(wallets).toEqual({
                ethereum: {
                    address: "0xMockWalletAddress",
                    wallet: mockEthereumClient.client,
                },
                solana: { address: "MockSolAddress", wallet: mockSolanaClient.wallet },
            });
        });
        // currently this function just returns the existing wallets, as they are automatically created on login
        // We may choose to defer wallet creation in future to reduce costs.
        it("should fail if existing wallets do not exist", async () => {
            const client = new MetakeepWeb3Client({ address: null }, mockSolanaClient, {});
            const shouldFail = client.createWallets();
            await expect(shouldFail).rejects.toThrowError("Ethereum wallet not found");
        });
    });
    describe("disconnect()", () => {
        it("should disconnect both Ethereum and Solana clients", async () => {
            await client.disconnect();
            expect(mockEthereumClient.disconnect).toHaveBeenCalled();
            expect(mockSolanaClient.disconnect).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=MetakeepWeb3Client.test.js.map
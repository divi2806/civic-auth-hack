import { BaseMessageSignerWalletAdapter, WalletError, WalletLoadError, WalletNotConnectedError, WalletNotReadyError, WalletReadyState, WalletSignTransactionError, } from "@solana/wallet-adapter-base";
import { PublicKey } from "@solana/web3.js";
import MetakeepSDK from "metakeep";
import { WALLET_LOGO } from "../../constants.js";
import { errorMessage } from "../../utils.js";
export const MetaKeepWalletName = "Civic";
export class MetakeepSolanaWalletAdapter extends BaseMessageSignerWalletAdapter {
    sdk;
    name = MetaKeepWalletName;
    url = "https://auth.civic.com";
    icon = WALLET_LOGO;
    publicKey;
    connecting;
    _connected;
    readyState = typeof globalThis.window === "undefined" ||
        typeof globalThis.document === "undefined"
        ? WalletReadyState.Unsupported
        : WalletReadyState.Loadable;
    constructor(address, sdk) {
        super();
        this.sdk = sdk;
        this.publicKey = new PublicKey(address);
        this.connecting = false;
        this._connected = false;
        // Bind methods so they keep the proper "this" context
        this.connect = this.connect.bind(this);
        this.disconnect = this.disconnect.bind(this);
        this.signMessage = this.signMessage.bind(this);
        this.signTransaction = this.signTransaction.bind(this);
        this.signIn = this.signIn.bind(this);
    }
    async signIn(input) {
        console.error("Solana Sign In not implemented", { input });
        throw new Error("Method not implemented.");
    }
    get connected() {
        return this._connected;
    }
    async connect() {
        if (this.connected || this.connecting)
            return;
        console.debug("MetaKeepSolanaWalletAdapter connecting");
        this.connecting = true;
        try {
            if (this.readyState !== WalletReadyState.Loadable)
                throw new WalletNotReadyError();
            this._connected = true;
            this.emit("connect", this.publicKey);
        }
        catch (error) {
            if (error instanceof WalletError) {
                this.emit("error", error);
                throw error;
            }
            throw new WalletLoadError(errorMessage(error), error);
        }
        finally {
            this.connecting = false;
        }
    }
    async disconnect() {
        // Only log and process if connected
        if (!this.connected)
            return;
        console.debug("MetaKeepWalletAdapter disconnecting");
        // Set connected to false BEFORE emitting disconnect
        // This prevents re-entry into this method
        this._connected = false;
        this.connecting = false;
        this.emit("disconnect");
    }
    async signMessage(message) {
        console.debug("MetaKeepWalletAdapter signing message");
        if (!this.connected)
            throw new WalletNotConnectedError();
        // Sign message using MetaKeep SDK
        try {
            const signedMessage = await this.sdk.signMessage(new TextDecoder().decode(message), "sign a message");
            // Convert hex to Uint8Array
            return Buffer.from(signedMessage.signature.slice(2), "hex");
        }
        catch (error) {
            console.error("Error signing message", error);
            throw new WalletSignTransactionError(errorMessage(error), error);
        }
    }
    get supportedTransactionVersions() {
        return new Set(["0", "legacy"]);
    }
    async signTransaction(transaction) {
        console.debug("MetaKeepWalletAdapter signing transaction");
        if (!this.connected)
            throw new WalletNotConnectedError();
        // Sign transaction using MetaKeep SDK
        try {
            const signedTransaction = await this.sdk.signTransaction(transaction, "sign a transaction");
            // Add signature to transaction
            const signature = Buffer.from(signedTransaction.signature.slice(2), "hex");
            transaction.addSignature(this.publicKey, signature);
            return transaction;
        }
        catch (error) {
            console.error("Error signing transaction", error);
            throw new WalletSignTransactionError(errorMessage(error), error);
        }
    }
}
//# sourceMappingURL=MetakeepSolanaWalletAdapter.js.map
{"version":3,"file":"MetakeepSolanaWeb3Client.js","sourceRoot":"","sources":["../../../../src/lib/metakeep/solana/MetakeepSolanaWeb3Client.ts"],"names":[],"mappings":"AACA,OAAO,WAAW,MAAM,UAAU,CAAC;AACnC,OAAO,EAAE,2BAA2B,EAAE,MAAM,kCAAkC,CAAC;AAC/E,OAAO,EAAuB,iBAAiB,EAAE,MAAM,YAAY,CAAC;AACpE,OAAO,EAAE,iCAAiC,EAAE,MAAM,sBAAsB,CAAC;AAIzE,OAAO,EAAE,6BAA6B,EAAE,MAAM,+CAA+C,CAAC;AAC9F,OAAO,EAAE,4BAA4B,EAAE,MAAM,uBAAuB,CAAC;AAErE,MAAM,OAAO,wBAAwB;IAKzB;IAIA;IACC;IATX,MAAM,CAA8B;IACpC,GAAG,CAAuB;IAE1B,YACU,MAGP,EACO,IAAuB,EACtB,OAAe;QALhB,WAAM,GAAN,MAAM,CAGb;QACO,SAAI,GAAJ,IAAI,CAAmB;QACtB,YAAO,GAAP,OAAO,CAAQ;QAExB,IAAI,CAAC,GAAG,GAAG,IAAI,WAAW,CAAC,QAAQ,CAAC;YAClC,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,WAAW;YACzC,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE;YAC3B,mCAAmC;YACnC,OAAO,EAAE,MAAM,CAAC,YAAY,EAAE,EAAE;YAEhC,WAAW,EAAE,iBAAiB,CAAC,iCAAiC,CAAC,MAAM,CAAC,CAAC;SAC1E,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,GAAG,IAAI,2BAA2B,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;IACnE,CAAC;IAEO,KAAK,CAAC,IAAI;QAChB,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QAE5B,oGAAoG;QACpG,IAAI,IAAI,CAAC,MAAM,CAAC,gBAAgB,EAAE,CAAC;YACjC,qFAAqF;YACrF,0CAA0C;YAC1C,MAAM,qBAAqB,GAAG,IAAI,6BAA6B,CAC7D,IAAI,CAAC,MAAM,EACX,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAC7B,CAAC;YACF,4BAA4B,CAAC,iBAAiB,CAAC,qBAAqB,CAAC,CAAC;YACtE,MAAM,qBAAqB,CAAC,OAAO,EAAE,CAAC;QACxC,CAAC;IACH,CAAC;IAED,KAAK,CAAC,UAAU;QACd,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC;QAC/B,MAAM,4BAA4B,EAAE,iBAAiB,EAAE,EAAE,EAAE,UAAU,EAAE,CAAC;IAC1E,CAAC;IAEM,MAAM,CAAC,KAAK,CAAC,KAAK,CACvB,MAGC,EACD,IAAuB,EACvB,OAAe;QAEf,MAAM,MAAM,GAAG,IAAI,wBAAwB,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QACnE,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QACpB,OAAO,MAAM,CAAC;IAChB,CAAC;CACF","sourcesContent":["import type { SolanaWeb3Client } from \"../../solana/SolanaWeb3Client.js\";\nimport MetakeepSDK from \"metakeep\";\nimport { MetakeepSolanaWalletAdapter } from \"./MetakeepSolanaWalletAdapter.js\";\nimport { type MetakeepConfig, toMetakeepRpcUrls } from \"../util.js\";\nimport { getEthereumProviderRPCsFromConfig } from \"../../walletUtils.js\";\nimport type { CivicWeb3ClientConfig, UserDetails } from \"../../../types.js\";\nimport type { User } from \"@civic/auth\";\nimport type { Connection } from \"@solana/web3.js\";\nimport { MetakeepWalletStandardAdapter } from \"../../solana/walletAdapter/standardAdapter.js\";\nimport { singletonSolanaWalletAdapter } from \"../../solana/index.js\";\n\nexport class MetakeepSolanaWeb3Client implements SolanaWeb3Client {\n  wallet: MetakeepSolanaWalletAdapter;\n  sdk: MetakeepSDK.MetaKeep;\n\n  constructor(\n    private config: CivicWeb3ClientConfig & {\n      metakeep: MetakeepConfig;\n      solanaConnection?: Connection;\n    },\n    private user: User<UserDetails>,\n    readonly address: string,\n  ) {\n    this.sdk = new MetakeepSDK.MetaKeep({\n      appId: config.metakeep.solana.publicAppId,\n      user: { email: user.email },\n      // Default chainId - can be changed\n      chainId: config.initialChain?.id,\n\n      rpcNodeUrls: toMetakeepRpcUrls(getEthereumProviderRPCsFromConfig(config)),\n    });\n    this.wallet = new MetakeepSolanaWalletAdapter(address, this.sdk);\n  }\n\n  private async init() {\n    await this.wallet.connect();\n\n    // if the config includes a connection, we can expose this wallet as a Solana Wallet Standard wallet\n    if (this.config.solanaConnection) {\n      // walletStandardAdapter is an implementation of the solana wallet adapter interface,\n      // that delegates to the underlying wallet\n      const walletStandardAdapter = new MetakeepWalletStandardAdapter(\n        this.wallet,\n        this.config.solanaConnection,\n      );\n      singletonSolanaWalletAdapter.setImplementation(walletStandardAdapter);\n      await walletStandardAdapter.connect();\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    await this.wallet.disconnect();\n    await singletonSolanaWalletAdapter?.getImplementation?.()?.disconnect();\n  }\n\n  public static async build(\n    config: CivicWeb3ClientConfig & {\n      metakeep: MetakeepConfig;\n      solanaConnection?: Connection;\n    },\n    user: User<UserDetails>,\n    address: string,\n  ): Promise<SolanaWeb3Client> {\n    const client = new MetakeepSolanaWeb3Client(config, user, address);\n    await client.init();\n    return client;\n  }\n}\n"]}
import { BaseMessageSignerWalletAdapter, type SignInMessageSignerWalletAdapter, type SupportedTransactionVersions, type TransactionOrVersionedTransaction, type WalletName, WalletReadyState } from "@solana/wallet-adapter-base";
import { PublicKey, type TransactionVersion } from "@solana/web3.js";
import MetakeepSDK from "metakeep";
import type { SolanaSignInInput, SolanaSignInOutput } from "@solana/wallet-standard-features";
export declare const MetaKeepWalletName: WalletName<"Civic">;
export declare class MetakeepSolanaWalletAdapter extends BaseMessageSignerWalletAdapter implements SignInMessageSignerWalletAdapter {
    private sdk;
    name: WalletName<"Civic">;
    url: string;
    icon: string;
    readonly publicKey: PublicKey;
    connecting: boolean;
    _connected: boolean;
    readyState: WalletReadyState;
    constructor(address: string, sdk: MetakeepSDK.MetaKeep);
    signIn(input?: SolanaSignInInput): Promise<SolanaSignInOutput>;
    get connected(): boolean;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    signMessage(message: Uint8Array): Promise<Uint8Array>;
    get supportedTransactionVersions(): ReadonlySet<TransactionVersion>;
    signTransaction<T extends TransactionOrVersionedTransaction<U>, U extends SupportedTransactionVersions>(transaction: T): Promise<T>;
}
//# sourceMappingURL=MetakeepSolanaWalletAdapter.d.ts.map
{"version":3,"file":"MetakeepSolanaWalletAdapter.js","sourceRoot":"","sources":["../../../../src/lib/metakeep/solana/MetakeepSolanaWalletAdapter.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BaseMessageSignerWalletAdapter,\n  type SignInMessageSignerWalletAdapter,\n  type SupportedTransactionVersions,\n  type TransactionOrVersionedTransaction,\n  WalletError,\n  WalletLoadError,\n  type WalletName,\n  WalletNotConnectedError,\n  WalletNotReadyError,\n  WalletReadyState,\n  WalletSignTransactionError,\n} from \"@solana/wallet-adapter-base\";\nimport { PublicKey, type TransactionVersion } from \"@solana/web3.js\";\nimport MetakeepSDK from \"metakeep\";\nimport { WALLET_LOGO } from \"../../constants.js\";\nimport { errorMessage } from \"../../utils.js\";\nimport type {\n  SolanaSignInInput,\n  SolanaSignInOutput,\n} from \"@solana/wallet-standard-features\";\n\nexport const MetaKeepWalletName = \"Civic\" as WalletName<\"Civic\">;\n\nexport class MetakeepSolanaWalletAdapter\n  extends BaseMessageSignerWalletAdapter\n  implements SignInMessageSignerWalletAdapter\n{\n  name = MetaKeepWalletName;\n  url = \"https://auth.civic.com\";\n  icon = WALLET_LOGO;\n  readonly publicKey: PublicKey;\n  connecting: boolean;\n  _connected: boolean;\n  readyState: WalletReadyState =\n    typeof globalThis.window === \"undefined\" ||\n    typeof globalThis.document === \"undefined\"\n      ? WalletReadyState.Unsupported\n      : WalletReadyState.Loadable;\n\n  constructor(\n    address: string,\n    private sdk: MetakeepSDK.MetaKeep,\n  ) {\n    super();\n    this.publicKey = new PublicKey(address);\n    this.connecting = false;\n    this._connected = false;\n\n    // Bind methods so they keep the proper \"this\" context\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n    this.signMessage = this.signMessage.bind(this);\n    this.signTransaction = this.signTransaction.bind(this);\n    this.signIn = this.signIn.bind(this);\n  }\n\n  async signIn(input?: SolanaSignInInput): Promise<SolanaSignInOutput> {\n    console.error(\"Solana Sign In not implemented\", { input });\n    throw new Error(\"Method not implemented.\");\n  }\n\n  override get connected(): boolean {\n    return this._connected;\n  }\n\n  async connect(): Promise<void> {\n    if (this.connected || this.connecting) return;\n\n    console.debug(\"MetaKeepSolanaWalletAdapter connecting\");\n    this.connecting = true;\n    try {\n      if (this.readyState !== WalletReadyState.Loadable)\n        throw new WalletNotReadyError();\n\n      this._connected = true;\n      this.emit(\"connect\", this.publicKey);\n    } catch (error: unknown) {\n      if (error instanceof WalletError) {\n        this.emit(\"error\", error);\n        throw error;\n      }\n      throw new WalletLoadError(errorMessage(error), error);\n    } finally {\n      this.connecting = false;\n    }\n  }\n\n  async disconnect(): Promise<void> {\n    // Only log and process if connected\n    if (!this.connected) return;\n\n    console.debug(\"MetaKeepWalletAdapter disconnecting\");\n\n    // Set connected to false BEFORE emitting disconnect\n    // This prevents re-entry into this method\n    this._connected = false;\n    this.connecting = false;\n\n    this.emit(\"disconnect\");\n  }\n\n  async signMessage(message: Uint8Array): Promise<Uint8Array> {\n    console.debug(\"MetaKeepWalletAdapter signing message\");\n\n    if (!this.connected) throw new WalletNotConnectedError();\n\n    // Sign message using MetaKeep SDK\n    try {\n      const signedMessage = await this.sdk.signMessage(\n        new TextDecoder().decode(message),\n        \"sign a message\",\n      );\n      // Convert hex to Uint8Array\n      return Buffer.from(signedMessage.signature.slice(2), \"hex\");\n    } catch (error: unknown) {\n      console.error(\"Error signing message\", error);\n      throw new WalletSignTransactionError(errorMessage(error), error);\n    }\n  }\n\n  get supportedTransactionVersions(): ReadonlySet<TransactionVersion> {\n    return new Set<TransactionVersion>([\"0\", \"legacy\"] as TransactionVersion[]);\n  }\n\n  async signTransaction<\n    T extends TransactionOrVersionedTransaction<U>,\n    U extends SupportedTransactionVersions,\n  >(transaction: T): Promise<T> {\n    console.debug(\"MetaKeepWalletAdapter signing transaction\");\n\n    if (!this.connected) throw new WalletNotConnectedError();\n\n    // Sign transaction using MetaKeep SDK\n    try {\n      const signedTransaction = await this.sdk.signTransaction(\n        transaction,\n        \"sign a transaction\",\n      );\n\n      // Add signature to transaction\n      const signature = Buffer.from(\n        signedTransaction.signature.slice(2),\n        \"hex\",\n      );\n      transaction.addSignature(this.publicKey!, signature);\n      return transaction;\n    } catch (error: unknown) {\n      console.error(\"Error signing transaction\", error);\n      throw new WalletSignTransactionError(errorMessage(error), error);\n    }\n  }\n}\n"]}
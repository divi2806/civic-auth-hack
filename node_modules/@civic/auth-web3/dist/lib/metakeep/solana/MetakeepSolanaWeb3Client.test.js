import { describe, it, expect, vi, beforeEach } from "vitest";
import { MetakeepSolanaWeb3Client } from "./MetakeepSolanaWeb3Client.js";
import { MetakeepSolanaWalletAdapter } from "./MetakeepSolanaWalletAdapter.js";
// stub dependencies
vi.mock("metakeep");
vi.mock("../../solana/index.js", () => ({
    singletonSolanaWalletAdapter: {
        setImplementation: vi.fn(),
        disconnect: vi.fn(),
    },
}));
vi.mock("./MetakeepSolanaWalletAdapter.js", () => {
    const MetakeepSolanaWalletAdapterStub = vi.fn();
    MetakeepSolanaWalletAdapterStub.prototype.connect = vi.fn();
    MetakeepSolanaWalletAdapterStub.prototype.disconnect = vi.fn();
    return {
        MetakeepSolanaWalletAdapter: MetakeepSolanaWalletAdapterStub,
    };
});
const stubConfig = {
    endpoints: { rpcs: {} },
    metakeep: {
        ethereum: { publicAppId: "mockEthAppId" },
        solana: { publicAppId: "mockSolAppId" },
    },
};
const stubUser = {
    id: "mock-id",
    email: "user@example.com",
};
describe("MetakeepSolanaWeb3Client", () => {
    let client;
    const mockAddress = "MockSolAddress";
    beforeEach(async () => {
        client = await MetakeepSolanaWeb3Client.build(stubConfig, stubUser, mockAddress);
    });
    it("should initialize with correct parameters", () => {
        expect(client).toBeInstanceOf(MetakeepSolanaWeb3Client);
        expect(client.address).toBe(mockAddress);
    });
    describe("init()", () => {
        it("should connect the wallet", async () => {
            expect(MetakeepSolanaWalletAdapter.prototype.connect).toHaveBeenCalled();
        });
        it("should register the wallet with Solana Wallet Standard when solanaConnection is provided", async () => {
            // Import wallet adapter module
            const { singletonSolanaWalletAdapter } = await import("../../solana/index.js");
            // Create a new client with solanaConnection
            const configWithConnection = {
                ...stubConfig,
                // Use `unknown` type to satisfy the TypeScript constraint while acknowledging we're mocking
                solanaConnection: {}, // Mock connection object
            };
            // Build client with connection (we'll verify through mocks, not the returned client)
            await MetakeepSolanaWeb3Client.build(configWithConnection, stubUser, mockAddress);
            // Verify the wallet adapter was registered
            expect(singletonSolanaWalletAdapter.setImplementation).toHaveBeenCalled();
            expect(MetakeepSolanaWalletAdapter.prototype.connect).toHaveBeenCalled();
            // The adapter should have been instantiated
            const mockAdapter = vi.mocked(MetakeepSolanaWalletAdapter);
            // Verify the adapter was created (we can't check exact parameters because of the internal implementation)
            expect(mockAdapter).toHaveBeenCalled();
            // Verify it was connected
            expect(MetakeepSolanaWalletAdapter.prototype.connect).toHaveBeenCalled();
        });
    });
    describe("disconnect()", () => {
        it("should disconnect the wallet", async () => {
            await client.disconnect();
            expect(MetakeepSolanaWalletAdapter.prototype.disconnect).toHaveBeenCalled();
        });
    });
    describe("build()", () => {
        it("should create and initialize an instance", async () => {
            const builtClient = await MetakeepSolanaWeb3Client.build(stubConfig, stubUser, mockAddress);
            expect(builtClient).toBeInstanceOf(MetakeepSolanaWeb3Client);
            expect(MetakeepSolanaWalletAdapter.prototype.connect).toHaveBeenCalled();
        });
    });
});
//# sourceMappingURL=MetakeepSolanaWeb3Client.test.js.map
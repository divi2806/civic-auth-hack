{"version":3,"file":"MetakeepSolanaWeb3Client.test.js","sourceRoot":"","sources":["../../../../src/lib/metakeep/solana/MetakeepSolanaWeb3Client.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { describe, it, expect, vi, beforeEach } from \"vitest\";\nimport { MetakeepSolanaWeb3Client } from \"./MetakeepSolanaWeb3Client.js\";\nimport { MetakeepSolanaWalletAdapter } from \"./MetakeepSolanaWalletAdapter.js\";\nimport type { SolanaWeb3Client } from \"../../solana/SolanaWeb3Client.js\";\nimport type { CivicWeb3ClientConfig, UserDetails } from \"../../../types.js\";\nimport type { MetakeepConfig } from \"../util.js\";\nimport type { User } from \"@civic/auth\";\n\n// stub dependencies\nvi.mock(\"metakeep\");\nvi.mock(\"../../solana/index.js\", () => ({\n  singletonSolanaWalletAdapter: {\n    setImplementation: vi.fn(),\n    disconnect: vi.fn(),\n  },\n}));\nvi.mock(\"./MetakeepSolanaWalletAdapter.js\", () => {\n  const MetakeepSolanaWalletAdapterStub = vi.fn();\n  MetakeepSolanaWalletAdapterStub.prototype.connect = vi.fn();\n  MetakeepSolanaWalletAdapterStub.prototype.disconnect = vi.fn();\n\n  return {\n    MetakeepSolanaWalletAdapter: MetakeepSolanaWalletAdapterStub,\n  };\n});\n\nconst stubConfig: CivicWeb3ClientConfig & { metakeep: MetakeepConfig } = {\n  endpoints: { rpcs: {} },\n  metakeep: {\n    ethereum: { publicAppId: \"mockEthAppId\" },\n    solana: { publicAppId: \"mockSolAppId\" },\n  },\n};\n\nconst stubUser: User<UserDetails> = {\n  id: \"mock-id\",\n  email: \"user@example.com\",\n} as User<UserDetails>;\n\ndescribe(\"MetakeepSolanaWeb3Client\", () => {\n  let client: SolanaWeb3Client;\n  const mockAddress = \"MockSolAddress\";\n\n  beforeEach(async () => {\n    client = await MetakeepSolanaWeb3Client.build(\n      stubConfig,\n      stubUser,\n      mockAddress,\n    );\n  });\n\n  it(\"should initialize with correct parameters\", () => {\n    expect(client).toBeInstanceOf(MetakeepSolanaWeb3Client);\n    expect(client.address).toBe(mockAddress);\n  });\n\n  describe(\"init()\", () => {\n    it(\"should connect the wallet\", async () => {\n      expect(MetakeepSolanaWalletAdapter.prototype.connect).toHaveBeenCalled();\n    });\n\n    it(\"should register the wallet with Solana Wallet Standard when solanaConnection is provided\", async () => {\n      // Import wallet adapter module\n      const { singletonSolanaWalletAdapter } = await import(\n        \"../../solana/index.js\"\n      );\n\n      // Create a new client with solanaConnection\n      const configWithConnection = {\n        ...stubConfig,\n        // Use `unknown` type to satisfy the TypeScript constraint while acknowledging we're mocking\n        solanaConnection: {} as unknown as import(\"@solana/web3.js\").Connection, // Mock connection object\n      };\n\n      // Build client with connection (we'll verify through mocks, not the returned client)\n      await MetakeepSolanaWeb3Client.build(\n        configWithConnection,\n        stubUser,\n        mockAddress,\n      );\n\n      // Verify the wallet adapter was registered\n      expect(singletonSolanaWalletAdapter.setImplementation).toHaveBeenCalled();\n      expect(MetakeepSolanaWalletAdapter.prototype.connect).toHaveBeenCalled();\n\n      // The adapter should have been instantiated\n      const mockAdapter = vi.mocked(MetakeepSolanaWalletAdapter);\n      // Verify the adapter was created (we can't check exact parameters because of the internal implementation)\n      expect(mockAdapter).toHaveBeenCalled();\n      // Verify it was connected\n      expect(MetakeepSolanaWalletAdapter.prototype.connect).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"disconnect()\", () => {\n    it(\"should disconnect the wallet\", async () => {\n      await client.disconnect();\n      expect(\n        MetakeepSolanaWalletAdapter.prototype.disconnect,\n      ).toHaveBeenCalled();\n    });\n  });\n\n  describe(\"build()\", () => {\n    it(\"should create and initialize an instance\", async () => {\n      const builtClient = await MetakeepSolanaWeb3Client.build(\n        stubConfig,\n        stubUser,\n        mockAddress,\n      );\n      expect(builtClient).toBeInstanceOf(MetakeepSolanaWeb3Client);\n      expect(MetakeepSolanaWalletAdapter.prototype.connect).toHaveBeenCalled();\n    });\n  });\n});\n"]}
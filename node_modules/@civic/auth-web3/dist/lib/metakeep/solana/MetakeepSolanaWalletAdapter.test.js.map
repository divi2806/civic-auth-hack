{"version":3,"file":"MetakeepSolanaWalletAdapter.test.js","sourceRoot":"","sources":["../../../../src/lib/metakeep/solana/MetakeepSolanaWalletAdapter.test.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,QAAQ,EACR,EAAE,EACF,MAAM,EACN,EAAE,EACF,UAAU,GAEX,MAAM,QAAQ,CAAC;AAChB,OAAO,EAAE,2BAA2B,EAAE,MAAM,kCAAkC,CAAC;AAC/E,OAAO,WAAW,MAAM,UAAU,CAAC;AACnC,OAAO,EAEL,eAAe,EACf,uBAAuB,EACvB,mBAAmB,EACnB,gBAAgB,EAChB,0BAA0B,GAC3B,MAAM,6BAA6B,CAAC;AACrC,OAAO,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAC;AAE1C,oBAAoB;AACpB,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAEpB,MAAM,SAAS,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,CAAC;AAE/C,uBAAuB;AACvB,MAAM,iBAAiB,GAAG,OAAO,CAAC;AAClC,MAAM,OAAO,GAAG;IACd,eAAe,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;QACpC,GAAG,EAAE;QACL,SAAS,EAAE,iBAAiB;KAC7B,CAAC,CAAC;IACH,WAAW,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;QAC9B,SAAS,EAAE,iBAAiB;KAC7B,CAAC,CAAC;CAC+B,CAAC;AAErC,mBAAmB;AACnB,MAAM,eAAe,GAAG;IACtB,gBAAgB,EAAE,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACxD,YAAY,EAAE,EAAE,CAAC,EAAE,EAAE;CAC8C,CAAC;AAEtE,QAAQ,CAAC,6BAA6B,EAAE,GAAG,EAAE;IAC3C,IAAI,OAAoC,CAAC;IACzC,IAAI,OAA0C,CAAC;IAE/C,UAAU,CAAC,GAAG,EAAE;QACd,OAAO,GAAG,IAAI,2BAA2B,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;QACzE,OAAO,GAAG,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,SAAS,EAAE,GAAG,EAAE;QACvB,EAAE,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YACxE,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;YAExB,MAAM,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;YAC3D,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,yCAAyC,EAAE,KAAK,IAAI,EAAE;YACvD,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;YAE1B,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;YAExB,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;YAC5E,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;YACnC,MAAM,WAAW,GAAG,IAAI,2BAA2B,CACjD,SAAS,CAAC,QAAQ,EAAE,EACpB,OAAO,CACR,CAAC;YAEF,MAAM,MAAM,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;YAChF,OAAO,CAAC,UAAU,GAAG,gBAAgB,CAAC,WAAW,CAAC;YAElD,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;YAErE,MAAM,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAClC,OAAO,EACP,MAAM,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAChC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;YACrF,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE;gBACzC,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;QAC1B,EAAE,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC3D,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;YAE1B,MAAM,OAAO,CAAC,UAAU,EAAE,CAAC;YAE3B,MAAM,CAAC,OAAO,CAAC,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;YACnD,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;YACzD,OAAO,CAAC,UAAU,GAAG,KAAK,CAAC;YAE3B,MAAM,OAAO,CAAC,UAAU,EAAE,CAAC;YAE3B,MAAM,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,gBAAgB,EAAE,CAAC;YACvC,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAC7C,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;YAC1B,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;YAE1B,MAAM,OAAO,CAAC,UAAU,EAAE,CAAC;YAE3B,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,MAAM,CACV,OAAO,CAAC,WAAW,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAC/C,CAAC,OAAO,CAAC,OAAO,CAAC,uBAAuB,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,4DAA4D,EAAE,KAAK,IAAI,EAAE;YAC1E,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;YAE1B,MAAM,OAAO,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,aAAa,GAAG,MAAM,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAEzD,MAAM,CAAC,aAAa,CAAC,CAAC,OAAO,CAC3B,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAC/C,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;YAChF,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;YAC1B,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,iBAAiB,CAC9C,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAC5B,CAAC;YAEF,MAAM,MAAM,CACV,OAAO,CAAC,WAAW,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAC/C,CAAC,OAAO,CAAC,OAAO,CAAC,0BAA0B,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC/B,UAAU,CAAC,GAAG,EAAE;YACd,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;QAC5B,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACrE,OAAO,CAAC,UAAU,GAAG,KAAK,CAAC;YAE3B,MAAM,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CACpE,uBAAuB,CACxB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,iEAAiE,EAAE,KAAK,IAAI,EAAE;YAC/E,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;YAEhE,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,oBAAoB,CACvD,SAAS,EACT,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAC/C,CAAC;YAEF,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,sEAAsE,EAAE,KAAK,IAAI,EAAE;YACpF,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,iBAAiB,CAClD,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAC5B,CAAC;YAEF,MAAM,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CACpE,0BAA0B,CAC3B,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC5C,EAAE,CAAC,uDAAuD,EAAE,GAAG,EAAE;YAC/D,MAAM,CAAC,OAAO,CAAC,4BAA4B,CAAC,CAAC,OAAO,CAClD,IAAI,GAAG,CAAC,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC,CACzB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,QAAQ,EAAE,GAAG,EAAE;QACtB,EAAE,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import {\n  describe,\n  it,\n  expect,\n  vi,\n  beforeEach,\n  type MockInstance,\n} from \"vitest\";\nimport { MetakeepSolanaWalletAdapter } from \"./MetakeepSolanaWalletAdapter.js\";\nimport MetakeepSDK from \"metakeep\";\nimport {\n  type SignerWalletAdapter,\n  WalletLoadError,\n  WalletNotConnectedError,\n  WalletNotReadyError,\n  WalletReadyState,\n  WalletSignTransactionError,\n} from \"@solana/wallet-adapter-base\";\nimport { Keypair } from \"@solana/web3.js\";\n\n// Mock dependencies\nvi.mock(\"metakeep\");\n\nconst publicKey = Keypair.generate().publicKey;\n\n// Stubbed Metakeep SDK\nconst stubSignedMessage = \"0x123\";\nconst mockSdk = {\n  signTransaction: vi.fn(async (tx) => ({\n    ...tx,\n    signature: stubSignedMessage,\n  })),\n  signMessage: vi.fn(async () => ({\n    signature: stubSignedMessage,\n  })),\n} as unknown as MetakeepSDK.MetaKeep;\n\n// Mock transaction\nconst mockTransaction = {\n  serializeMessage: vi.fn(() => new Uint8Array([1, 2, 3])),\n  addSignature: vi.fn(),\n} as unknown as Parameters<SignerWalletAdapter[\"signTransaction\"]>[0];\n\ndescribe(\"MetakeepSolanaWalletAdapter\", () => {\n  let adapter: MetakeepSolanaWalletAdapter;\n  let emitSpy: MockInstance<typeof adapter.emit>;\n\n  beforeEach(() => {\n    adapter = new MetakeepSolanaWalletAdapter(publicKey.toBase58(), mockSdk);\n    emitSpy = vi.spyOn(adapter, \"emit\");\n  });\n\n  describe(\"connect\", () => {\n    it(\"should emit 'connect' with the public key when connected\", async () => {\n      await adapter.connect();\n\n      expect(emitSpy).toHaveBeenCalledWith(\"connect\", publicKey);\n      expect(adapter.connecting).toBe(false);\n    });\n\n    it(\"should do nothing if already connecting\", async () => {\n      adapter.connecting = true;\n\n      await adapter.connect();\n\n      expect(emitSpy).not.toHaveBeenCalled();\n    });\n\n    it(\"should throw WalletNotReadyError if not in a browser context\", async () => {\n      vi.stubGlobal(\"window\", undefined);\n      const nodeAdapter = new MetakeepSolanaWalletAdapter(\n        publicKey.toBase58(),\n        mockSdk,\n      );\n\n      await expect(nodeAdapter.connect()).rejects.toThrow(WalletNotReadyError);\n    });\n\n    it(\"should throw WalletNotReadyError if readyState is not 'Loadable'\", async () => {\n      adapter.readyState = WalletReadyState.Unsupported;\n\n      await expect(adapter.connect()).rejects.toThrow(WalletNotReadyError);\n\n      expect(emitSpy).toHaveBeenCalledWith(\n        \"error\",\n        expect.any(WalletNotReadyError),\n      );\n    });\n\n    it(\"should throw WalletLoadError if an error occurs during event emission\", async () => {\n      vi.mocked(emitSpy).mockImplementation(() => {\n        throw new Error(\"Emit error\");\n      });\n\n      await expect(adapter.connect()).rejects.toThrow(WalletLoadError);\n    });\n  });\n\n  describe(\"disconnect\", () => {\n    it(\"should emit 'disconnect' when disconnecting\", async () => {\n      adapter._connected = true;\n\n      await adapter.disconnect();\n\n      expect(emitSpy).toHaveBeenCalledWith(\"disconnect\");\n      expect(adapter.connecting).toBe(false);\n    });\n\n    it(\"should do nothing if already disconnected\", async () => {\n      adapter._connected = false;\n\n      await adapter.disconnect();\n\n      expect(emitSpy).not.toHaveBeenCalled();\n      expect(adapter.connecting).toBe(false);\n    });\n\n    it(\"should reset connecting state\", async () => {\n      adapter._connected = true;\n      adapter.connecting = true;\n\n      await adapter.disconnect();\n\n      expect(adapter.connecting).toBe(false);\n    });\n  });\n\n  describe(\"signMessage\", () => {\n    it(\"should throw WalletNotConnectedError if not connected\", async () => {\n      await expect(\n        adapter.signMessage(new Uint8Array([1, 2, 3])),\n      ).rejects.toThrow(WalletNotConnectedError);\n    });\n\n    it(\"should call sdk.signMessage and return a signed Uint8Array\", async () => {\n      adapter._connected = true;\n\n      const message = new Uint8Array([1, 2, 3]);\n      const signedMessage = await adapter.signMessage(message);\n\n      expect(signedMessage).toEqual(\n        Buffer.from(stubSignedMessage.slice(2), \"hex\"),\n      );\n    });\n\n    it(\"should throw WalletSignTransactionError if sdk.signMessage fails\", async () => {\n      adapter._connected = true;\n      vi.mocked(mockSdk.signMessage).mockRejectedValue(\n        new Error(\"Signing failed\"),\n      );\n\n      await expect(\n        adapter.signMessage(new Uint8Array([1, 2, 3])),\n      ).rejects.toThrow(WalletSignTransactionError);\n    });\n  });\n\n  describe(\"signTransaction\", () => {\n    beforeEach(() => {\n      adapter._connected = true;\n    });\n\n    it(\"should throw WalletNotConnectedError if not connected\", async () => {\n      adapter._connected = false;\n\n      await expect(adapter.signTransaction(mockTransaction)).rejects.toThrow(\n        WalletNotConnectedError,\n      );\n    });\n\n    it(\"should call sdk.signTransaction and return a signed transaction\", async () => {\n      const signedTx = await adapter.signTransaction(mockTransaction);\n\n      expect(mockTransaction.addSignature).toHaveBeenCalledWith(\n        publicKey,\n        Buffer.from(stubSignedMessage.slice(2), \"hex\"),\n      );\n\n      expect(signedTx).toBe(mockTransaction);\n    });\n\n    it(\"should throw WalletSignTransactionError if sdk.signTransaction fails\", async () => {\n      vi.mocked(mockSdk.signTransaction).mockRejectedValue(\n        new Error(\"Signing failed\"),\n      );\n\n      await expect(adapter.signTransaction(mockTransaction)).rejects.toThrow(\n        WalletSignTransactionError,\n      );\n    });\n  });\n\n  describe(\"supportedTransactionVersions\", () => {\n    it(\"should return a set of supported transaction versions\", () => {\n      expect(adapter.supportedTransactionVersions).toEqual(\n        new Set([\"0\", \"legacy\"]),\n      );\n    });\n  });\n\n  describe(\"signIn\", () => {\n    it(\"should throw a not implemented error\", async () => {\n      await expect(adapter.signIn()).rejects.toThrow(/not implemented/);\n    });\n  });\n});\n"]}
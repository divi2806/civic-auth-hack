import MetakeepSDK from "metakeep";
import { MetakeepSolanaWalletAdapter } from "./MetakeepSolanaWalletAdapter.js";
import { toMetakeepRpcUrls } from "../util.js";
import { getEthereumProviderRPCsFromConfig } from "../../walletUtils.js";
import { MetakeepWalletStandardAdapter } from "../../solana/walletAdapter/standardAdapter.js";
import { singletonSolanaWalletAdapter } from "../../solana/index.js";
export class MetakeepSolanaWeb3Client {
    config;
    user;
    address;
    wallet;
    sdk;
    constructor(config, user, address) {
        this.config = config;
        this.user = user;
        this.address = address;
        this.sdk = new MetakeepSDK.MetaKeep({
            appId: config.metakeep.solana.publicAppId,
            user: { email: user.email },
            // Default chainId - can be changed
            chainId: config.initialChain?.id,
            rpcNodeUrls: toMetakeepRpcUrls(getEthereumProviderRPCsFromConfig(config)),
        });
        this.wallet = new MetakeepSolanaWalletAdapter(address, this.sdk);
    }
    async init() {
        await this.wallet.connect();
        // if the config includes a connection, we can expose this wallet as a Solana Wallet Standard wallet
        if (this.config.solanaConnection) {
            // walletStandardAdapter is an implementation of the solana wallet adapter interface,
            // that delegates to the underlying wallet
            const walletStandardAdapter = new MetakeepWalletStandardAdapter(this.wallet, this.config.solanaConnection);
            singletonSolanaWalletAdapter.setImplementation(walletStandardAdapter);
            await walletStandardAdapter.connect();
        }
    }
    async disconnect() {
        await this.wallet.disconnect();
        await singletonSolanaWalletAdapter?.getImplementation?.()?.disconnect();
    }
    static async build(config, user, address) {
        const client = new MetakeepSolanaWeb3Client(config, user, address);
        await client.init();
        return client;
    }
}
//# sourceMappingURL=MetakeepSolanaWeb3Client.js.map
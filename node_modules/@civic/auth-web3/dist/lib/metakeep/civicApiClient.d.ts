import type { CivicWeb3ClientConfig, UserDetailsWithAuth } from "../../types.js";
import type { User } from "@civic/auth";
export type ConfigResponse = {
    config: {
        metakeep: {
            solana: {
                publicAppId: string;
            };
            ethereum: {
                publicAppId: string;
            };
        };
    };
};
export type WalletResponse = {
    wallet: {
        ethAddress: string;
        solAddress: string;
    };
} & ConfigResponse;
export declare class CivicMetakeepApiClient {
    readonly user: User<UserDetailsWithAuth>;
    readonly config: CivicWeb3ClientConfig & {
        endpoints: {
            wallet: string;
        };
    };
    private walletCreationAllowed;
    constructor(user: User<UserDetailsWithAuth>, config?: Partial<CivicWeb3ClientConfig>);
    getConfig(): Promise<ConfigResponse>;
    getWallet(): Promise<WalletResponse>;
    checkWalletCreationPermission(): Promise<boolean>;
    createWallet(): Promise<WalletResponse>;
}
//# sourceMappingURL=civicApiClient.d.ts.map
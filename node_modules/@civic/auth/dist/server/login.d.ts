import type { AuthStorage, OIDCTokenResponseBody } from "../types.js";
import type { AuthConfig } from "../server/config.ts";
/**
 * Resolve an OAuth access code to a set of OIDC tokens
 * @param code The access code, typically from a query parameter in the redirect url
 * @param state The oauth random state string, used to distinguish between requests. Typically also passed in the redirect url
 * @param storage The place that this server uses to store session data (e.g. a cookie store)
 * @param config Oauth Server configuration
 */
export declare function resolveOAuthAccessCode(code: string, state: string, storage: AuthStorage, config: AuthConfig): Promise<OIDCTokenResponseBody>;
export declare function isLoggedIn(storage: AuthStorage): Promise<boolean>;
export declare function buildLoginUrl(config: Pick<AuthConfig, "clientId" | "redirectUrl"> & Partial<Pick<AuthConfig, "oauthServer">> & {
    scopes?: string[];
    state?: string;
    nonce?: string;
}, storage: AuthStorage): Promise<URL>;
//# sourceMappingURL=login.d.ts.map
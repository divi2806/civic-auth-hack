import { type AuthStorage, type OAuthTokens, type User, type EmptyObject, type UnknownObject, type OIDCTokenResponseBody } from "../types.js";
import type { AuthConfig } from "../server/config.js";
import type { AuthenticationResolver } from "../services/types.js";
/**
 * CivicAuth is the main entry point for server-side authentication operations.
 * It provides a unified interface to all the authentication functions.
 */
export declare class CivicAuth {
    readonly storage: AuthStorage;
    readonly authConfig: AuthConfig;
    _authResolver: AuthenticationResolver | null;
    constructor(storage: AuthStorage, authConfig: AuthConfig);
    get oauthServer(): string;
    getAuthResolver(): Promise<AuthenticationResolver>;
    /**
     * Gets the authenticated user with token validation
     * @returns The user object if authenticated, null otherwise
     */
    getUser<T extends UnknownObject = EmptyObject>(): Promise<User<T> | null>;
    /**
     * Gets the authentication tokens with token validation
     * @returns The tokens if authenticated, null otherwise
     */
    getTokens(): Promise<OAuthTokens | null>;
    /**
     * Resolve an OAuth access code to a set of OIDC tokens
     * @param code The access code from the query parameter
     * @param state The OAuth state parameter
     * @returns OIDC tokens
     */
    resolveOAuthAccessCode(code: string, state: string): Promise<OIDCTokenResponseBody>;
    /**
     * Check if the user is currently logged in
     * @returns true if logged in, false otherwise
     */
    isLoggedIn(): Promise<boolean>;
    /**
     * Build a login URL to redirect the user to
     * @param options Additional options for building the login URL
     * @returns The login URL
     */
    buildLoginUrl(options?: {
        scopes?: string[];
        state?: string;
        nonce?: string;
    }): Promise<URL>;
    /**
     * Build a logout URL to redirect the user to
     * @param options Additional options for building the logout URL
     * @returns The logout URL
     */
    buildLogoutRedirectUrl(options?: {
        scopes?: string[];
        state?: string;
    }): Promise<URL>;
    /**
     * Refresh the current set of OIDC tokens
     * @returns The refreshed tokens
     */
    refreshTokens(): Promise<OIDCTokenResponseBody>;
    /**
     * Clear all authentication tokens from storage
     */
    clearTokens(): Promise<void>;
}
//# sourceMappingURL=session.d.ts.map
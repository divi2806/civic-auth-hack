import type { AuthStorage, Endpoints, OIDCTokenResponseBody, SessionData } from "../types.js";
import type { AuthConfig } from "../server/config.js";
import type { AuthenticationResolver } from "../services/types.ts";
export declare class ServerAuthenticationResolver implements AuthenticationResolver {
    readonly authConfig: AuthConfig;
    readonly storage: AuthStorage;
    readonly endpointOverrides?: Partial<Endpoints> | undefined;
    private pkceProducer;
    private oauth2client;
    private endpoints;
    private constructor();
    /**
     * Attempts to refresh tokens if a refresh token is available
     * @param sessionData Current session data
     * @returns Updated session data
     */
    tryRefreshTokens(sessionData: SessionData | null): Promise<SessionData>;
    /**
     * returns The session data if the session is valid, otherwise an unauthenticated session
     * @returns {Promise<SessionData>}
     */
    validateExistingSession(autoRefresh?: boolean): Promise<SessionData>;
    get oauthServer(): string;
    init(): Promise<this>;
    tokenExchange(code: string, state: string): Promise<OIDCTokenResponseBody>;
    getSessionData(): Promise<SessionData | null>;
    getEndSessionEndpoint(): Promise<string | null>;
    static build(authConfig: AuthConfig, storage: AuthStorage, endpointOverrides?: Partial<Endpoints>): Promise<AuthenticationResolver>;
}
//# sourceMappingURL=ServerAuthenticationResolver.d.ts.map
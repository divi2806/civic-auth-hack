import { deriveCodeChallenge } from "../shared/lib/util.js";
import { generateCodeVerifier } from "oslo/oauth2";
import { LocalStorageAdapter } from "../browser/storage.js";
import { CodeVerifier } from "../shared/lib/types.js";
/** A PKCE consumer that retrieves the challenge from a server endpoint */
export class ConfidentialClientPKCEConsumer {
    pkceChallengeEndpoint;
    basePath;
    constructor(pkceChallengeEndpoint, basePath) {
        this.pkceChallengeEndpoint = pkceChallengeEndpoint;
        this.basePath = basePath;
    }
    async getCodeChallenge() {
        // Get only the origin from location
        const origin = window.location.origin;
        // Use only the origin plus basePath if provided, no need for pathname anymore
        const appUrl = this.basePath ? `${origin}${this.basePath}` : origin;
        const response = await fetch(`${this.pkceChallengeEndpoint}?appUrl=${encodeURIComponent(appUrl)}`);
        const data = (await response.json());
        return data.challenge;
    }
}
/** A PKCE Producer that can generate and store a code verifier, but is agnostic as to the storage location */
export class GenericPublicClientPKCEProducer {
    storage;
    constructor(storage) {
        this.storage = storage;
    }
    // if there is already a verifier, return it,
    // If not, create a new one and store it
    async getCodeChallenge() {
        let verifier = await this.getCodeVerifier();
        if (!verifier) {
            verifier = generateCodeVerifier();
            this.storage.set(CodeVerifier.COOKIE_NAME, verifier);
        }
        return deriveCodeChallenge(verifier);
    }
    // if there is already a verifier, return it,
    async getCodeVerifier() {
        return this.storage.get(CodeVerifier.COOKIE_NAME);
    }
}
/** A PKCE Producer that is expected to run on a browser, and does not need a backend */
export class BrowserPublicClientPKCEProducer extends GenericPublicClientPKCEProducer {
    constructor() {
        super(new LocalStorageAdapter());
    }
}
//# sourceMappingURL=PKCE.js.map
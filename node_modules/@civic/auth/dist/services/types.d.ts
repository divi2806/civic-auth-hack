import type { OIDCTokenResponseBody, SessionData } from "../types.js";
export interface PKCEConsumer {
    getCodeChallenge(): Promise<string>;
}
export interface PKCEProducer extends PKCEConsumer {
    getCodeVerifier(): Promise<string | null>;
}
export interface AuthenticationInitiator {
    signIn(iframeRef: HTMLIFrameElement | null): Promise<URL>;
    signOut(idToken: string, iframeRef: HTMLIFrameElement | null): Promise<URL>;
}
export interface AuthenticationResolver {
    tokenExchange(code: string, state: string): Promise<OIDCTokenResponseBody>;
    getSessionData(): Promise<SessionData | null>;
    getEndSessionEndpoint(): Promise<string | null>;
    validateExistingSession(autoRefresh?: boolean): Promise<SessionData>;
    tryRefreshTokens(sessionData: SessionData | null): Promise<SessionData>;
}
export interface AuthenticationRefresher {
    refreshTokens: () => Promise<OIDCTokenResponseBody>;
}
export declare class PopupError extends Error {
    constructor(message: string);
}
//# sourceMappingURL=types.d.ts.map
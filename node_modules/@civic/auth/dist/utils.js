/**
 * Checks if a popup window is blocked by the browser.
 *
 * This function attempts to open a small popup window and then checks if it was successfully created.
 * If the popup is blocked by the browser, the function returns `true`. Otherwise, it returns `false`.
 *
 * @returns {boolean} - `true` if the popup is blocked, `false` otherwise.
 */
export const isPopupBlocked = () => {
    // First we try to open a small popup window. It either returns a window object or null.
    const popup = window.open("", "", "width=1,height=1");
    // If window.open() returns null, popup is definitely blocked
    if (!popup) {
        return true;
    }
    try {
        // Try to access a property of the popup to check if it's usable
        if (typeof popup.closed === "undefined") {
            throw new Error("Popup is blocked");
        }
    }
    catch {
        // Accessing the popup's properties throws an error if the popup is blocked
        return true;
    }
    // Close the popup immediately if it was opened
    popup.close();
    return false;
};
export const withoutUndefined = (obj) => {
    const result = {};
    for (const key in obj) {
        if (obj[key] !== undefined) {
            // TypeScript needs assurance that key is a valid key in WithoutUndefined<T>
            // We use type assertion here
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            result[key] = obj[key];
        }
    }
    return result;
};
//# sourceMappingURL=utils.js.map
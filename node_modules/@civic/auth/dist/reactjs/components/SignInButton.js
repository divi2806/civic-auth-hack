"use client";
import { jsx as _jsx } from "@emotion/react/jsx-runtime";
import { useEffect, useState } from "react";
import { AuthStatus } from "../../types.js";
import { useUser } from "../../reactjs/hooks/useUser.js";
import { ButtonContentOrLoader } from "./ButtonContentOrLoader.js";
const SignInButton = ({ displayMode, className, style, }) => {
    const { signIn, authStatus, displayMode: userDisplayMode } = useUser();
    const [userActionStarted, setUserActionStarted] = useState(false);
    // reset the userActionStarted state if the user logs out or aborts
    useEffect(() => {
        if ([AuthStatus.AUTHENTICATED, AuthStatus.UNAUTHENTICATED].includes(authStatus)) {
            setUserActionStarted(false);
        }
    }, [authStatus]);
    return (_jsx("button", { "data-testid": "sign-in-button", css: {
            borderRadius: "9999px",
            border: "1px solid #6b7280",
            padding: "0.75rem 1rem",
            transition: "background-color 0.2s",
            minWidth: "9em", // this stops the button from going too small when in loading mode
        }, className: className, style: style, onClick: () => {
            setUserActionStarted(true);
            signIn(displayMode);
        }, children: _jsx(ButtonContentOrLoader, { authStatus: authStatus, displayMode: displayMode || userDisplayMode, userActionStarted: userActionStarted, children: "Sign In" }) }));
};
export { SignInButton };
//# sourceMappingURL=SignInButton.js.map
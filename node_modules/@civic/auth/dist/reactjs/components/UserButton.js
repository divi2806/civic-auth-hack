"use client";
import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "@emotion/react/jsx-runtime";
import { useUser } from "../../reactjs/hooks/index.js";
import React, { useCallback, useEffect, useRef, useState, } from "react";
import { ButtonContentOrLoader } from "./ButtonContentOrLoader.js";
import { AuthStatus } from "../../types.js";
import { shouldShowLoader } from "./utils.js";
const ChevronDown = () => (_jsx("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "lucide lucide-chevron-down", children: _jsx("path", { d: "m6 9 6 6 6-6" }) }));
const ChevronUp = () => (_jsx("svg", { xmlns: "http://www.w3.org/2000/svg", width: "24", height: "24", viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round", className: "lucide lucide-chevron-up", children: _jsx("path", { d: "m18 15-6-6-6 6" }) }));
const UserButton = ({ className, wrapperClassName, style, wrapperStyle, }) => {
    const [isOpen, setIsOpen] = useState(false);
    const [buttonWidth, setButtonWidth] = useState(null);
    const { user, signIn, signOut, authStatus, displayMode } = useUser();
    const buttonRef = useRef(null);
    const dropdownRef = useRef(null);
    const [userActionStarted, setUserActionStarted] = useState(false);
    useEffect(() => {
        if ([AuthStatus.AUTHENTICATED, AuthStatus.UNAUTHENTICATED].includes(authStatus)) {
            setUserActionStarted(false);
        }
    }, [authStatus]);
    useEffect(() => {
        if (buttonRef.current) {
            setButtonWidth(buttonRef.current.offsetWidth);
        }
    }, [isOpen]);
    const handleClickOutside = useCallback((event) => {
        const target = event.target;
        if (buttonRef.current &&
            dropdownRef.current &&
            !buttonRef.current.contains(target) &&
            !dropdownRef.current.contains(target)) {
            setIsOpen(false);
        }
    }, []);
    const handleSignOut = useCallback(async () => {
        setIsOpen(false);
        await signOut();
    }, [signOut]);
    const handleSignIn = useCallback(async () => {
        setIsOpen(false);
        await signIn();
    }, [signIn]);
    const handleEscape = useCallback((event) => {
        if (event.key === "Escape") {
            setIsOpen(false);
        }
    }, []);
    useEffect(() => {
        if (isOpen) {
            window.addEventListener("click", handleClickOutside);
            window.addEventListener("keydown", handleEscape);
        }
        return () => {
            window.removeEventListener("click", handleClickOutside);
            window.removeEventListener("keydown", handleEscape);
        };
    }, [handleClickOutside, handleEscape, isOpen]);
    if (user) {
        return (_jsxs("div", { css: { position: "relative", width: "auto" }, className: wrapperClassName, style: wrapperStyle, id: "civic-dropdown-container", children: [_jsx("button", { ref: buttonRef, css: {
                        cursor: "pointer",
                        display: "flex",
                        minWidth: "10rem",
                        alignItems: "center",
                        justifyContent: "space-between",
                        gap: "0.5rem",
                        borderRadius: "9999px",
                        border: "1px solid #6b7280",
                        padding: "0.75rem 1rem",
                        color: "#6b7280",
                        transition: "background-color 0.2s",
                        "&:hover": {
                            backgroundColor: "#f3f4f6",
                        },
                    }, className: className, style: style, onClick: () => {
                        setUserActionStarted(true);
                        authStatus !== AuthStatus.SIGNING_OUT &&
                            setIsOpen((isOpen) => !isOpen);
                    }, children: _jsxs(_Fragment, { children: [user?.picture ? (_jsx("span", { css: {
                                    position: "relative",
                                    display: "flex",
                                    height: "1.5rem",
                                    width: "1.5rem",
                                    flexShrink: 0,
                                    gap: "0.5rem",
                                    overflow: "hidden",
                                    borderRadius: "9999px",
                                }, children: _jsx("img", { css: {
                                        height: "100%",
                                        width: "100%",
                                        objectFit: "cover",
                                    }, src: user.picture, alt: user?.name || user?.email }) })) : (_jsx("span", { css: { display: "block" } })), _jsx(ButtonContentOrLoader, { authStatus: authStatus, displayMode: displayMode, userActionStarted: userActionStarted, children: user?.name || user?.email }), _jsx("span", { css: {
                                    display: "block",
                                    pointerEvents: "none",
                                    visibility: shouldShowLoader(authStatus, displayMode)
                                        ? "hidden"
                                        : "visible",
                                }, children: isOpen ? _jsx(ChevronUp, {}) : _jsx(ChevronDown, {}) })] }) }), _jsx("div", { ref: dropdownRef, css: isOpen
                        ? {
                            position: "absolute",
                            left: 0,
                            width: buttonWidth || "auto",
                            marginTop: "0.5rem",
                            borderRadius: "0.5rem",
                            backgroundColor: "white",
                            padding: "0.5rem 0",
                            color: "#6b7280",
                            boxShadow: "0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)",
                            zIndex: 1000,
                        }
                        : { display: "none" }, children: _jsx("ul", { css: { listStyleType: "none", margin: 0, padding: 0 }, children: _jsx("li", { children: _jsx("button", { css: {
                                    display: "block",
                                    width: "100%",
                                    padding: "0.5rem 1rem",
                                    transition: "background-color 0.2s",
                                    background: "none",
                                    border: "none",
                                    textAlign: "center",
                                    cursor: "pointer",
                                }, onClick: () => {
                                    setUserActionStarted(true);
                                    !shouldShowLoader(authStatus, displayMode) && handleSignOut();
                                }, onMouseEnter: (e) => (e.currentTarget.style.backgroundColor = "#f3f4f6"), onMouseLeave: (e) => (e.currentTarget.style.backgroundColor = "transparent"), children: "Logout" }) }) }) })] }));
    }
    return (_jsx("button", { ref: buttonRef, "data-testid": "sign-in-button", css: {
            cursor: "pointer",
            borderRadius: "9999px",
            border: "1px solid #6b7280",
            padding: "0.75rem 1rem",
            background: "none",
            transition: "background-color 0.2s",
            minWidth: "9em", // this stops the button from going too small when in loading mode
            "&:hover": {
                backgroundColor: "#f3f4f6",
            },
        }, className: className, style: style, onClick: () => {
            setUserActionStarted(true);
            !shouldShowLoader(authStatus, displayMode) && handleSignIn();
        }, children: _jsx(ButtonContentOrLoader, { authStatus: authStatus, displayMode: displayMode, userActionStarted: userActionStarted, children: "Sign in" }) }));
};
export { UserButton };
//# sourceMappingURL=UserButton.js.map
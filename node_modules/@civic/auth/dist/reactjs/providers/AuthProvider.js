"use client";
import { jsx as _jsx, jsxs as _jsxs } from "@emotion/react/jsx-runtime";
import React, { useEffect, useMemo, useState } from "react";
import {} from "../../types.js";
import { AuthContext } from "../../shared/providers/AuthContext.js";
import { useSignIn } from "../../shared/hooks/useSignIn.js";
import { useCivicAuthConfig } from "../../shared/hooks/useCivicAuthConfig.js";
import { useSession } from "../../shared/hooks/useSession.js";
import { IFrameAndLoading } from "../../shared/components/IFrameAndLoading.js";
import { useIsInIframe } from "../../shared/hooks/useIsInIframe.js";
import { useRefresh } from "../../shared/hooks/useRefresh.js";
// Global this object setup
let globalThisObject;
if (typeof window !== "undefined") {
    globalThisObject = window;
}
else if (typeof global !== "undefined") {
    globalThisObject = global;
}
else {
    globalThisObject = Function("return this")();
}
globalThisObject.globalThis = globalThisObject;
const AuthProvider = ({ children, onSignIn, onSignOut, pkceConsumer, displayMode = "iframe", }) => {
    const authConfig = useCivicAuthConfig();
    const { signIn, signOut, authStatus } = useSignIn({
        preSignOut: onSignOut,
        pkceConsumer,
        displayMode,
    });
    const [localSessionData, setLocalSessionData] = useState();
    const { data: session, error: tokenExchangeError, isLoading: tokenExchangeInProgress, } = useSession();
    useEffect(() => {
        if (session) {
            setLocalSessionData(session);
            if (session.authenticated) {
                onSignIn?.();
            }
        }
    }, [onSignIn, session]);
    const isAuthenticated = useMemo(() => {
        return !!localSessionData?.idToken;
    }, [localSessionData]);
    // The startSignIn functionality has been moved to ClientTokenExchangeSessionProvider
    // to prevent race conditions with validateExistingSession
    const isInIframe = useIsInIframe();
    // if the SDK loads in an iframe, we show the loading spinner until we know the auth state
    // but don't keep showing it indefinitely if it's just the isInIframe status
    const isLoading = tokenExchangeInProgress ||
        !authConfig ||
        (isInIframe && !localSessionData?.authenticated);
    const { error: refreshError } = useRefresh(session);
    useEffect(() => {
        if (refreshError) {
            console.error("Error refreshing token, signingOut...", refreshError);
            signOut();
        }
    }, [refreshError, signOut]);
    const value = useMemo(() => ({
        isLoading,
        error: tokenExchangeError,
        signOut,
        authStatus,
        isAuthenticated,
        signIn,
        displayMode,
    }), [
        isLoading,
        tokenExchangeError,
        signOut,
        authStatus,
        isAuthenticated,
        signIn,
        displayMode,
    ]);
    return (_jsxs(AuthContext.Provider, { value: value, children: [_jsx(IFrameAndLoading, { error: tokenExchangeError, isLoading: isLoading }), children] }));
};
export { AuthProvider };
//# sourceMappingURL=AuthProvider.js.map
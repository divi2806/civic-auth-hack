"use client";
import { jsx as _jsx } from "@emotion/react/jsx-runtime";
import React from "react";
import { AuthProvider } from "../../reactjs/providers/AuthProvider.js";
import { BrowserPublicClientPKCEProducer } from "../../services/PKCE.js";
import { UserProvider } from "../../shared/providers/UserProvider.js";
import { LocalStorageAdapter } from "../../browser/storage.js";
import { CivicAuthConfigProvider } from "../../shared/providers/CivicAuthConfigContext.js";
import { IframeProvider } from "../../shared/providers/IframeProvider.js";
import { ClientTokenExchangeSessionProvider } from "../../reactjs/providers/ClientTokenExchangeSessionProvider.js";
import { SessionProvider } from "../../shared/providers/SessionProvider.js";
import { useClientTokenExchangeSession } from "../../reactjs/hooks/useClientTokenExchangeSession.js";
import { TokenProvider } from "../../shared/providers/TokenProvider.js";
import { useAuth } from "../../shared/hooks/useAuth.js";
import { AuthStatusProvider } from "../../shared/providers/AuthStatusContext.js";
const WrapperUserProvider = ({ children }) => {
    const { signIn, signOut, displayMode, authStatus } = useAuth();
    return (_jsx(UserProvider, { storage: new LocalStorageAdapter(), signIn: signIn, signOut: signOut, user: null, authStatus: authStatus, displayMode: displayMode, children: children }));
};
const WrapperSessionAuthProvider = ({ children, ...props }) => {
    const sessionData = useClientTokenExchangeSession();
    return (_jsx(SessionProvider, { ...sessionData, children: _jsx(AuthProvider, { ...props, pkceConsumer: new BrowserPublicClientPKCEProducer(), children: _jsx(TokenProvider, { children: _jsx(WrapperUserProvider, { children: children }) }) }) }));
};
const CivicAuthProvider = ({ children, ...props }) => {
    return (_jsx(CivicAuthConfigProvider, { oauthServer: props?.config?.oauthServer, clientId: props?.clientId, redirectUrl: props?.redirectUrl, nonce: props?.nonce, logoutRedirectUrl: props?.logoutRedirectUrl, displayMode: props?.displayMode, children: _jsx(AuthStatusProvider, { children: _jsx(IframeProvider, { iframeMode: props.iframeMode, children: _jsx(ClientTokenExchangeSessionProvider, { children: _jsx(WrapperSessionAuthProvider, { ...props, children: children }) }) }) }) }));
};
export { CivicAuthProvider };
//# sourceMappingURL=CivicAuthProvider.js.map
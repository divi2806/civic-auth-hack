import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "@emotion/react/jsx-runtime";
import React, { useEffect, useState } from "react";
import { useIframe } from "../hooks/useIframe.js";
import { useIsInIframe } from "../hooks/useIsInIframe.js";
import { CivicAuthIframeContainer } from "./CivicAuthIframeContainer.js";
import { BlockDisplay } from "./BlockDisplay.js";
import { LoadingIcon } from "./LoadingIcon.js";
import { CivicAuthLogoutIframeContainer } from "./CivicAuthLogoutIframeContainer.js";
import { useSession } from "../hooks/useSession.js";
const IFrameAndLoading = ({ error, showIframeOnLogout = false, }) => {
    const isInIframe = useIsInIframe();
    const [logoutIframeLoading, setLogoutIframeLoading] = useState(true);
    const { renderIframe, iframeIsVisible, setIframeIsVisible, logoutIframeIsVisible, } = useIframe();
    const session = useSession();
    // we show a loading overlay to block the display for the user
    // as the page that loads within the iframe will be the actual customer
    // login page just after authenticatino, which shouldn't be shown to the user during login
    // there's a small period where we're resolving the session and the iframe is showing
    const showLoadingOverlay = isInIframe;
    useEffect(() => {
        const handleErrorMessage = (event) => {
            const thisURL = new URL(window.location.href);
            if (!(event.origin.endsWith("civic.com") || thisURL.hostname === "localhost")) {
                return;
            }
            // The login app has thrown an error, so we need to show the logout iframe
            if (event.data?.source === "civicloginApp" &&
                event.data?.type === "auth_error") {
                setLogoutIframeLoading(false);
                return;
            }
            setLogoutIframeLoading(true);
        };
        window.addEventListener("message", handleErrorMessage);
        return () => window.removeEventListener("message", handleErrorMessage);
    }, []);
    return (_jsxs(_Fragment, { children: [renderIframe && !session.data?.authenticated && (_jsx("div", { style: iframeIsVisible ? { display: "block" } : { display: "none" }, children: _jsx(CivicAuthIframeContainer, { onClose: () => setIframeIsVisible(false) }) })), _jsx("div", { style: showIframeOnLogout && logoutIframeIsVisible
                    ? { display: "block" }
                    : { display: "none" }, children: _jsx(CivicAuthLogoutIframeContainer, { isLoading: logoutIframeLoading }) }), error && (_jsx(BlockDisplay, { children: _jsxs("div", { children: ["Error: ", error?.message] }) })), showLoadingOverlay && !error && (_jsx(BlockDisplay, { children: _jsx(LoadingIcon, {}) }))] }));
};
export { IFrameAndLoading };
//# sourceMappingURL=IFrameAndLoading.js.map
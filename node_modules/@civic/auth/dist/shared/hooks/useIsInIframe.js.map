{"version":3,"file":"useIsInIframe.js","sourceRoot":"","sources":["../../../src/shared/hooks/useIsInIframe.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AACvD,OAAO,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAC;AAE5C;;;GAGG;AACH,MAAM,aAAa,GAAG,GAAG,EAAE;IACzB,qDAAqD;IACrD,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,QAAQ,CAAsB,SAAS,CAAC,CAAC;IAE7E,SAAS,CAAC,GAAG,EAAE;QACb,IAAI,OAAO,UAAU,CAAC,MAAM,KAAK,WAAW,EAAE,CAAC;YAC7C,MAAM,aAAa,GAAG,gBAAgB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAC1D,aAAa,CAAC,aAAa,CAAC,CAAC;QAC/B,CAAC;aAAM,CAAC;YACN,aAAa,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC;IACH,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,uCAAuC;IACvC,OAAO,UAAU,KAAK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC;AACvD,CAAC,CAAC;AAEF,OAAO,EAAE,aAAa,EAAE,CAAC","sourcesContent":["import { isWindowInIframe } from \"@/lib/windowUtil.js\";\nimport { useEffect, useState } from \"react\";\n\n/**\n * React hook to detect if the current window is running inside an iframe\n * @returns boolean indicating whether the current window is in an iframe\n */\nconst useIsInIframe = () => {\n  // Start with undefined to indicate we don't know yet\n  const [isInIframe, setIsInIframe] = useState<boolean | undefined>(undefined);\n\n  useEffect(() => {\n    if (typeof globalThis.window !== \"undefined\") {\n      const isInIframeVal = isWindowInIframe(globalThis.window);\n      setIsInIframe(isInIframeVal);\n    } else {\n      setIsInIframe(false);\n    }\n  }, []);\n\n  // Return false if undefined to be safe\n  return isInIframe === undefined ? false : isInIframe;\n};\n\nexport { useIsInIframe };\n"]}
import type { AuthStorage, Endpoints, OIDCTokenResponseBody, ParsedTokens } from "../../types.js";
import { OAuth2Client } from "oslo/oauth2";
import type { PKCEConsumer, PKCEProducer } from "../../services/types.js";
import type { CookieStorage } from "./storage.js";
/**
 * Given a PKCE code verifier, derive the code challenge using SHA
 */
export declare function deriveCodeChallenge(codeVerifier: string, method?: "Plain" | "S256"): Promise<string>;
export declare function getEndpointsWithOverrides(oauthServer: string, endpointOverrides?: Partial<Endpoints>): Promise<Endpoints>;
export declare function generateOauthLoginUrl(config: {
    clientId: string;
    scopes: string[];
    state: string;
    redirectUrl: string;
    oauthServer: string;
    nonce?: string;
    endpointOverrides?: Partial<Endpoints>;
    pkceConsumer: PKCEConsumer;
}): Promise<URL>;
export declare function generateOauthLogoutUrl(config: {
    clientId: string;
    redirectUrl: string;
    idToken: string;
    state: string;
    oauthServer: string;
    endpointOverrides?: Partial<Endpoints>;
}): Promise<URL>;
export declare function buildOauth2Client(clientId: string, redirectUri: string, endpoints: Endpoints): OAuth2Client;
export declare function exchangeTokens(code: string, state: string, pkceProducer: PKCEProducer, oauth2Client: OAuth2Client, oauthServer: string, endpoints: Endpoints): Promise<OIDCTokenResponseBody>;
/**
 * Calculates the maxAge values for access and refresh token cookies
 * based on the TTL values in the access token
 *
 * maxAge needs to be in seconds from now until expiration
 *
 * @param tokens OIDC tokens response containing the access token
 * @returns Object with accessTokenMaxAge and refreshTokenMaxAge in seconds
 */
export declare const getCookiesMaxAge: (tokens: OIDCTokenResponseBody) => {
    accessTokenMaxAge: number;
    refreshTokenMaxAge: number;
};
export declare const getAccessTokenExpiresAt: (tokens: OIDCTokenResponseBody) => number;
export declare function setAccessTokenExpiresAt(storage: AuthStorage | CookieStorage, tokens: OIDCTokenResponseBody): Promise<void>;
export declare function storeTokens(storage: AuthStorage, tokens: OIDCTokenResponseBody): Promise<void>;
/**
 * Stores tokens in server-side cookies with appropriate expiration times
 * Uses TTL values from the tokens to set cookie maxAge values
 */
export declare function storeServerTokens(storage: AuthStorage | CookieStorage, tokens: OIDCTokenResponseBody): Promise<void>;
export declare function clearTokens(storage: AuthStorage): Promise<void>;
export declare function clearAuthServerSession(storage: AuthStorage): Promise<void>;
export declare function clearUser(storage: AuthStorage): Promise<void>;
export declare function retrieveTokens(storage: AuthStorage): Promise<Partial<OIDCTokenResponseBody> | null>;
export declare function retrieveAccessTokenExpiresAt(storage: AuthStorage): Promise<number>;
export declare function validateOauth2Tokens(tokens: OIDCTokenResponseBody, jwksEndpoint: string, oauth2Client: OAuth2Client, issuer: string): Promise<ParsedTokens>;
//# sourceMappingURL=util.d.ts.map
import type { AuthStorage, ForwardedTokensJWT, UnknownObject, User } from "../../types.js";
export interface UserSession<T extends UnknownObject> {
    get(): Promise<User<T> | null>;
    set(user: User<T> & {
        forwardedTokens?: ForwardedTokensJWT;
    }): Promise<void>;
}
export declare class GenericUserSession<T extends UnknownObject> implements UserSession<T> {
    readonly storage: AuthStorage;
    constructor(storage: AuthStorage);
    get(): Promise<User<T> | null>;
    set(user: (User<T> & {
        forwardedTokens?: ForwardedTokensJWT;
    }) | null): Promise<void>;
    clear(): Promise<void>;
}
//# sourceMappingURL=UserSession.d.ts.map
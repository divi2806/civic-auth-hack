import { clearAuthServerSession, clearTokens, clearUser, retrieveTokens, } from "../../shared/lib/util.js";
import { decodeJwt } from "jose";
import { tokenKeys, } from "../../types.js";
import { JWT_PAYLOAD_KNOWN_CLAIM_KEYS } from "../../constants.js";
// Function to omit keys from an object
const omitKeys = (keys, obj) => {
    const result = { ...obj };
    keys.forEach((key) => {
        delete result[key];
    });
    return result;
};
const parseJWTToType = (jwt) => {
    const parseResult = decodeJwt(jwt);
    return parseResult;
};
export async function getUser(storage) {
    const tokens = await retrieveTokens(storage);
    if (!tokens || !tokens.id_token)
        return null;
    const parsedToken = parseJWTToType(tokens.id_token);
    // it might be preferable to throw here
    if (!parsedToken.sub)
        return null;
    // set the user ID from the token sub
    const userWithAdditionalTokenFields = {
        ...parsedToken,
        id: parsedToken.sub,
    };
    // Assumes all information is in the ID token
    // remove the token keys from the user object to stop it getting too large
    return omitKeys([...JWT_PAYLOAD_KNOWN_CLAIM_KEYS, ...tokenKeys], userWithAdditionalTokenFields);
}
export async function getTokens(storage) {
    const storageData = await retrieveTokens(storage);
    if (!storageData)
        return null;
    return {
        idToken: storageData.id_token,
        accessToken: storageData.access_token,
        refreshToken: storageData.refresh_token,
    };
}
/**
 * Use the provided storage to clear all authentication cookies
 * @param storage
 */
export const clearAuthCookies = async (storage) => {
    await clearTokens(storage);
    await clearUser(storage);
    await clearAuthServerSession(storage);
};
//# sourceMappingURL=session.js.map
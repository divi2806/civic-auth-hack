import type { DisplayMode, Endpoints } from "../../types.js";
export declare enum OAuthTokenTypes {
    ID_TOKEN = "id_token",
    ACCESS_TOKEN = "access_token",
    REFRESH_TOKEN = "refresh_token",
    ACCESS_TOKEN_EXPIRES_AT = "access_token_expires_at"
}
export declare const AUTH_SERVER_SESSION = "_session";
export declare const AUTH_SERVER_LEGACY_SESSION = "_session.legacy";
export declare enum CodeVerifier {
    COOKIE_NAME = "code_verifier",
    APP_URL = "app_url"
}
export declare enum UserStorage {
    USER = "user"
}
export interface CookieConfig {
    secure?: boolean;
    sameSite?: "strict" | "lax" | "none";
    domain?: string;
    path?: string;
    maxAge?: number;
    httpOnly?: boolean;
}
export type KeySetter = OAuthTokenTypes | CodeVerifier | UserStorage;
export type TokensCookieConfig = Record<OAuthTokenTypes | CodeVerifier, CookieConfig>;
export type CivicAuthConfig = null | {
    clientId: string;
    redirectUrl: string;
    logoutRedirectUrl: string;
    oauthServer: string;
    endpoints: Endpoints;
    scopes: string[];
    nonce?: string;
    challengeUrl?: string;
    refreshUrl?: string;
    logoutUrl?: string;
    displayMode?: DisplayMode;
};
//# sourceMappingURL=types.d.ts.map
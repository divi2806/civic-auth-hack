{"version":3,"file":"BrowserCookieStorage.js","sourceRoot":"","sources":["../../../src/shared/lib/BrowserCookieStorage.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  CookieStorage,\n  type CookieStorageSettings,\n} from \"@/shared/lib/storage.js\";\nimport type { CookieConfig } from \"./types.js\";\n\n// Ensure only runs in a browser environment\nfunction documentObj() {\n  if (typeof globalThis.window !== \"undefined\") return globalThis.document;\n  const stack = new Error().stack;\n  throw new Error(\n    \"Document is not available in this environment:\" + JSON.stringify(stack),\n  );\n}\n\nconst split = (separator: string) => (str: string) => str.split(separator);\n\nconst cookieStringFromSettings = (settings: CookieStorageSettings): string => {\n  let cookieSettings = \"\";\n\n  if (settings.path) {\n    cookieSettings += `Path=${settings.path}; `;\n  }\n  if (settings.expires) {\n    cookieSettings += `Expires=${settings.expires}; `;\n  }\n  if (settings.secure) {\n    cookieSettings += `Secure; `;\n  }\n  if (settings.httpOnly) {\n    // HttpOnly cannot be set from client-side JavaScript, so this clause can be omitted.\n    console.warn(\n      \"HttpOnly cannot be set on client-side cookies. Ignoring this setting.\",\n    );\n  }\n  if (settings.sameSite) {\n    cookieSettings += `SameSite=${settings.sameSite}; `;\n  }\n  return cookieSettings.trim();\n};\n/**\n * BrowserCookieStorage is a cookie storage implementation that works in the browser.\n * It uses the document.cookie API to set and get cookies.\n * Although retrieval of browser cookies is synchronous, the API is designed to be async for compatibility with other storage implementations.\n */\nexport class BrowserCookieStorage extends CookieStorage {\n  constructor(config: Partial<CookieStorageSettings> = {}) {\n    super({\n      // sensible browser defaults\n      secure: false,\n      httpOnly: false,\n      ...config,\n    });\n  }\n\n  // Synchronous methods\n  getSync(key: string): string | null {\n    const encodedValue = documentObj()\n      .cookie.split(\";\")\n      .map(split(\"=\"))\n      .find(([cookieKey]) => cookieKey?.trim() === key)?.[1];\n\n    return encodedValue ? decodeURIComponent(encodedValue) : null;\n  }\n\n  setSync(\n    key: string,\n    value: string,\n    cookieConfigOverride: Partial<CookieConfig> = {},\n  ): void {\n    const encodedValue = encodeURIComponent(value);\n    const settings = { ...this.settings, ...cookieConfigOverride };\n    const cookieString = cookieStringFromSettings(settings);\n    documentObj().cookie = `${key}=${encodedValue}; ${cookieString}`;\n  }\n\n  deleteSync(key: string): void {\n    documentObj().cookie = `${key}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;\n  }\n\n  // Async methods (for API compatibility)\n  async get(key: string): Promise<string | null> {\n    return this.getSync(key);\n  }\n\n  async set(\n    key: string,\n    value: string,\n    cookieConfigOverride: Partial<CookieConfig> = {},\n  ): Promise<void> {\n    this.setSync(key, value, cookieConfigOverride);\n  }\n\n  async delete(key: string): Promise<void> {\n    this.deleteSync(key);\n  }\n}\n"]}
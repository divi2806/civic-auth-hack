import { CookieStorage, } from "../../shared/lib/storage.js";
// Ensure only runs in a browser environment
function documentObj() {
    if (typeof globalThis.window !== "undefined")
        return globalThis.document;
    const stack = new Error().stack;
    throw new Error("Document is not available in this environment:" + JSON.stringify(stack));
}
const split = (separator) => (str) => str.split(separator);
const cookieStringFromSettings = (settings) => {
    let cookieSettings = "";
    if (settings.path) {
        cookieSettings += `Path=${settings.path}; `;
    }
    if (settings.expires) {
        cookieSettings += `Expires=${settings.expires}; `;
    }
    if (settings.secure) {
        cookieSettings += `Secure; `;
    }
    if (settings.httpOnly) {
        // HttpOnly cannot be set from client-side JavaScript, so this clause can be omitted.
        console.warn("HttpOnly cannot be set on client-side cookies. Ignoring this setting.");
    }
    if (settings.sameSite) {
        cookieSettings += `SameSite=${settings.sameSite}; `;
    }
    return cookieSettings.trim();
};
/**
 * BrowserCookieStorage is a cookie storage implementation that works in the browser.
 * It uses the document.cookie API to set and get cookies.
 * Although retrieval of browser cookies is synchronous, the API is designed to be async for compatibility with other storage implementations.
 */
export class BrowserCookieStorage extends CookieStorage {
    constructor(config = {}) {
        super({
            // sensible browser defaults
            secure: false,
            httpOnly: false,
            ...config,
        });
    }
    // Synchronous methods
    getSync(key) {
        const encodedValue = documentObj()
            .cookie.split(";")
            .map(split("="))
            .find(([cookieKey]) => cookieKey?.trim() === key)?.[1];
        return encodedValue ? decodeURIComponent(encodedValue) : null;
    }
    setSync(key, value, cookieConfigOverride = {}) {
        const encodedValue = encodeURIComponent(value);
        const settings = { ...this.settings, ...cookieConfigOverride };
        const cookieString = cookieStringFromSettings(settings);
        documentObj().cookie = `${key}=${encodedValue}; ${cookieString}`;
    }
    deleteSync(key) {
        documentObj().cookie = `${key}=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;`;
    }
    // Async methods (for API compatibility)
    async get(key) {
        return this.getSync(key);
    }
    async set(key, value, cookieConfigOverride = {}) {
        this.setSync(key, value, cookieConfigOverride);
    }
    async delete(key) {
        this.deleteSync(key);
    }
}
//# sourceMappingURL=BrowserCookieStorage.js.map
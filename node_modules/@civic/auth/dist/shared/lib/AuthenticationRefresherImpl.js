import { clearTokens, clearUser, getEndpointsWithOverrides, storeTokens, validateOauth2Tokens, } from "../../shared/lib/util.js";
import { OAuth2Client } from "oslo/oauth2";
import { GenericAuthenticationRefresher } from "./GenericAuthenticationRefresher.js";
export class AuthenticationRefresherImpl extends GenericAuthenticationRefresher {
    endpointOverrides;
    endpoints;
    oauth2client;
    constructor(authConfig, storage, onError, endpointOverrides) {
        super(onError);
        this.endpointOverrides = endpointOverrides;
        this.authConfig = authConfig;
        this.storage = storage;
        this.init();
    }
    async init() {
        if (!this.authConfig)
            throw new Error("No auth config available");
        // resolve oauth config
        this.endpoints = await getEndpointsWithOverrides(this.oauthServer, this.endpointOverrides);
        this.oauth2client = new OAuth2Client(this.authConfig.clientId, this.endpoints.auth, this.endpoints.token, {
            redirectURI: this.authConfig.redirectUrl,
        });
        return this;
    }
    static async build(authConfig, storage, onError, endpointOverrides) {
        const refresher = new AuthenticationRefresherImpl(authConfig, storage, onError, endpointOverrides);
        await refresher.init();
        return refresher;
    }
    async storeTokens(tokenResponseBody) {
        if (!this.storage)
            throw new Error("No storage available");
        await storeTokens(this.storage, tokenResponseBody);
    }
    async refreshAccessToken() {
        if (!this.storage)
            throw new Error("No storage available");
        try {
            const refreshToken = await this.getRefreshToken();
            if (!this.oauth2client) {
                await this.init();
            }
            if (!this.endpoints?.jwks) {
                throw new Error("No jwks endpoint");
            }
            const oauth2Client = this.oauth2client;
            try {
                const tokenResponseBody = await oauth2Client.refreshAccessToken(refreshToken);
                await validateOauth2Tokens(tokenResponseBody, this.endpoints.jwks, oauth2Client, this.oauthServer);
                await this.storeTokens(tokenResponseBody);
                return tokenResponseBody;
            }
            catch (tokenRequestError) {
                console.error("Error during refresh token network request:", tokenRequestError);
                throw new Error(`Token refresh failed: ${tokenRequestError.message}`);
            }
        }
        catch (error) {
            console.warn("refreshAccessToken failed");
            await clearTokens(this.storage);
            await clearUser(this.storage);
            throw error;
        }
    }
}
//# sourceMappingURL=AuthenticationRefresherImpl.js.map
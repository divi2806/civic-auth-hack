import type { AuthStorage, SessionData, UnknownObject, User } from "../../types.js";
import type { CookieConfig } from "./types.js";
type SameSiteOption = "strict" | "lax" | "none";
export interface SessionStorage {
    get(): SessionData;
    getUser(): User<UnknownObject> | null;
    set(data: Partial<SessionData>): void;
    setUser(data: User<UnknownObject> | null): void;
    clear(): void;
}
export type CookieStorageSettings = {
    httpOnly: boolean;
    secure: boolean;
    sameSite: SameSiteOption;
    expires: Date;
    path: string;
};
export declare const DEFAULT_COOKIE_DURATION: number;
export declare abstract class CookieStorage implements AuthStorage {
    protected settings: CookieStorageSettings;
    protected constructor(settings?: Partial<CookieStorageSettings>);
    abstract get(key: string): Promise<string | null>;
    abstract set(key: string, value: string, cookieConfigOverride?: Partial<CookieConfig>): Promise<void>;
    abstract delete(key: string): Promise<void>;
}
export type AuthCookieStorageSettings = {
    httpOnly: boolean;
    secure: boolean;
    sameSite: SameSiteOption;
    expires: Date;
    path: string;
    timestamp: Date;
};
export {};
//# sourceMappingURL=storage.d.ts.map
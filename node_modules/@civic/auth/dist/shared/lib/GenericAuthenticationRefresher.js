import { DEFAULT_AUTH_SERVER } from "../../constants.js";
import { retrieveTokens } from "../../shared/lib/util.js";
export class GenericAuthenticationRefresher {
    onError;
    authConfig;
    storage;
    constructor(onError) {
        this.onError = onError;
    }
    get oauthServer() {
        return this.authConfig?.oauthServer || DEFAULT_AUTH_SERVER;
    }
    async getRefreshToken() {
        if (!this.storage)
            throw new Error("No storage available");
        const tokens = await retrieveTokens(this.storage);
        if (!tokens?.refresh_token)
            throw new Error("No refresh token available");
        return tokens.refresh_token;
    }
    async refreshTokens() {
        try {
            const result = await this.refreshAccessToken();
            return result;
        }
        catch (error) {
            // Check if this is an AbortError or network-related error
            const errorMessage = error.message || "";
            const isNetworkError = errorMessage.includes("network") ||
                errorMessage.includes("abort") ||
                errorMessage.includes("cancel");
            if (isNetworkError) {
                console.warn("GenericAuthenticationRefresher: Network error during token refresh:", error);
            }
            else {
                console.error("GenericAuthenticationRefresher: Failed to refresh tokens:", error);
            }
            await this.onError(error);
            throw error;
        }
    }
}
//# sourceMappingURL=GenericAuthenticationRefresher.js.map
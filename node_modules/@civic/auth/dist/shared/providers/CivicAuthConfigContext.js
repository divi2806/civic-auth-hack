"use client";
import { jsx as _jsx } from "@emotion/react/jsx-runtime";
import { DEFAULT_AUTH_SERVER, DEFAULT_SCOPES } from "../../constants.js";
import React, { createContext, useMemo } from "react";
import { useOAuthEndpoints } from "../../shared/hooks/useOAuthEndpoints.js";
import { useCurrentUrl } from "../../shared/hooks/useCurrentUrl.js";
const defaultConfig = null;
// Context for exposing Config specifically to the TokenProvider
const CivicAuthConfigContext = createContext(defaultConfig);
const CivicAuthConfigProvider = ({ children, oauthServer, clientId, redirectUrl: inputRedirectUrl, nonce, challengeUrl, refreshUrl, logoutUrl, scopes, logoutRedirectUrl: inputLogoutRedirectUrl, displayMode = "iframe", }) => {
    const currentUrl = useCurrentUrl();
    const redirectUrl = useMemo(() => {
        const useUrl = inputRedirectUrl || currentUrl;
        if (useUrl) {
            return `${useUrl.split("?")[0]}`;
        }
        return "";
    }, [currentUrl, inputRedirectUrl]);
    const endpoints = useOAuthEndpoints(oauthServer);
    const logoutRedirectUrl = useMemo(() => {
        const useUrl = inputLogoutRedirectUrl || currentUrl;
        if (useUrl) {
            return `${useUrl.split("?")[0]}`;
        }
        return "";
    }, [currentUrl, inputLogoutRedirectUrl]);
    const value = useMemo(() => endpoints
        ? {
            clientId,
            redirectUrl,
            oauthServer: oauthServer || DEFAULT_AUTH_SERVER,
            endpoints,
            nonce,
            challengeUrl,
            refreshUrl,
            logoutUrl,
            scopes: scopes || DEFAULT_SCOPES,
            logoutRedirectUrl,
            displayMode,
        }
        : null, [
        clientId,
        redirectUrl,
        oauthServer,
        endpoints,
        nonce,
        challengeUrl,
        refreshUrl,
        logoutUrl,
        scopes,
        logoutRedirectUrl,
        displayMode,
    ]);
    return (_jsx(CivicAuthConfigContext.Provider, { value: value, children: children }));
};
export { CivicAuthConfigProvider, CivicAuthConfigContext };
//# sourceMappingURL=CivicAuthConfigContext.js.map
"use client";
import { jsx as _jsx } from "@emotion/react/jsx-runtime";
import React, { createContext, useMemo, useRef, useState } from "react";
import { useIsInIframe } from "../../shared/hooks/useIsInIframe.js";
import { useLocalStorage, useDarkMode } from "usehooks-ts";
import { DARK_BACKGROUND_COLOR, LIGHT_BACKGROUND_COLOR } from "../../constants.js";
const defaultIframe = {
    iframeRef: null,
    logoutIframeRef: null,
    setIframeIsVisible: () => { },
    setIframeAborted: () => { },
    setLogoutIframeIsVisible: () => { },
    iframeIsVisible: false,
    iframeAborted: false,
    logoutIframeIsVisible: false,
    iframeMode: "modal",
    renderIframe: false,
    backgroundColor: "white",
    isIframeMounted: false,
    setIframeMounted: () => { },
};
// Context for exposing Iframe specifically to the TokenProvider
const IframeContext = createContext(defaultIframe);
const IframeProvider = ({ children, iframeMode = "modal", }) => {
    const iframeRef = useRef(null);
    const logoutIframeRef = useRef(null);
    const isInIframe = useIsInIframe();
    const [isIframeMounted, setIframeMounted] = useState(false);
    const [iframeIsVisible, setIframeIsVisible] = useState(false);
    const [iframeAborted, setIframeAborted] = useState(false);
    const [logoutIframeIsVisible, setLogoutIframeIsVisible] = useState(false);
    const [designOptions] = useLocalStorage(`loginAppDesign`, { colorMode: "auto" });
    const { isDarkMode } = useDarkMode();
    const loginAppBackgroundColor = useMemo(() => {
        const colorFromWindow = isDarkMode
            ? DARK_BACKGROUND_COLOR
            : LIGHT_BACKGROUND_COLOR;
        const colorMode = designOptions?.colorMode;
        const colorFromStorage = colorMode === "dark" ? DARK_BACKGROUND_COLOR : LIGHT_BACKGROUND_COLOR;
        // if the color mode is auto then use the window matchMedia to determine the color mode
        // otherwise use the stored local color mode set from the login-app
        return colorMode && colorMode !== "auto"
            ? colorFromStorage
            : colorFromWindow;
    }, [designOptions, isDarkMode]);
    const renderIframe = iframeMode === "modal" && !isInIframe;
    return (_jsx(IframeContext.Provider, { value: {
            iframeRef,
            logoutIframeRef,
            setIframeIsVisible,
            iframeAborted,
            setIframeAborted,
            setLogoutIframeIsVisible,
            iframeIsVisible,
            logoutIframeIsVisible,
            iframeMode,
            renderIframe,
            backgroundColor: loginAppBackgroundColor,
            setIframeMounted,
            isIframeMounted,
        }, children: children }));
};
export { IframeProvider, IframeContext };
//# sourceMappingURL=IframeProvider.js.map
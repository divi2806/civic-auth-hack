import React from "react";
import type { ReactNode } from "react";
import type { AuthStatus, AuthStorage, DisplayMode, ForwardedTokens, User } from "../../types.js";
import type { AuthContextType } from "../../shared/providers/AuthContext.js";
import type { JWTPayload } from "jose";
type UserContent = Record<string, unknown> & JWTPayload;
type UserContextType<T extends UserContent = UserContent> = {
    user: User<T> | null;
} & {
    accessToken?: string | null;
    idToken?: string | null;
    forwardedTokens?: ForwardedTokens;
} & Omit<AuthContextType, "isAuthenticated">;
declare const UserContext: React.Context<UserContextType<UserContent> | null>;
declare const UserProvider: <T extends UserContent>({ children, storage, user: inputUser, signOut, authStatus, signIn, displayMode, }: {
    children: ReactNode;
    storage: AuthStorage;
    user: User<T> | null;
    signOut: () => Promise<void>;
    authStatus: AuthStatus;
    signIn: (displayMode?: DisplayMode) => Promise<void>;
    displayMode: DisplayMode;
}) => import("@emotion/react/jsx-runtime").JSX.Element;
export type { UserContextType };
export { UserProvider, UserContext };
//# sourceMappingURL=UserProvider.d.ts.map
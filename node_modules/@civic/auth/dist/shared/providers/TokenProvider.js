"use client";
import { jsx as _jsx } from "@emotion/react/jsx-runtime";
import React, { createContext, useMemo } from "react";
import { useSession } from "../../shared/hooks/useSession.js";
import { convertForwardedTokenFormat } from "../../lib/jwt.js";
import { decodeJwt } from "jose";
const TokenContext = createContext(undefined);
const TokenProvider = ({ children }) => {
    const { data: session, isLoading, error: authError } = useSession();
    const decodeTokens = useMemo(() => {
        if (!session?.idToken)
            return null;
        const { forwardedTokens } = decodeJwt(session.idToken);
        return forwardedTokens
            ? convertForwardedTokenFormat(forwardedTokens)
            : null;
    }, [session?.idToken]);
    const value = useMemo(() => ({
        accessToken: session?.accessToken || null,
        idToken: session?.idToken || null,
        forwardedTokens: decodeTokens || {},
        isLoading,
        error: authError,
    }), [
        session?.accessToken,
        session?.idToken,
        decodeTokens,
        isLoading,
        authError,
    ]);
    return (_jsx(TokenContext.Provider, { value: value, children: children }));
};
export { TokenProvider, TokenContext };
//# sourceMappingURL=TokenProvider.js.map
import type { Dispatch, ReactNode, RefObject, SetStateAction } from "react";
import React from "react";
import type { IframeMode } from "../../types.js";
export type IframeProviderOutput = {
    iframeRef: RefObject<HTMLIFrameElement> | null;
    logoutIframeRef: RefObject<HTMLIFrameElement> | null;
    setIframeIsVisible: Dispatch<SetStateAction<boolean>>;
    setIframeAborted: Dispatch<SetStateAction<boolean>>;
    iframeAborted: boolean;
    setLogoutIframeIsVisible: Dispatch<SetStateAction<boolean>>;
    iframeIsVisible: boolean;
    logoutIframeIsVisible: boolean;
    iframeMode: IframeMode;
    renderIframe: boolean;
    backgroundColor: string;
    isIframeMounted: boolean;
    setIframeMounted: Dispatch<SetStateAction<boolean>>;
};
declare const IframeContext: React.Context<IframeProviderOutput>;
type IframeContextType = {
    children: ReactNode;
    iframeMode?: IframeMode;
    onIframeMounted?: () => void;
};
declare const IframeProvider: ({ children, iframeMode, }: IframeContextType) => import("@emotion/react/jsx-runtime").JSX.Element;
export type { IframeContextType };
export { IframeProvider, IframeContext };
//# sourceMappingURL=IframeProvider.d.ts.map
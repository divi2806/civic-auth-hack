{"version":3,"file":"IframeProvider.js","sourceRoot":"","sources":["../../../src/shared/providers/IframeProvider.tsx"],"names":[],"mappings":"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","sourcesContent":["\"use client\";\nimport type { Dispatch, ReactNode, RefObject, SetStateAction } from \"react\";\nimport React, { createContext, useMemo, useRef, useState } from \"react\";\nimport { useIsInIframe } from \"@/shared/hooks/useIsInIframe.js\";\nimport type { IframeMode, LoginAppDesignOptions } from \"@/types.js\";\nimport { useLocalStorage, useDarkMode } from \"usehooks-ts\";\nimport { DARK_BACKGROUND_COLOR, LIGHT_BACKGROUND_COLOR } from \"@/constants.js\";\n\nexport type IframeProviderOutput = {\n  iframeRef: RefObject<HTMLIFrameElement> | null;\n  logoutIframeRef: RefObject<HTMLIFrameElement> | null;\n  setIframeIsVisible: Dispatch<SetStateAction<boolean>>;\n  setIframeAborted: Dispatch<SetStateAction<boolean>>;\n  iframeAborted: boolean;\n  setLogoutIframeIsVisible: Dispatch<SetStateAction<boolean>>;\n  iframeIsVisible: boolean;\n  logoutIframeIsVisible: boolean;\n  iframeMode: IframeMode;\n  renderIframe: boolean;\n  backgroundColor: string;\n  isIframeMounted: boolean;\n  setIframeMounted: Dispatch<SetStateAction<boolean>>;\n};\nconst defaultIframe: IframeProviderOutput = {\n  iframeRef: null,\n  logoutIframeRef: null,\n  setIframeIsVisible: () => {},\n  setIframeAborted: () => {},\n  setLogoutIframeIsVisible: () => {},\n  iframeIsVisible: false,\n  iframeAborted: false,\n  logoutIframeIsVisible: false,\n  iframeMode: \"modal\",\n  renderIframe: false,\n  backgroundColor: \"white\",\n  isIframeMounted: false,\n  setIframeMounted: () => {},\n};\n\n// Context for exposing Iframe specifically to the TokenProvider\nconst IframeContext = createContext<IframeProviderOutput>(defaultIframe);\n\ntype IframeContextType = {\n  children: ReactNode;\n  iframeMode?: IframeMode;\n  onIframeMounted?: () => void;\n};\n\nconst IframeProvider = ({\n  children,\n  iframeMode = \"modal\",\n}: IframeContextType) => {\n  const iframeRef = useRef<HTMLIFrameElement>(null);\n  const logoutIframeRef = useRef<HTMLIFrameElement>(null);\n  const isInIframe = useIsInIframe();\n  const [isIframeMounted, setIframeMounted] = useState(false);\n  const [iframeIsVisible, setIframeIsVisible] = useState(false);\n  const [iframeAborted, setIframeAborted] = useState(false);\n  const [logoutIframeIsVisible, setLogoutIframeIsVisible] = useState(false);\n  const [designOptions] = useLocalStorage<LoginAppDesignOptions>(\n    `loginAppDesign`,\n    { colorMode: \"auto\" },\n  );\n  const { isDarkMode } = useDarkMode();\n  const loginAppBackgroundColor = useMemo(() => {\n    const colorFromWindow = isDarkMode\n      ? DARK_BACKGROUND_COLOR\n      : LIGHT_BACKGROUND_COLOR;\n\n    const colorMode = designOptions?.colorMode;\n    const colorFromStorage =\n      colorMode === \"dark\" ? DARK_BACKGROUND_COLOR : LIGHT_BACKGROUND_COLOR;\n\n    // if the color mode is auto then use the window matchMedia to determine the color mode\n    // otherwise use the stored local color mode set from the login-app\n    return colorMode && colorMode !== \"auto\"\n      ? colorFromStorage\n      : colorFromWindow;\n  }, [designOptions, isDarkMode]);\n\n  const renderIframe = iframeMode === \"modal\" && !isInIframe;\n\n  return (\n    <IframeContext.Provider\n      value={{\n        iframeRef,\n        logoutIframeRef,\n        setIframeIsVisible,\n        iframeAborted,\n        setIframeAborted,\n        setLogoutIframeIsVisible,\n        iframeIsVisible,\n        logoutIframeIsVisible,\n        iframeMode,\n        renderIframe,\n        backgroundColor: loginAppBackgroundColor,\n        setIframeMounted,\n        isIframeMounted,\n      }}\n    >\n      {children}\n    </IframeContext.Provider>\n  );\n};\n\nexport type { IframeContextType };\nexport { IframeProvider, IframeContext };\n"]}
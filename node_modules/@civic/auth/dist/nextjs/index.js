import { resolveAuthConfig } from "../nextjs/config.js";
import { NextjsCookieStorage } from "../nextjs/cookies.js";
import { ServerAuthenticationResolver } from "../server/ServerAuthenticationResolver.js";
import { printVersion } from "../shared/index.js";
printVersion();
import { getTokens as getSessionTokens, getUser as getSessionUser, } from "../shared/lib/session.js";
export { resolveAuthConfig };
export { createCivicAuthPlugin, defaultAuthConfig } from "../nextjs/config.js";
const getAuthResolver = async () => {
    const config = resolveAuthConfig();
    const clientStorage = new NextjsCookieStorage();
    return ServerAuthenticationResolver.build({ ...config, redirectUrl: config.callbackUrl }, clientStorage);
};
export const isLoggedIn = async () => {
    const authResolver = await getAuthResolver();
    const existingSession = await authResolver.validateExistingSession(false);
    return existingSession.authenticated;
};
export const getUser = async () => {
    const hasValidSession = await isLoggedIn();
    if (!hasValidSession)
        return null;
    const clientStorage = new NextjsCookieStorage();
    return getSessionUser(clientStorage);
};
export const getTokens = async () => {
    const hasValidSession = await isLoggedIn();
    if (!hasValidSession)
        return null;
    const clientStorage = new NextjsCookieStorage();
    return getSessionTokens(clientStorage);
};
export { handler } from "../nextjs/routeHandler.js";
export { NextjsCookieStorage } from "../nextjs/cookies.js";
export { CivicNextAuthProvider as CivicAuthProvider, } from "../nextjs/providers/NextAuthProvider.js";
//# sourceMappingURL=index.js.map
import type { NextConfig } from "next";
import { type CookieConfig, type TokensCookieConfig } from "../shared/lib/types.js";
export type CookiesConfigObject = {
    tokens: TokensCookieConfig;
    user: CookieConfig;
};
/**
 * Configuration values for Civic Auth.
 * Only clientId is required, all others are optional.
 */
export type AuthConfigWithDefaults = {
    clientId: string;
    oauthServer: string;
    callbackUrl: string;
    loginUrl: string;
    logoutUrl: string;
    logoutCallbackUrl: string;
    challengeUrl: string;
    refreshUrl: string;
    include: string[];
    exclude: string[];
    cookies: CookiesConfigObject;
    basePath?: string;
};
/**
 * All possible config values for Civic Auth
 */
export type OptionalAuthConfig = Partial<AuthConfigWithDefaults | {
    cookies?: {
        tokens?: Partial<TokensCookieConfig>;
        user?: CookieConfig;
    };
}> & {
    callbackUrl?: string;
    loginUrl?: string;
    logoutUrl?: string;
    logoutCallbackUrl?: string;
    challengeUrl?: string;
    refreshUrl?: string;
    include?: string[];
    exclude?: string[];
    basePath?: string;
    oauthServer?: string;
};
/**
 * Configuration values for Civic Auth.
 * Only clientId is required, all others are optional.
 */
export type AuthConfig = OptionalAuthConfig & {
    clientId: string;
    exclude?: string[];
};
/**
 * Default configuration values that will be used if not overridden
 */
export declare const defaultAuthConfig: Omit<AuthConfigWithDefaults, "clientId">;
/**
 * Resolves the authentication configuration by combining:
 * 1. Default values
 * 2. Environment variables (set internally by the plugin)
 * 3. Explicitly passed configuration
 *
 * Config will be merged deeply, with arrays not merged, so that the
 * default include list (for example) ["/*"] will not be added
 *
 * Note: Developers should not set _civic_auth_* environment variables directly.
 * Instead, pass configuration to the createCivicAuthPlugin in next.config.js:
 *
 * @example
 * ```js
 * // next.config.js
 * export default createCivicAuthPlugin({
 *   callbackUrl: '/custom/callback',
 * })
 * ```
 */
export declare const resolveAuthConfig: (config?: Partial<AuthConfig>) => AuthConfigWithDefaults;
/**
 * Creates a Next.js plugin that handles auth configuration.
 *
 * This is the main configuration point for the auth system.
 * Do not set _civic_auth_* environment variables directly - instead,
 * pass your configuration here.
 *
 * The only required field is clientId.
 *
 * Notes:
 * - If you provide explicit URLs, they will be used exactly as provided.
 * - Default URLs will automatically include the basePath from your Next.js config.
 *
 * @example
 * ```js
 * // next.config.js
 * export default createCivicAuthPlugin({
 *  clientId: 'my-client-id',
 * });
 * ```
 *
 * @example
 * ```js
 * // next.config.js
 * export default createCivicAuthPlugin({
 *   clientId: 'my-client-id',
 *   callbackUrl: '/custom/callback',
 *   loginUrl: '/custom/login',
 *   logoutUrl: '/custom/logout',
 *   logoutCallbackUrl: '/custom/logoutcallback',
 *   include: ['/protected/*'],
 *   exclude: ['/public/*']
 * })
 * ```
 *
 * The plugin sets internal environment variables that are used by
 * the auth system. These variables should not be set manually.
 */
export declare const createCivicAuthPlugin: (authConfig: AuthConfig) => (nextConfig?: NextConfig) => {
    env: {
        _civic_auth_client_id: string;
        _civic_oauth_server: string;
        _civic_auth_callback_url: string;
        _civic_auth_challenge_url: string;
        _civic_auth_login_url: string;
        _civic_auth_logout_url: string;
        _civic_auth_logout_callback_url: string;
        _civic_auth_refresh_url: string;
        _civic_auth_includes: string;
        _civic_auth_excludes: string;
        _civic_auth_cookie_config: string;
        _civic_auth_base_path: string | undefined;
    };
    exportPathMap?: (defaultMap: import("next/dist/server/config-shared.js").ExportPathMap, ctx: {
        dev: boolean;
        dir: string;
        outDir: string | null;
        distDir: string;
        buildId: string;
    }) => Promise<import("next/dist/server/config-shared.js").ExportPathMap> | import("next/dist/server/config-shared.js").ExportPathMap;
    i18n?: import("next/dist/server/config-shared.js").I18NConfig | null;
    eslint?: import("next/dist/server/config-shared.js").ESLintConfig;
    typescript?: import("next/dist/server/config-shared.js").TypeScriptConfig;
    headers?: () => Promise<import("next/dist/lib/load-custom-routes.js").Header[]>;
    rewrites?: () => Promise<import("next/dist/lib/load-custom-routes.js").Rewrite[] | {
        beforeFiles: import("next/dist/lib/load-custom-routes.js").Rewrite[];
        afterFiles: import("next/dist/lib/load-custom-routes.js").Rewrite[];
        fallback: import("next/dist/lib/load-custom-routes.js").Rewrite[];
    }>;
    redirects?: () => Promise<import("next/dist/lib/load-custom-routes.js").Redirect[]>;
    excludeDefaultMomentLocales?: boolean;
    webpack?: import("next/dist/server/config-shared.js").NextJsWebpackConfig | null;
    trailingSlash?: boolean;
    distDir?: string;
    cleanDistDir?: boolean;
    assetPrefix?: string;
    cacheHandler?: string | undefined;
    cacheMaxMemorySize?: number;
    useFileSystemPublicRoutes?: boolean;
    generateBuildId?: () => string | null | Promise<string | null>;
    generateEtags?: boolean;
    pageExtensions?: string[];
    compress?: boolean;
    analyticsId?: string;
    poweredByHeader?: boolean;
    images?: import("next/dist/shared/lib/image-config.js").ImageConfig;
    devIndicators?: {
        buildActivity?: boolean;
        buildActivityPosition?: "bottom-right" | "bottom-left" | "top-right" | "top-left";
    };
    onDemandEntries?: {
        maxInactiveAge?: number;
        pagesBufferLength?: number;
    };
    amp?: {
        canonicalBase?: string;
    };
    deploymentId?: string;
    basePath?: string;
    sassOptions?: {
        [key: string]: any;
    };
    productionBrowserSourceMaps?: boolean;
    optimizeFonts?: boolean;
    reactProductionProfiling?: boolean;
    reactStrictMode?: boolean | null;
    publicRuntimeConfig?: {
        [key: string]: any;
    };
    serverRuntimeConfig?: {
        [key: string]: any;
    };
    httpAgentOptions?: {
        keepAlive?: boolean;
    };
    outputFileTracing?: boolean;
    staticPageGenerationTimeout?: number;
    crossOrigin?: "anonymous" | "use-credentials";
    swcMinify?: boolean;
    compiler?: {
        reactRemoveProperties?: boolean | {
            properties?: string[];
        };
        relay?: {
            src: string;
            artifactDirectory?: string;
            language?: "typescript" | "javascript" | "flow";
            eagerEsModules?: boolean;
        };
        removeConsole?: boolean | {
            exclude?: string[];
        };
        styledComponents?: boolean | import("next/dist/server/config-shared.js").StyledComponentsConfig;
        emotion?: boolean | import("next/dist/server/config-shared.js").EmotionConfig;
        styledJsx?: boolean | {
            useLightningcss?: boolean;
        };
    };
    output?: "standalone" | "export";
    transpilePackages?: string[];
    skipMiddlewareUrlNormalize?: boolean;
    skipTrailingSlashRedirect?: boolean;
    modularizeImports?: Record<string, {
        transform: string | Record<string, string>;
        preventFullImport?: boolean;
        skipDefaultConversion?: boolean;
    }>;
    logging?: {
        fetches?: {
            fullUrl?: boolean;
        };
    };
    experimental?: import("next/dist/server/config-shared.js").ExperimentalConfig;
};
//# sourceMappingURL=config.d.ts.map
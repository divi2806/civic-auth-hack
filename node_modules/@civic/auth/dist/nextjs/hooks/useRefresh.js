import { useCivicAuthConfig } from "../../shared/hooks/useCivicAuthConfig.js";
import { useEffect, useState } from "react";
import { BrowserCookieStorage } from "../../shared/index.js";
import { resolveAuthConfig } from "../config.js";
import { NextClientAuthenticationRefresher } from "../NextClientAuthenticationRefresher.js";
import { useSession } from "../../shared/hooks/useSession.js";
const useRefresh = () => {
    const [error, setError] = useState();
    const { data: session } = useSession();
    const authConfig = useCivicAuthConfig();
    // setup token autorefresh
    const [refresher, setRefresher] = useState(undefined);
    useEffect(() => {
        if (!authConfig)
            return;
        const abortController = new AbortController();
        const currentRefresher = refresher;
        const config = resolveAuthConfig(authConfig ?? {});
        const storage = new BrowserCookieStorage(config.cookies.tokens.access_token);
        const onError = async (error) => {
            console.error("Error refreshing token", error);
            refresher?.clearAutorefresh();
            setError(error);
        };
        NextClientAuthenticationRefresher.build({ ...authConfig }, storage, onError).then((newRefresher) => {
            if (abortController.signal.aborted)
                return;
            currentRefresher?.clearAutorefresh();
            setRefresher(newRefresher);
        });
        return () => {
            abortController.abort();
            currentRefresher?.clearAutorefresh();
        };
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [authConfig]); // Only depend on what actually changes
    useEffect(() => {
        if (session?.authenticated) {
            refresher?.setupAutorefresh();
        }
        else {
            refresher?.clearAutorefresh();
        }
        return () => refresher?.clearAutorefresh();
    }, [refresher, session?.authenticated]);
    return {
        error,
    };
};
export { useRefresh };
//# sourceMappingURL=useRefresh.js.map
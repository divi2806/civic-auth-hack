import { loggers } from "../lib/logger.js";
import { withoutUndefined } from "../utils.js";
import { CodeVerifier, OAuthTokenTypes, } from "../shared/lib/types.js";
import { DEFAULT_AUTH_SERVER } from "../constants.js";
import { merge } from "ts-deepmerge";
import { sanitizeBasePath } from "./utils.js";
const logger = loggers.nextjs.handlers.auth;
const defaultServerSecure = !(process.env.NODE_ENV === "development");
const defaultCookiesMaxAge = 60 * 60; // 1 hour
/**
 * Default configuration values that will be used if not overridden
 */
export const defaultAuthConfig = {
    oauthServer: DEFAULT_AUTH_SERVER,
    callbackUrl: "/api/auth/callback",
    challengeUrl: "/api/auth/challenge",
    refreshUrl: "/api/auth/refresh",
    logoutUrl: "/api/auth/logout",
    logoutCallbackUrl: "/api/auth/logoutcallback",
    loginUrl: "/",
    include: ["/**"],
    exclude: ["/api/auth/**"],
    basePath: "",
    cookies: {
        tokens: {
            [OAuthTokenTypes.ID_TOKEN]: {
                secure: defaultServerSecure,
                httpOnly: true,
                sameSite: "strict",
                path: "/",
                maxAge: defaultCookiesMaxAge,
            },
            [OAuthTokenTypes.ACCESS_TOKEN]: {
                secure: defaultServerSecure,
                httpOnly: true,
                sameSite: "strict",
                path: "/",
                maxAge: defaultCookiesMaxAge,
            },
            [OAuthTokenTypes.REFRESH_TOKEN]: {
                secure: defaultServerSecure,
                httpOnly: true,
                sameSite: "strict",
                path: "/",
                maxAge: defaultCookiesMaxAge,
            },
            [OAuthTokenTypes.ACCESS_TOKEN_EXPIRES_AT]: {
                secure: defaultServerSecure,
                httpOnly: false, // we need this to be available client-side
                sameSite: "strict",
                path: "/",
                maxAge: defaultCookiesMaxAge,
            },
            [CodeVerifier.COOKIE_NAME]: {
                secure: defaultServerSecure,
                httpOnly: true,
                sameSite: "strict",
                path: "/",
                maxAge: defaultCookiesMaxAge,
            },
            [CodeVerifier.APP_URL]: {
                secure: defaultServerSecure,
                httpOnly: true,
                sameSite: "strict",
                path: "/",
                maxAge: defaultCookiesMaxAge,
            },
        },
        user: {
            secure: defaultServerSecure,
            httpOnly: false, // we need this to be available client-side
            sameSite: "strict",
            path: "/",
            maxAge: defaultCookiesMaxAge,
        },
    },
};
/**
 * Resolves the authentication configuration by combining:
 * 1. Default values
 * 2. Environment variables (set internally by the plugin)
 * 3. Explicitly passed configuration
 *
 * Config will be merged deeply, with arrays not merged, so that the
 * default include list (for example) ["/*"] will not be added
 *
 * Note: Developers should not set _civic_auth_* environment variables directly.
 * Instead, pass configuration to the createCivicAuthPlugin in next.config.js:
 *
 * @example
 * ```js
 * // next.config.js
 * export default createCivicAuthPlugin({
 *   callbackUrl: '/custom/callback',
 * })
 * ```
 */
export const resolveAuthConfig = (config = {}) => {
    // Read configuration that was set by the plugin via environment variables
    const configFromEnv = withoutUndefined({
        clientId: process.env._civic_auth_client_id,
        oauthServer: process.env._civic_oauth_server,
        callbackUrl: process.env._civic_auth_callback_url,
        challengeUrl: process.env._civic_auth_challenge_url,
        loginUrl: process.env._civic_auth_login_url,
        logoutUrl: process.env._civic_auth_logout_url,
        logoutCallbackUrl: process.env._civic_auth_logout_callback_url,
        refreshUrl: process.env._civic_auth_refresh_url,
        include: process.env._civic_auth_includes?.split(","),
        exclude: process.env._civic_auth_excludes?.split(","),
        cookies: process.env._civic_auth_cookie_config
            ? JSON.parse(process.env._civic_auth_cookie_config)
            : undefined,
        basePath: process.env._civic_auth_base_path || "",
    });
    // Ensure "/api/auth/**" is always excluded
    const finalExclude = new Set([
        ...defaultAuthConfig.exclude,
        ...(configFromEnv.exclude || []),
        ...(config.exclude ?? []),
    ]);
    // Perform a deep merge of the configurations
    const mergedConfig = merge.withOptions({ mergeArrays: false }, defaultAuthConfig, configFromEnv, config);
    // Override the exclude list with the ensured list
    mergedConfig.exclude = Array.from(finalExclude);
    logger.debug("Config from environment:", JSON.stringify(configFromEnv, null, 2));
    logger.debug("Resolved config:", JSON.stringify(mergedConfig, null, 2));
    if (mergedConfig.clientId === undefined) {
        throw new Error("Civic Auth client ID is required");
    }
    return mergedConfig;
};
/**
 * Creates a Next.js plugin that handles auth configuration.
 *
 * This is the main configuration point for the auth system.
 * Do not set _civic_auth_* environment variables directly - instead,
 * pass your configuration here.
 *
 * The only required field is clientId.
 *
 * Notes:
 * - If you provide explicit URLs, they will be used exactly as provided.
 * - Default URLs will automatically include the basePath from your Next.js config.
 *
 * @example
 * ```js
 * // next.config.js
 * export default createCivicAuthPlugin({
 *  clientId: 'my-client-id',
 * });
 * ```
 *
 * @example
 * ```js
 * // next.config.js
 * export default createCivicAuthPlugin({
 *   clientId: 'my-client-id',
 *   callbackUrl: '/custom/callback',
 *   loginUrl: '/custom/login',
 *   logoutUrl: '/custom/logout',
 *   logoutCallbackUrl: '/custom/logoutcallback',
 *   include: ['/protected/*'],
 *   exclude: ['/public/*']
 * })
 * ```
 *
 * The plugin sets internal environment variables that are used by
 * the auth system. These variables should not be set manually.
 */
export const createCivicAuthPlugin = (authConfig) => {
    return (nextConfig) => {
        logger.debug("createCivicAuthPlugin nextConfig", JSON.stringify(nextConfig, null, 2));
        // Extract basePath from Next.js config
        const basePath = sanitizeBasePath(nextConfig?.basePath || "");
        // Create a copy of default URLs with basePath added
        const defaultUrlsWithBasePath = {};
        // Only apply to URLs that aren't explicitly set in authConfig
        if (basePath) {
            if (!authConfig.callbackUrl)
                defaultUrlsWithBasePath.callbackUrl = `${basePath}/api/auth/callback`;
            if (!authConfig.challengeUrl)
                defaultUrlsWithBasePath.challengeUrl = `${basePath}/api/auth/challenge`;
            if (!authConfig.refreshUrl)
                defaultUrlsWithBasePath.refreshUrl = `${basePath}/api/auth/refresh`;
            if (!authConfig.logoutUrl)
                defaultUrlsWithBasePath.logoutUrl = `${basePath}/api/auth/logout`;
            if (!authConfig.logoutCallbackUrl)
                defaultUrlsWithBasePath.logoutCallbackUrl = `${basePath}/api/auth/logoutcallback`;
            if (!authConfig.loginUrl && authConfig.loginUrl !== "")
                defaultUrlsWithBasePath.loginUrl = basePath;
        }
        // Create final config with basePath and possibly modified URLs
        const resolvedConfig = resolveAuthConfig({
            ...defaultUrlsWithBasePath,
            ...authConfig,
            basePath,
        });
        return {
            ...nextConfig,
            env: {
                ...nextConfig?.env,
                // Internal environment variables - do not set these manually
                _civic_auth_client_id: resolvedConfig.clientId,
                _civic_oauth_server: resolvedConfig.oauthServer,
                _civic_auth_callback_url: resolvedConfig.callbackUrl,
                _civic_auth_challenge_url: resolvedConfig.challengeUrl,
                _civic_auth_login_url: resolvedConfig.loginUrl,
                _civic_auth_logout_url: resolvedConfig.logoutUrl,
                _civic_auth_logout_callback_url: resolvedConfig.logoutCallbackUrl,
                _civic_auth_refresh_url: resolvedConfig.refreshUrl,
                _civic_auth_includes: resolvedConfig.include.join(","),
                _civic_auth_excludes: resolvedConfig.exclude.join(","),
                _civic_auth_cookie_config: JSON.stringify(resolvedConfig.cookies),
                _civic_auth_base_path: resolvedConfig.basePath,
            },
        };
    };
};
//# sourceMappingURL=config.js.map
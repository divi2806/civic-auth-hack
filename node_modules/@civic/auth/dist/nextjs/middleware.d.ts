/**
 * Authenticates the user on all requests by checking the token cookie
 *
 * Usage:
 * Option 1: use if no other middleware (e.g. no next-intl etc)
 * export default authMiddleware();
 *
 * Option 2: use if other middleware is needed - default auth config
 * export default withAuth((request) => {
 *    logger.debug('in custom middleware', request.nextUrl.pathname);
 *    return NextResponse.next();
 * })
 *
 * Option 3: use if other middleware is needed - specifying auth config
 * const withCivicAuth = auth({ loginUrl: '/login', include: ['/[.*]/user'] })
 * export default withCivicAuth((request) => {
 *   logger.debug('in custom middleware', request.url);
 *   return NextResponse.next();
 * })
 *
 */
import type { NextRequest } from "next/server.js";
import { NextResponse } from "next/server.js";
import type { AuthConfigWithDefaults, OptionalAuthConfig } from "../nextjs/config.js";
import type { SessionData } from "../types.js";
type Middleware = (request: NextRequest) => Promise<NextResponse> | NextResponse;
/**
 * use a ServerAuthenticationResolver to validate the existing session
 * using NextJS cookie storage
 * @param authConfigWithDefaults
 * @param request NextRequest object from middleware
 * @returns {Promise<SessionData>}
 */
export declare const validateAuthTokensIfPresent: (authConfigWithDefaults: AuthConfigWithDefaults, request: NextRequest) => Promise<SessionData>;
/**
 *
 * Use this when auth is the only middleware you need.
 * Usage:
 *
 * export default authMiddleware({ loginUrl = '/login' }); // or just authMiddleware();
 *
 */
export declare const authMiddleware: (authConfig?: OptionalAuthConfig) => (request: NextRequest) => Promise<NextResponse>;
/**
 * Usage:
 *
 * export default withAuth(async (request) => {
 *    logger.debug('my middleware');
 *    return NextResponse.next();
 *  })
 */
export declare function withAuth(middleware: Middleware): (request: NextRequest) => Promise<NextResponse>;
/**
 * Use this when you want to configure the middleware here (an alternative is to do it in the next.config file)
 *
 * Usage:
 *
 * export default auth(authConfig: AuthConfig ) => {
 *    logger.debug('my middleware');
 *    return NextResponse.next();
 *  })
 *
 */
export declare function auth(authConfig?: OptionalAuthConfig): (middleware: Middleware) => ((request: NextRequest) => Promise<NextResponse>);
export {};
//# sourceMappingURL=middleware.d.ts.map
{"version":3,"file":"windowUtil.js","sourceRoot":"","sources":["../../src/lib/windowUtil.ts"],"names":[],"mappings":"AASA;;;;GAIG;AACH,MAAM,gBAAgB,GAAG,CAAC,MAAc,EAAW,EAAE;IACnD,2CAA2C;IAC3C,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;QAClC,OAAO,KAAK,CAAC;IACf,CAAC;IAED,8BAA8B;IAC9B,MAAM,SAAS,GAAG,OAAO,CACvB,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,MAAM,EAAE,OAAO,IAAI,MAAM,CAAC,GAAG,EAAE,OAAO,CAChE,CAAC;IAEF,mDAAmD;IACnD,IAAI,SAAS,EAAE,CAAC;QACd,OAAO,KAAK,CAAC;IACf,CAAC;IAED,IAAI,UAAU,GAAG,KAAK,CAAC;IAEvB,IAAI,CAAC;QACH,mCAAmC;QACnC,iFAAiF;QACjF,IAAI,MAAM,CAAC,YAAY,KAAK,IAAI,EAAE,CAAC;YACjC,UAAU,GAAG,IAAI,CAAC;QACpB,CAAC;QAED,yDAAyD;QACzD,6DAA6D;QAC7D,MAAM,OAAO,GAAG,MAAM,CAAC,YAAkC,CAAC;QAC1D,IAAI,OAAO,IAAI,OAAO,CAAC,EAAE,KAAK,mBAAmB,EAAE,CAAC;YAClD,UAAU,GAAG,IAAI,CAAC;QACpB,CAAC;IACH,CAAC;IAAC,MAAM,CAAC;QACP,+DAA+D;QAC/D,6CAA6C;QAC7C,gEAAgE;QAChE,UAAU,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAEF,MAAM,yBAAyB,GAAG,CAAC,cAAwB,EAAE,EAAE;IAC7D,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC1C,cAAc,CAAC,OAAO,CAAC,CAAC,KAAa,EAAE,EAAE;QACvC,GAAG,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IACH,IAAI,CAAC;QACH,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC;QACzC,MAAM,CAAC,aAAa,CAAC,IAAI,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;IAC9C,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,OAAO,CAAC,IAAI,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;IAC5D,CAAC;AACH,CAAC,CAAC;AAEF,OAAO,EAAE,gBAAgB,EAAE,yBAAyB,EAAE,CAAC","sourcesContent":["/**\n * Extend the Window interface to include Cypress\n */\ndeclare global {\n  interface Window {\n    Cypress?: unknown;\n  }\n}\n\n/**\n * Detects if the current window is running inside an iframe\n * Uses multiple methods to improve detection reliability\n * If detected as iframe, adds an immediate style blocker to prevent content flashes\n */\nconst isWindowInIframe = (window: Window): boolean => {\n  // Make sure we're in a browser environment\n  if (typeof window === \"undefined\") {\n    return false;\n  }\n\n  // Check if running in Cypress\n  const isCypress = Boolean(\n    window.Cypress || window.parent?.Cypress || window.top?.Cypress,\n  );\n\n  // If we're in Cypress, don't treat it as an iframe\n  if (isCypress) {\n    return false;\n  }\n\n  let isInIframe = false;\n\n  try {\n    // Method 1: Check for frameElement\n    // This can throw a cross-origin error, but works reliably for same-origin frames\n    if (window.frameElement !== null) {\n      isInIframe = true;\n    }\n\n    // Method 2: Check specifically for our civic auth iframe\n    // Use explicit type assertion to handle the TypeScript issue\n    const frameEl = window.frameElement as HTMLElement | null;\n    if (frameEl && frameEl.id === \"civic-auth-iframe\") {\n      isInIframe = true;\n    }\n  } catch {\n    // If we get a security/cross-origin error, it's likely because\n    // we're in an iframe from a different origin\n    // So this is actually a positive signal that we're in an iframe\n    isInIframe = true;\n  }\n\n  return isInIframe;\n};\n\nconst removeParamsWithoutReload = (paramsToRemove: string[]) => {\n  const url = new URL(window.location.href);\n  paramsToRemove.forEach((param: string) => {\n    url.searchParams.delete(param);\n  });\n  try {\n    window.history.replaceState({}, \"\", url);\n    window.dispatchEvent(new Event(\"popstate\"));\n  } catch (error) {\n    console.warn(\"window.history.replaceState failed\", error);\n  }\n};\n\nexport { isWindowInIframe, removeParamsWithoutReload };\n"]}
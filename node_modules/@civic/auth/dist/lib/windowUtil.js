/**
 * Detects if the current window is running inside an iframe
 * Uses multiple methods to improve detection reliability
 * If detected as iframe, adds an immediate style blocker to prevent content flashes
 */
const isWindowInIframe = (window) => {
    // Make sure we're in a browser environment
    if (typeof window === "undefined") {
        return false;
    }
    // Check if running in Cypress
    const isCypress = Boolean(window.Cypress || window.parent?.Cypress || window.top?.Cypress);
    // If we're in Cypress, don't treat it as an iframe
    if (isCypress) {
        return false;
    }
    let isInIframe = false;
    try {
        // Method 1: Check for frameElement
        // This can throw a cross-origin error, but works reliably for same-origin frames
        if (window.frameElement !== null) {
            isInIframe = true;
        }
        // Method 2: Check specifically for our civic auth iframe
        // Use explicit type assertion to handle the TypeScript issue
        const frameEl = window.frameElement;
        if (frameEl && frameEl.id === "civic-auth-iframe") {
            isInIframe = true;
        }
    }
    catch {
        // If we get a security/cross-origin error, it's likely because
        // we're in an iframe from a different origin
        // So this is actually a positive signal that we're in an iframe
        isInIframe = true;
    }
    return isInIframe;
};
const removeParamsWithoutReload = (paramsToRemove) => {
    const url = new URL(window.location.href);
    paramsToRemove.forEach((param) => {
        url.searchParams.delete(param);
    });
    try {
        window.history.replaceState({}, "", url);
        window.dispatchEvent(new Event("popstate"));
    }
    catch (error) {
        console.warn("window.history.replaceState failed", error);
    }
};
export { isWindowInIframe, removeParamsWithoutReload };
//# sourceMappingURL=windowUtil.js.map
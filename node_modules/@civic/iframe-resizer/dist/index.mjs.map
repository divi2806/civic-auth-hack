{"version":3,"sources":["../src/logger.ts","../src/IframeResizer.tsx"],"names":["LogLevel","MessageType"],"mappings":";;;;;;AAIY,IAAA,QAAA,qBAAAA,SAAL,KAAA;AACL,EAAAA,SAAAA,CAAAA,SAAAA,CAAA,WAAQ,CAAR,CAAA,GAAA,OAAA;AACA,EAAAA,SAAAA,CAAAA,SAAAA,CAAA,UAAO,CAAP,CAAA,GAAA,MAAA;AACA,EAAAA,SAAAA,CAAAA,SAAAA,CAAA,UAAO,CAAP,CAAA,GAAA,MAAA;AACA,EAAAA,SAAAA,CAAAA,SAAAA,CAAA,WAAQ,CAAR,CAAA,GAAA,OAAA;AAJU,EAAAA,OAAAA,SAAAA;AAAA,CAAA,EAAA,QAAA,IAAA,EAAA;AA2BL,IAAM,SAAN,MAAa;AAAA,EAIlB,WAAA,CAAY,OAAyB,GAAA,EAAI,EAAA;AACvC,IAAA,IAAA,CAAK,KAAQ,GAAA,OAAA,CAAQ,KAAQ,GAAA,CAAA,eAAiB,QAAQ,KAAS,IAAA,CAAA;AAC/D,IAAK,IAAA,CAAA,MAAA,GAAS,QAAQ,MAAU,IAAA,sBAAA;AAAA;AAClC;AAAA;AAAA;AAAA,EAKA,KAAA,CAAM,YAAoB,IAAuB,EAAA;AAC/C,IAAI,IAAA,IAAA,CAAK,SAAS,CAAgB,cAAA;AAChC,MAAQ,OAAA,CAAA,KAAA,CAAM,GAAG,IAAK,CAAA,MAAM,IAAI,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI,CAAA;AAAA;AACpD;AACF;AAAA;AAAA;AAAA,EAKA,IAAA,CAAK,YAAoB,IAAuB,EAAA;AAC9C,IAAI,IAAA,IAAA,CAAK,SAAS,CAAe,aAAA;AAC/B,MAAQ,OAAA,CAAA,IAAA,CAAK,GAAG,IAAK,CAAA,MAAM,IAAI,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI,CAAA;AAAA;AACnD;AACF;AAAA;AAAA;AAAA,EAKA,IAAA,CAAK,YAAoB,IAAuB,EAAA;AAC9C,IAAI,IAAA,IAAA,CAAK,SAAS,CAAe,aAAA;AAC/B,MAAQ,OAAA,CAAA,IAAA,CAAK,GAAG,IAAK,CAAA,MAAM,IAAI,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI,CAAA;AAAA;AACnD;AACF;AAAA;AAAA;AAAA,EAKA,KAAA,CAAM,YAAoB,IAAuB,EAAA;AAC/C,IAAI,IAAA,IAAA,CAAK,SAAS,CAAgB,cAAA;AAChC,MAAQ,OAAA,CAAA,KAAA,CAAM,GAAG,IAAK,CAAA,MAAM,IAAI,OAAO,CAAA,CAAA,EAAI,GAAG,IAAI,CAAA;AAAA;AACpD;AACF;AAAA;AAAA;AAAA,EAKA,SAAS,KAAuB,EAAA;AAC9B,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA;AAAA;AACf;AAAA;AAAA;AAAA,EAKA,WAAoB,GAAA;AAClB,IAAA,IAAA,CAAK,KAAQ,GAAA,CAAA;AAAA;AACf;AAAA;AAAA;AAAA,EAKA,YAAqB,GAAA;AACnB,IAAA,IAAA,CAAK,KAAQ,GAAA,CAAA;AAAA;AAEjB;AAKO,IAAM,YAAe,GAAA,CAAC,OAAyB,GAAA,EAAe,KAAA;AACnE,EAAO,OAAA,IAAI,OAAO,OAAO,CAAA;AAC3B;AClGY,IAAA,WAAA,qBAAAC,YAAL,KAAA;AACL,EAAAA,aAAA,QAAS,CAAA,GAAA,qBAAA;AACT,EAAAA,aAAA,OAAQ,CAAA,GAAA,oBAAA;AAFE,EAAAA,OAAAA,YAAAA;AAAA,CAAA,EAAA,WAAA,IAAA,EAAA;AAqEL,IAAM,aAAgB,GAAA,UAAA;AAAA,EAC3B,CACE;AAAA,IACE,aAAgB,GAAA,OAAA;AAAA,IAChB,OAAU,GAAA,IAAA;AAAA,IACV,iBAAoB,GAAA,GAAA;AAAA,IACpB,cAAA;AAAA,IACA,WAAc,GAAA,KAAA;AAAA,IACd,iBAAiB,EAAC;AAAA,IAClB,KAAQ,GAAA,KAAA;AAAA,IACR,QAAQ,EAAC;AAAA,IACT,GAAG;AAAA,KAEL,GACG,KAAA;AACH,IAAM,MAAA,WAAA,GAAc,OAA0B,IAAI,CAAA;AAClD,IAAA,MAAM,CAAC,MAAA,EAAQ,SAAS,CAAA,GAAI,SAAiB,aAAa,CAAA;AAG1D,IAAA,MAAM,MAAS,GAAA,MAAA;AAAA,MACb,IAAI,MAAO,CAAA;AAAA,QACT,KAAA;AAAA,QACA,MAAQ,EAAA;AAAA,OACT;AAAA,KACD,CAAA,OAAA;AAGF,IAAA,SAAA,CAAU,MAAM;AACd,MAAI,IAAA,GAAA,IAAO,YAAY,OAAS,EAAA;AAC9B,QAAI,IAAA,OAAO,QAAQ,UAAY,EAAA;AAC7B,UAAA,GAAA,CAAI,YAAY,OAAO,CAAA;AAAA,SAClB,MAAA;AAEL,UAAA,MAAM,OAAU,GAAA,GAAA;AAChB,UAAA,OAAA,CAAQ,UAAU,WAAY,CAAA,OAAA;AAAA;AAChC;AACF,KACF,EAAG,CAAC,GAAG,CAAC,CAAA;AAER,IAAM,MAAA,eAAA,GAAkB,UAAU,EAAE,UAAA,EAAY,OAAO,iBAAiB,CAAA,OAAA,CAAA,KAAc,EAAC;AAGvF,IAAM,MAAA,oBAAA,GAAuB,KAAM,CAAA,WAAA,CAAY,MAAM;AACnD,MAAA,IAAI,WAAY,CAAA,OAAA,IAAW,WAAY,CAAA,OAAA,CAAQ,aAAe,EAAA;AAC5D,QAAI,IAAA;AACF,UAAA,MAAA,CAAO,MAAM,mCAAmC,CAAA;AAChD,UAAA,WAAA,CAAY,QAAQ,aAAc,CAAA,WAAA,CAAY,EAAE,IAAM,EAAA,cAAA,IAAkB,GAAG,CAAA;AAAA,iBACpE,GAAK,EAAA;AACZ,UAAO,MAAA,CAAA,KAAA,CAAM,0BAA0B,GAAG,CAAA;AAAA;AAC5C;AACF,KACF,EAAG,CAAC,MAAM,CAAC,CAAA;AAGX,IAAM,MAAA,gBAAA,GAAmB,CAAC,CAAsD,KAAA;AAC9E,MAAA,MAAA,CAAO,KAAM,CAAA,qBAAA,EAAuB,WAAY,CAAA,OAAA,EAAS,GAAG,CAAA;AAG5D,MAAA,IAAI,YAAY,MAAQ,EAAA;AACtB,QAAA,WAAA,CAAY,OAAO,CAAC,CAAA;AAAA;AAItB,MAAA,UAAA,CAAW,sBAAsB,GAAG,CAAA;AACpC,MAAA,UAAA,CAAW,sBAAsB,GAAG,CAAA;AACpC,MAAA,UAAA,CAAW,sBAAsB,GAAI,CAAA;AAAA,KACvC;AAGA,IAAA,SAAA,CAAU,MAAM;AACd,MAAM,MAAA,aAAA,GAAgB,CAAC,KAAwB,KAAA;AAE7C,QAAA,MAAA,CAAO,MAAM,mBAAqB,EAAA,KAAA,CAAM,IAAM,EAAA,cAAA,EAAgB,MAAM,MAAM,CAAA;AAG1E,QAAI,IAAA,CAAC,YAAY,OAAS,EAAA;AACxB,UAAA,MAAA,CAAO,MAAM,+BAA+B,CAAA;AAC5C,UAAA;AAAA;AAIF,QAAI,IAAA;AACF,UAAA,MAAM,UAAU,KAAM,CAAA,IAAA;AAGtB,UAAI,IAAA,OAAA,CAAQ,SAAS,oBAAmB,cAAA;AACtC,YAAA,MAAA,CAAO,MAAM,0CAA0C,CAAA;AAEvD,YAAA,UAAA,CAAW,sBAAsB,GAAG,CAAA;AAAA;AAItC,UAAI,IAAA,OAAA,CAAQ,SAAS,qBAAoB,eAAA;AACvC,YAAO,MAAA,CAAA,KAAA,CAAM,kCAAoC,EAAA,OAAA,CAAQ,MAAM,CAAA;AAC/D,YAAU,SAAA,CAAA,CAAA,EAAG,OAAQ,CAAA,MAAM,CAAI,EAAA,CAAA,CAAA;AAG/B,YAAA,IAAI,YAAY,OAAS,EAAA;AACvB,cAAA,WAAA,CAAY,OAAQ,CAAA,KAAA,CAAM,MAAS,GAAA,CAAA,EAAG,QAAQ,MAAM,CAAA,EAAA,CAAA;AAAA;AAGtD,YAAA,cAAA,GAAiB,QAAQ,MAAM,CAAA;AAAA;AACjC,iBACO,KAAO,EAAA;AAEd,UAAA,MAAA,CAAO,KAAM,CAAA,2BAAA,EAA6B,KAAO,EAAA,eAAA,EAAiB,MAAM,IAAI,CAAA;AAAA;AAC9E,OACF;AAEA,MAAO,MAAA,CAAA,gBAAA,CAAiB,WAAW,aAAa,CAAA;AAEhD,MAAA,OAAO,MAAM;AACX,QAAO,MAAA,CAAA,mBAAA,CAAoB,WAAW,aAAa,CAAA;AAAA,OACrD;AAAA,OACC,CAAC,WAAA,EAAa,gBAAgB,cAAgB,EAAA,MAAA,EAAQ,oBAAoB,CAAC,CAAA;AAG9E,IAAA,SAAA,CAAU,MAAM;AAEd,MAAM,MAAA,oBAAA,GAAuB,CAAC,GAAK,EAAA,GAAA,EAAK,KAAM,GAAM,EAAA,GAAA,EAAM,GAAM,EAAA,GAAA,EAAM,GAAK,CAAA;AAC3E,MAAA,MAAM,WAA4C,EAAC;AAGnD,MAAqB,oBAAA,CAAA,OAAA,CAAQ,CAAC,QAAa,KAAA;AACzC,QAAM,MAAA,SAAA,GAAY,UAAW,CAAA,oBAAA,EAAsB,QAAQ,CAAA;AAC3D,QAAA,QAAA,CAAS,KAAK,SAAS,CAAA;AAAA,OACxB,CAAA;AAED,MAAA,OAAO,MAAM;AACX,QAAA,QAAA,CAAS,OAAQ,CAAA,CAAC,SAAc,KAAA,YAAA,CAAa,SAAS,CAAC,CAAA;AAAA,OACzD;AAAA,KACF,EAAG,CAAC,oBAAoB,CAAC,CAAA;AAEzB,IACE,uBAAA,GAAA;AAAA,MAAC,QAAA;AAAA,MAAA;AAAA,QACE,GAAG,WAAA;AAAA,QACJ,MAAQ,EAAA,gBAAA;AAAA,QACR,GAAK,EAAA,WAAA;AAAA,QACL,KAAO,EAAA;AAAA,UACL,MAAQ,EAAA,MAAA;AAAA,UACR,KAAO,EAAA,MAAA;AAAA,UACP,QAAU,EAAA,QAAA;AAAA,UACV,MAAA;AAAA,UACA,SAAW,EAAA,OAAA;AAAA;AAAA,UACX,GAAG,eAAA;AAAA,UACH,GAAG;AAAA;AACL;AAAA,KACF;AAAA;AAGN;AAEA,aAAA,CAAc,WAAc,GAAA,eAAA","file":"index.mjs","sourcesContent":["/**\n * Logger utility for iframe-resizer\n */\n\nexport enum LogLevel {\n  ERROR = 0,\n  WARN = 1,\n  INFO = 2,\n  DEBUG = 3,\n}\n\nexport interface LoggerOptions {\n  /**\n   * Minimum log level to output\n   */\n  level?: LogLevel;\n\n  /**\n   * Whether to enable debug mode\n   */\n  debug?: boolean;\n\n  /**\n   * Prefix for log messages\n   */\n  prefix?: string;\n}\n\n/**\n * Logger class for iframe-resizer\n */\nexport class Logger {\n  private level: LogLevel;\n  private prefix: string;\n\n  constructor(options: LoggerOptions = {}) {\n    this.level = options.debug ? LogLevel.DEBUG : options.level || LogLevel.INFO;\n    this.prefix = options.prefix || \"[CivicIframeResizer]\";\n  }\n\n  /**\n   * Log error message\n   */\n  error(message: string, ...args: unknown[]): void {\n    if (this.level >= LogLevel.ERROR) {\n      console.error(`${this.prefix} ${message}`, ...args);\n    }\n  }\n\n  /**\n   * Log warning message\n   */\n  warn(message: string, ...args: unknown[]): void {\n    if (this.level >= LogLevel.WARN) {\n      console.warn(`${this.prefix} ${message}`, ...args);\n    }\n  }\n\n  /**\n   * Log info message\n   */\n  info(message: string, ...args: unknown[]): void {\n    if (this.level >= LogLevel.INFO) {\n      console.info(`${this.prefix} ${message}`, ...args);\n    }\n  }\n\n  /**\n   * Log debug message - only shown in debug mode\n   */\n  debug(message: string, ...args: unknown[]): void {\n    if (this.level >= LogLevel.DEBUG) {\n      console.debug(`${this.prefix} ${message}`, ...args);\n    }\n  }\n\n  /**\n   * Set the log level\n   */\n  setLevel(level: LogLevel): void {\n    this.level = level;\n  }\n\n  /**\n   * Enable debug mode\n   */\n  enableDebug(): void {\n    this.level = LogLevel.DEBUG;\n  }\n\n  /**\n   * Disable debug mode\n   */\n  disableDebug(): void {\n    this.level = LogLevel.INFO;\n  }\n}\n\n/**\n * Create a default logger\n */\nexport const createLogger = (options: LoggerOptions = {}): Logger => {\n  return new Logger(options);\n};\n","import type { CSSProperties, ReactEventHandler } from \"react\";\nimport React, { forwardRef, useEffect, useRef, useState } from \"react\";\nimport { Logger } from \"./logger.js\";\n\n// Message types for communication between parent and child\nexport enum MessageType {\n  RESIZE = \"civic-iframe-resize\",\n  READY = \"civic-iframe-ready\",\n}\n\nexport interface ResizeMessage {\n  type: MessageType.RESIZE;\n  height: number;\n  width?: number; // Optional - we can add width resizing support later if needed\n}\n\nexport interface ReadyMessage {\n  type: MessageType.READY;\n}\n\nexport type IframeMessage = ResizeMessage | ReadyMessage;\n\n// Props for the IframeResizer component\nexport interface IframeResizerProps {\n  /**\n   * Initial height of the iframe (default: 100px)\n   */\n  initialHeight?: string;\n\n  /**\n   * Whether to animate height changes (default: true)\n   */\n  animate?: boolean;\n\n  /**\n   * Duration of height change animation in ms (default: 250ms)\n   */\n  animationDuration?: number;\n\n  /**\n   * Function called when iframe height changes\n   */\n  onResizeHeight?: (height: number) => void;\n\n  /**\n   * Whether to check the origin of messages (default: false)\n   */\n  checkOrigin?: boolean | string[];\n\n  /**\n   * Allowed origins if checkOrigin is true\n   */\n  allowedOrigins?: string[];\n\n  /**\n   * Enable debug mode for detailed logging\n   */\n  debug?: boolean;\n\n  /**\n   * Standard iframe props\n   */\n  src?: string;\n  id?: string;\n  title?: string;\n  allow?: string;\n  allowFullScreen?: boolean;\n  name?: string;\n  onLoad?: ReactEventHandler<HTMLIFrameElement>;\n  style?: CSSProperties;\n  className?: string;\n  \"data-testid\"?: string;\n}\n\nexport const IframeResizer = forwardRef<HTMLIFrameElement, IframeResizerProps>(\n  (\n    {\n      initialHeight = \"100px\",\n      animate = true,\n      animationDuration = 250,\n      onResizeHeight,\n      checkOrigin = false,\n      allowedOrigins = [],\n      debug = false,\n      style = {},\n      ...iframeProps\n    },\n    ref,\n  ) => {\n    const internalRef = useRef<HTMLIFrameElement>(null);\n    const [height, setHeight] = useState<string>(initialHeight);\n\n    // Create logger\n    const logger = useRef(\n      new Logger({\n        debug,\n        prefix: \"[CivicIframeResizer][Parent]\",\n      }),\n    ).current;\n\n    // Forward ref to parent component\n    useEffect(() => {\n      if (ref && internalRef.current) {\n        if (typeof ref === \"function\") {\n          ref(internalRef.current);\n        } else {\n          // Using a mutable object as a workaround for the read-only property\n          const refCopy = ref as { current: HTMLIFrameElement | null };\n          refCopy.current = internalRef.current;\n        }\n      }\n    }, [ref]);\n\n    const transitionStyle = animate ? { transition: `all ${animationDuration}ms ease` } : {};\n\n    // Request size from child iframe - wrapped in useCallback to avoid dependency issues\n    const requestSizeFromChild = React.useCallback(() => {\n      if (internalRef.current && internalRef.current.contentWindow) {\n        try {\n          logger.debug(\"Requesting size from child iframe\");\n          internalRef.current.contentWindow.postMessage({ type: \"request-size\" }, \"*\");\n        } catch (err) {\n          logger.error(\"Error requesting size:\", err);\n        }\n      }\n    }, [logger]);\n\n    // Handle iframe load event - request size after the iframe has loaded\n    const handleIframeLoad = (e: React.SyntheticEvent<HTMLIFrameElement, Event>) => {\n      logger.debug(\"Iframe loaded, src:\", internalRef.current?.src);\n\n      // Call original onLoad handler if provided\n      if (iframeProps.onLoad) {\n        iframeProps.onLoad(e);\n      }\n\n      // Schedule multiple size requests after load\n      setTimeout(requestSizeFromChild, 100);\n      setTimeout(requestSizeFromChild, 500);\n      setTimeout(requestSizeFromChild, 1000);\n    };\n\n    // Handle messages from the child iframe\n    useEffect(() => {\n      const handleMessage = (event: MessageEvent) => {\n        // Log all messages for debugging\n        logger.debug(\"Received message:\", event.data, \"from origin:\", event.origin);\n\n        // Skip processing if not from our iframe\n        if (!internalRef.current) {\n          logger.debug(\"No iframe reference available\");\n          return;\n        }\n\n        // Check if the message is related to our iframe\n        try {\n          const message = event.data as IframeMessage;\n\n          // Handle ready message\n          if (message.type === MessageType.READY) {\n            logger.debug(\"Received READY message from child iframe\");\n            // Request size after receiving ready message\n            setTimeout(requestSizeFromChild, 100);\n          }\n\n          // Handle resize message\n          if (message.type === MessageType.RESIZE) {\n            logger.debug(\"Received RESIZE message, height:\", message.height);\n            setHeight(`${message.height}px`);\n\n            // Also set height directly on the iframe element as a safety measure\n            if (internalRef.current) {\n              internalRef.current.style.height = `${message.height}px`;\n            }\n\n            onResizeHeight?.(message.height);\n          }\n        } catch (error) {\n          // Log error with message data\n          logger.error(\"Error processing message:\", error, \"Message data:\", event.data);\n        }\n      };\n\n      window.addEventListener(\"message\", handleMessage);\n\n      return () => {\n        window.removeEventListener(\"message\", handleMessage);\n      };\n    }, [checkOrigin, allowedOrigins, onResizeHeight, logger, requestSizeFromChild]);\n\n    // Use the onLoad prop to handle iframe loading\n    useEffect(() => {\n      // Request size periodically during the first 10 seconds to ensure we get the correct height\n      const initialLoadIntervals = [100, 500, 1000, 2000, 3000, 5000, 7000, 10000];\n      const timeouts: ReturnType<typeof setTimeout>[] = [];\n\n      // Schedule size requests at specified intervals\n      initialLoadIntervals.forEach((interval) => {\n        const timeoutId = setTimeout(requestSizeFromChild, interval);\n        timeouts.push(timeoutId);\n      });\n\n      return () => {\n        timeouts.forEach((timeoutId) => clearTimeout(timeoutId));\n      };\n    }, [requestSizeFromChild]);\n\n    return (\n      <iframe\n        {...iframeProps}\n        onLoad={handleIframeLoad}\n        ref={internalRef}\n        style={{\n          border: \"none\",\n          width: \"100%\",\n          overflow: \"hidden\",\n          height,\n          minHeight: \"200px\", // Ensure a minimum height to prevent empty iframe\n          ...transitionStyle,\n          ...style,\n        }}\n      />\n    );\n  },\n);\n\nIframeResizer.displayName = \"IframeResizer\";\n"]}
// src/child.ts
var MessageType = /* @__PURE__ */ ((MessageType2) => {
  MessageType2["RESIZE"] = "civic-iframe-resize";
  MessageType2["READY"] = "civic-iframe-ready";
  return MessageType2;
})(MessageType || {});
var IframeResizerChild = class {
  constructor(options = {}) {
    this.lastHeight = 0;
    this.initialized = false;
    this.resizeObserver = null;
    this.mutationObserver = null;
    this.intervalId = null;
    this.debounceTimeout = null;
    this.isVisible = true;
    /**
     * Set up various methods to monitor size changes
     */
    this.setupSizeMonitoring = () => {
      const { targetElement } = this.options;
      if (typeof ResizeObserver !== "undefined") {
        this.log("Setting up ResizeObserver");
        this.resizeObserver = new ResizeObserver(this.handleElementResize);
        this.resizeObserver.observe(targetElement);
      }
      if (typeof MutationObserver !== "undefined") {
        this.log("Setting up MutationObserver");
        this.mutationObserver = new MutationObserver(this.handleMutation);
        this.mutationObserver.observe(targetElement, {
          attributes: true,
          childList: true,
          subtree: true,
          characterData: true
        });
      }
    };
    /**
     * Handle resize of the target element
     */
    this.handleElementResize = () => {
      this.debounceResize();
    };
    /**
     * Handle DOM mutations
     */
    this.handleMutation = () => {
      this.debounceResize();
    };
    /**
     * Handle window resize events
     */
    this.handleWindowResize = () => {
      this.debounceResize();
    };
    /**
     * Debounce resize events to avoid hammering the parent with messages
     */
    this.debounceResize = () => {
      if (this.debounceTimeout !== null) {
        window.clearTimeout(this.debounceTimeout);
      }
      this.debounceTimeout = window.setTimeout(() => {
        this.sendSize();
        this.debounceTimeout = null;
      }, this.options.debounceDelay);
    };
    /**
     * Check for size changes on an interval
     */
    this.checkForSizeChanges = () => {
      if (!this.isVisible) return;
      const height = this.getElementHeight();
      if (height !== this.lastHeight) {
        this.sendSize();
      }
    };
    /**
     * Handle document visibility changes
     */
    this.handleVisibilityChange = () => {
      this.isVisible = !document.hidden;
      if (this.isVisible) {
        this.sendSize();
      }
    };
    this.options = {
      targetElement: options.targetElement || document.body,
      checkInterval: options.checkInterval || 200,
      debounceDelay: options.debounceDelay || 50,
      debug: options.debug || false
    };
  }
  /**
   * Initialize the resizer
   */
  init() {
    if (this.initialized) return;
    this.log("Initializing iframe resizer child");
    this.initialized = true;
    this.sendReadyMessage();
    this.setupSizeMonitoring();
    document.addEventListener("visibilitychange", this.handleVisibilityChange);
    if (document.readyState === "complete") {
      setTimeout(() => {
        this.sendSize();
      }, 300);
    } else {
      window.addEventListener("load", () => {
        setTimeout(() => {
          this.sendSize();
        }, 300);
      });
    }
    window.addEventListener("resize", this.handleWindowResize);
    this.intervalId = window.setInterval(this.checkForSizeChanges, this.options.checkInterval);
  }
  /**
   * Clean up and stop monitoring
   */
  destroy() {
    this.log("Destroying iframe resizer child");
    document.removeEventListener("visibilitychange", this.handleVisibilityChange);
    window.removeEventListener("resize", this.handleWindowResize);
    if (this.intervalId !== null) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
      this.resizeObserver = null;
    }
    if (this.mutationObserver) {
      this.mutationObserver.disconnect();
      this.mutationObserver = null;
    }
    this.initialized = false;
  }
  /**
   * Get the current height of the target element
   */
  getElementHeight() {
    const { targetElement } = this.options;
    return Math.max(targetElement.offsetHeight, targetElement.scrollHeight);
  }
  /**
   * Send a message to the parent window with the current size
   */
  sendSize() {
    const height = this.getElementHeight();
    if (height !== this.lastHeight) {
      this.log(`Sending new height: ${height}px (previous: ${this.lastHeight}px)`);
      this.lastHeight = height;
      try {
        window.parent.postMessage(
          {
            type: "civic-iframe-resize" /* RESIZE */,
            height
          },
          "*"
        );
      } catch (err) {
        this.log("Error sending message to parent", err);
      }
    }
  }
  /**
   * Send a ready message to the parent window
   */
  sendReadyMessage() {
    this.log("Sending ready message to parent");
    try {
      window.parent.postMessage(
        {
          type: "civic-iframe-ready" /* READY */
        },
        "*"
      );
    } catch (err) {
      this.log("Error sending ready message to parent", err);
    }
  }
  /**
   * Log debug information if enabled
   */
  log(message, ...args) {
    if (this.options.debug) {
      console.log(`[CivicIframeResizer] ${message}`, ...args);
    }
  }
};
var iframeResizerChild = new IframeResizerChild();
if (typeof window !== "undefined") {
  if (document.readyState === "complete") {
    iframeResizerChild.init();
  } else {
    window.addEventListener("load", () => {
      iframeResizerChild.init();
    });
  }
}
var child_default = iframeResizerChild;

export { IframeResizerChild, MessageType, child_default as default };
//# sourceMappingURL=child.mjs.map
//# sourceMappingURL=child.mjs.map
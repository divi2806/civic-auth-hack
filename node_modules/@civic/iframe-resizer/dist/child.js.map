{"version":3,"sources":["../src/child.ts"],"names":["MessageType"],"mappings":"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","file":"child.js","sourcesContent":["// Message types for communication\nexport enum MessageType {\n  RESIZE = \"civic-iframe-resize\",\n  READY = \"civic-iframe-ready\",\n}\n\ninterface ChildOptions {\n  /**\n   * Element to measure height of (default: document.body)\n   */\n  targetElement?: HTMLElement;\n\n  /**\n   * Interval in ms to check for height changes (default: 200)\n   */\n  checkInterval?: number;\n\n  /**\n   * Debounce resize events to avoid excessive messaging (default: 50)\n   */\n  debounceDelay?: number;\n\n  /**\n   * Log debug information to console (default: false)\n   */\n  debug?: boolean;\n}\n\nclass IframeResizerChild {\n  private options: Required<ChildOptions>;\n  private lastHeight: number = 0;\n  private initialized: boolean = false;\n  private resizeObserver: ResizeObserver | null = null;\n  private mutationObserver: MutationObserver | null = null;\n  private intervalId: number | null = null;\n  private debounceTimeout: number | null = null;\n  private isVisible: boolean = true;\n\n  constructor(options: ChildOptions = {}) {\n    this.options = {\n      targetElement: options.targetElement || document.body,\n      checkInterval: options.checkInterval || 200,\n      debounceDelay: options.debounceDelay || 50,\n      debug: options.debug || false,\n    };\n  }\n\n  /**\n   * Initialize the resizer\n   */\n  public init(): void {\n    if (this.initialized) return;\n\n    this.log(\"Initializing iframe resizer child\");\n    this.initialized = true;\n\n    // Send ready message to parent\n    this.sendReadyMessage();\n\n    // Start monitoring for size changes\n    this.setupSizeMonitoring();\n\n    // Listen for visibility changes\n    document.addEventListener(\"visibilitychange\", this.handleVisibilityChange);\n\n    // Wait for the page to be fully loaded and rendered before sending initial size\n    if (document.readyState === \"complete\") {\n      // If already complete, wait a bit for any async content to render\n      setTimeout(() => {\n        this.sendSize();\n      }, 300);\n    } else {\n      // Otherwise wait for the load event\n      window.addEventListener(\"load\", () => {\n        // Even after load, wait a bit for final rendering and any async content\n        setTimeout(() => {\n          this.sendSize();\n        }, 300);\n      });\n    }\n\n    // Listen for window resize events\n    window.addEventListener(\"resize\", this.handleWindowResize);\n\n    // Setup fall back interval checker\n    this.intervalId = window.setInterval(this.checkForSizeChanges, this.options.checkInterval);\n  }\n\n  /**\n   * Clean up and stop monitoring\n   */\n  public destroy(): void {\n    this.log(\"Destroying iframe resizer child\");\n\n    document.removeEventListener(\"visibilitychange\", this.handleVisibilityChange);\n    window.removeEventListener(\"resize\", this.handleWindowResize);\n\n    if (this.intervalId !== null) {\n      clearInterval(this.intervalId);\n      this.intervalId = null;\n    }\n\n    if (this.resizeObserver) {\n      this.resizeObserver.disconnect();\n      this.resizeObserver = null;\n    }\n\n    if (this.mutationObserver) {\n      this.mutationObserver.disconnect();\n      this.mutationObserver = null;\n    }\n\n    this.initialized = false;\n  }\n\n  /**\n   * Set up various methods to monitor size changes\n   */\n  private setupSizeMonitoring = (): void => {\n    const { targetElement } = this.options;\n\n    // Use ResizeObserver if available (modern browsers)\n    if (typeof ResizeObserver !== \"undefined\") {\n      this.log(\"Setting up ResizeObserver\");\n      this.resizeObserver = new ResizeObserver(this.handleElementResize);\n      this.resizeObserver.observe(targetElement);\n    }\n\n    // Use MutationObserver as backup\n    if (typeof MutationObserver !== \"undefined\") {\n      this.log(\"Setting up MutationObserver\");\n      this.mutationObserver = new MutationObserver(this.handleMutation);\n      this.mutationObserver.observe(targetElement, {\n        attributes: true,\n        childList: true,\n        subtree: true,\n        characterData: true,\n      });\n    }\n  };\n\n  /**\n   * Handle resize of the target element\n   */\n  private handleElementResize = (): void => {\n    this.debounceResize();\n  };\n\n  /**\n   * Handle DOM mutations\n   */\n  private handleMutation = (): void => {\n    this.debounceResize();\n  };\n\n  /**\n   * Handle window resize events\n   */\n  private handleWindowResize = (): void => {\n    this.debounceResize();\n  };\n\n  /**\n   * Debounce resize events to avoid hammering the parent with messages\n   */\n  private debounceResize = (): void => {\n    if (this.debounceTimeout !== null) {\n      window.clearTimeout(this.debounceTimeout);\n    }\n\n    this.debounceTimeout = window.setTimeout(() => {\n      this.sendSize();\n      this.debounceTimeout = null;\n    }, this.options.debounceDelay);\n  };\n\n  /**\n   * Check for size changes on an interval\n   */\n  private checkForSizeChanges = (): void => {\n    if (!this.isVisible) return;\n\n    const height = this.getElementHeight();\n\n    if (height !== this.lastHeight) {\n      this.sendSize();\n    }\n  };\n\n  /**\n   * Handle document visibility changes\n   */\n  private handleVisibilityChange = (): void => {\n    this.isVisible = !document.hidden;\n\n    if (this.isVisible) {\n      // Document became visible, update size immediately\n      this.sendSize();\n    }\n  };\n\n  /**\n   * Get the current height of the target element\n   */\n  private getElementHeight(): number {\n    const { targetElement } = this.options;\n    return Math.max(targetElement.offsetHeight, targetElement.scrollHeight);\n  }\n\n  /**\n   * Send a message to the parent window with the current size\n   */\n  private sendSize(): void {\n    const height = this.getElementHeight();\n\n    if (height !== this.lastHeight) {\n      this.log(`Sending new height: ${height}px (previous: ${this.lastHeight}px)`);\n      this.lastHeight = height;\n\n      try {\n        window.parent.postMessage(\n          {\n            type: MessageType.RESIZE,\n            height,\n          },\n          \"*\",\n        );\n      } catch (err) {\n        this.log(\"Error sending message to parent\", err);\n      }\n    }\n  }\n\n  /**\n   * Send a ready message to the parent window\n   */\n  private sendReadyMessage(): void {\n    this.log(\"Sending ready message to parent\");\n\n    try {\n      window.parent.postMessage(\n        {\n          type: MessageType.READY,\n        },\n        \"*\",\n      );\n    } catch (err) {\n      this.log(\"Error sending ready message to parent\", err);\n    }\n  }\n\n  /**\n   * Log debug information if enabled\n   */\n  private log(message: string, ...args: unknown[]): void {\n    if (this.options.debug) {\n      console.log(`[CivicIframeResizer] ${message}`, ...args);\n    }\n  }\n}\n\n// Export singleton instance\nconst iframeResizerChild = new IframeResizerChild();\n\n// Auto-initialize when loaded\nif (typeof window !== \"undefined\") {\n  // Wait for document to be ready\n  if (document.readyState === \"complete\") {\n    iframeResizerChild.init();\n  } else {\n    window.addEventListener(\"load\", () => {\n      iframeResizerChild.init();\n    });\n  }\n}\n\n// Export the class for people who want to create their own instance\nexport { IframeResizerChild };\n\n// Export the singleton instance as default\nexport default iframeResizerChild;\n"]}
import React, { forwardRef, useRef, useState, useEffect } from 'react';
import { jsx } from 'react/jsx-runtime';

// src/IframeResizer.tsx

// src/logger.ts
var LogLevel = /* @__PURE__ */ ((LogLevel2) => {
  LogLevel2[LogLevel2["ERROR"] = 0] = "ERROR";
  LogLevel2[LogLevel2["WARN"] = 1] = "WARN";
  LogLevel2[LogLevel2["INFO"] = 2] = "INFO";
  LogLevel2[LogLevel2["DEBUG"] = 3] = "DEBUG";
  return LogLevel2;
})(LogLevel || {});
var Logger = class {
  constructor(options = {}) {
    this.level = options.debug ? 3 /* DEBUG */ : options.level || 2 /* INFO */;
    this.prefix = options.prefix || "[CivicIframeResizer]";
  }
  /**
   * Log error message
   */
  error(message, ...args) {
    if (this.level >= 0 /* ERROR */) {
      console.error(`${this.prefix} ${message}`, ...args);
    }
  }
  /**
   * Log warning message
   */
  warn(message, ...args) {
    if (this.level >= 1 /* WARN */) {
      console.warn(`${this.prefix} ${message}`, ...args);
    }
  }
  /**
   * Log info message
   */
  info(message, ...args) {
    if (this.level >= 2 /* INFO */) {
      console.info(`${this.prefix} ${message}`, ...args);
    }
  }
  /**
   * Log debug message - only shown in debug mode
   */
  debug(message, ...args) {
    if (this.level >= 3 /* DEBUG */) {
      console.debug(`${this.prefix} ${message}`, ...args);
    }
  }
  /**
   * Set the log level
   */
  setLevel(level) {
    this.level = level;
  }
  /**
   * Enable debug mode
   */
  enableDebug() {
    this.level = 3 /* DEBUG */;
  }
  /**
   * Disable debug mode
   */
  disableDebug() {
    this.level = 2 /* INFO */;
  }
};
var createLogger = (options = {}) => {
  return new Logger(options);
};
var MessageType = /* @__PURE__ */ ((MessageType2) => {
  MessageType2["RESIZE"] = "civic-iframe-resize";
  MessageType2["READY"] = "civic-iframe-ready";
  return MessageType2;
})(MessageType || {});
var IframeResizer = forwardRef(
  ({
    initialHeight = "100px",
    animate = true,
    animationDuration = 250,
    onResizeHeight,
    checkOrigin = false,
    allowedOrigins = [],
    debug = false,
    style = {},
    ...iframeProps
  }, ref) => {
    const internalRef = useRef(null);
    const [height, setHeight] = useState(initialHeight);
    const logger = useRef(
      new Logger({
        debug,
        prefix: "[CivicIframeResizer][Parent]"
      })
    ).current;
    useEffect(() => {
      if (ref && internalRef.current) {
        if (typeof ref === "function") {
          ref(internalRef.current);
        } else {
          const refCopy = ref;
          refCopy.current = internalRef.current;
        }
      }
    }, [ref]);
    const transitionStyle = animate ? { transition: `all ${animationDuration}ms ease` } : {};
    const requestSizeFromChild = React.useCallback(() => {
      if (internalRef.current && internalRef.current.contentWindow) {
        try {
          logger.debug("Requesting size from child iframe");
          internalRef.current.contentWindow.postMessage({ type: "request-size" }, "*");
        } catch (err) {
          logger.error("Error requesting size:", err);
        }
      }
    }, [logger]);
    const handleIframeLoad = (e) => {
      logger.debug("Iframe loaded, src:", internalRef.current?.src);
      if (iframeProps.onLoad) {
        iframeProps.onLoad(e);
      }
      setTimeout(requestSizeFromChild, 100);
      setTimeout(requestSizeFromChild, 500);
      setTimeout(requestSizeFromChild, 1e3);
    };
    useEffect(() => {
      const handleMessage = (event) => {
        logger.debug("Received message:", event.data, "from origin:", event.origin);
        if (!internalRef.current) {
          logger.debug("No iframe reference available");
          return;
        }
        try {
          const message = event.data;
          if (message.type === "civic-iframe-ready" /* READY */) {
            logger.debug("Received READY message from child iframe");
            setTimeout(requestSizeFromChild, 100);
          }
          if (message.type === "civic-iframe-resize" /* RESIZE */) {
            logger.debug("Received RESIZE message, height:", message.height);
            setHeight(`${message.height}px`);
            if (internalRef.current) {
              internalRef.current.style.height = `${message.height}px`;
            }
            onResizeHeight?.(message.height);
          }
        } catch (error) {
          logger.error("Error processing message:", error, "Message data:", event.data);
        }
      };
      window.addEventListener("message", handleMessage);
      return () => {
        window.removeEventListener("message", handleMessage);
      };
    }, [checkOrigin, allowedOrigins, onResizeHeight, logger, requestSizeFromChild]);
    useEffect(() => {
      const initialLoadIntervals = [100, 500, 1e3, 2e3, 3e3, 5e3, 7e3, 1e4];
      const timeouts = [];
      initialLoadIntervals.forEach((interval) => {
        const timeoutId = setTimeout(requestSizeFromChild, interval);
        timeouts.push(timeoutId);
      });
      return () => {
        timeouts.forEach((timeoutId) => clearTimeout(timeoutId));
      };
    }, [requestSizeFromChild]);
    return /* @__PURE__ */ jsx(
      "iframe",
      {
        ...iframeProps,
        onLoad: handleIframeLoad,
        ref: internalRef,
        style: {
          border: "none",
          width: "100%",
          overflow: "hidden",
          height,
          minHeight: "200px",
          // Ensure a minimum height to prevent empty iframe
          ...transitionStyle,
          ...style
        }
      }
    );
  }
);
IframeResizer.displayName = "IframeResizer";

export { IframeResizer, LogLevel, Logger, MessageType, createLogger };
//# sourceMappingURL=index.mjs.map
//# sourceMappingURL=index.mjs.map
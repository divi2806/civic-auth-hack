import React, { ReactEventHandler, CSSProperties } from 'react';

declare enum MessageType {
    RESIZE = "civic-iframe-resize",
    READY = "civic-iframe-ready"
}
interface ResizeMessage {
    type: MessageType.RESIZE;
    height: number;
    width?: number;
}
interface ReadyMessage {
    type: MessageType.READY;
}
type IframeMessage = ResizeMessage | ReadyMessage;
interface IframeResizerProps {
    /**
     * Initial height of the iframe (default: 100px)
     */
    initialHeight?: string;
    /**
     * Whether to animate height changes (default: true)
     */
    animate?: boolean;
    /**
     * Duration of height change animation in ms (default: 250ms)
     */
    animationDuration?: number;
    /**
     * Function called when iframe height changes
     */
    onResizeHeight?: (height: number) => void;
    /**
     * Whether to check the origin of messages (default: false)
     */
    checkOrigin?: boolean | string[];
    /**
     * Allowed origins if checkOrigin is true
     */
    allowedOrigins?: string[];
    /**
     * Enable debug mode for detailed logging
     */
    debug?: boolean;
    /**
     * Standard iframe props
     */
    src?: string;
    id?: string;
    title?: string;
    allow?: string;
    allowFullScreen?: boolean;
    name?: string;
    onLoad?: ReactEventHandler<HTMLIFrameElement>;
    style?: CSSProperties;
    className?: string;
    "data-testid"?: string;
}
declare const IframeResizer: React.ForwardRefExoticComponent<IframeResizerProps & React.RefAttributes<HTMLIFrameElement>>;

/**
 * Logger utility for iframe-resizer
 */
declare enum LogLevel {
    ERROR = 0,
    WARN = 1,
    INFO = 2,
    DEBUG = 3
}
interface LoggerOptions {
    /**
     * Minimum log level to output
     */
    level?: LogLevel;
    /**
     * Whether to enable debug mode
     */
    debug?: boolean;
    /**
     * Prefix for log messages
     */
    prefix?: string;
}
/**
 * Logger class for iframe-resizer
 */
declare class Logger {
    private level;
    private prefix;
    constructor(options?: LoggerOptions);
    /**
     * Log error message
     */
    error(message: string, ...args: unknown[]): void;
    /**
     * Log warning message
     */
    warn(message: string, ...args: unknown[]): void;
    /**
     * Log info message
     */
    info(message: string, ...args: unknown[]): void;
    /**
     * Log debug message - only shown in debug mode
     */
    debug(message: string, ...args: unknown[]): void;
    /**
     * Set the log level
     */
    setLevel(level: LogLevel): void;
    /**
     * Enable debug mode
     */
    enableDebug(): void;
    /**
     * Disable debug mode
     */
    disableDebug(): void;
}
/**
 * Create a default logger
 */
declare const createLogger: (options?: LoggerOptions) => Logger;

export { type IframeMessage, IframeResizer, type IframeResizerProps, LogLevel, Logger, type LoggerOptions, MessageType, type ReadyMessage, type ResizeMessage, createLogger };
